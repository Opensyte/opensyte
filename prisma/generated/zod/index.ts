import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;

// DECIMAL
//------------------------------------------------------

export const DecimalJsLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number(),
  toFixed: z.function(z.tuple([]), z.string()),
})

export const DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const PermissionScalarFieldEnumSchema = z.enum(['id','name','description','module','action','createdAt','updatedAt']);

export const RolePermissionScalarFieldEnumSchema = z.enum(['id','role','permissionId','createdAt']);

export const CustomRoleScalarFieldEnumSchema = z.enum(['id','organizationId','name','description','color','isActive','createdById','createdAt','updatedAt']);

export const CustomRolePermissionScalarFieldEnumSchema = z.enum(['id','customRoleId','permissionId','createdAt']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','logo','website','industry','description','createdAt','updatedAt']);

export const UserOrganizationScalarFieldEnumSchema = z.enum(['userId','organizationId','role','customRoleId','joinedAt']);

export const CustomerScalarFieldEnumSchema = z.enum(['id','organizationId','type','status','firstName','lastName','email','phone','company','position','address','city','state','country','postalCode','source','notes','createdAt','updatedAt']);

export const CustomerInteractionScalarFieldEnumSchema = z.enum(['id','customerId','type','medium','subject','content','scheduledAt','completedAt','createdById','createdAt','updatedAt']);

export const DealScalarFieldEnumSchema = z.enum(['id','customerId','title','value','currency','status','stage','probability','expectedCloseDate','actualCloseDate','description','createdById','createdAt','updatedAt']);

export const ProjectScalarFieldEnumSchema = z.enum(['id','organizationId','name','description','startDate','endDate','status','budget','currency','createdById','createdAt','updatedAt']);

export const TaskScalarFieldEnumSchema = z.enum(['id','organizationId','projectId','parentTaskId','title','description','status','priority','startDate','dueDate','completedAt','assignedToId','createdById','estimatedHours','actualHours','order','createdAt','updatedAt','customerInteractionId']);

export const ProjectResourceScalarFieldEnumSchema = z.enum(['projectId','assigneeId','role','allocation','startDate','endDate','hourlyRate','currency','createdAt','updatedAt']);

export const TimeEntryScalarFieldEnumSchema = z.enum(['id','projectId','taskId','userId','description','startTime','endTime','duration','billable','invoiced','invoiceId','createdAt','updatedAt']);

export const InvoiceScalarFieldEnumSchema = z.enum(['id','organizationId','customerId','customerEmail','customerName','customerAddress','customerPhone','invoiceNumber','status','issueDate','dueDate','paymentTerms','poNumber','subtotal','taxAmount','discountAmount','shippingAmount','totalAmount','paidAmount','currency','notes','internalNotes','termsAndConditions','footer','logoUrl','sentAt','viewedAt','lastReminder','createdById','createdAt','updatedAt']);

export const InvoiceItemScalarFieldEnumSchema = z.enum(['id','invoiceId','productId','description','quantity','unitPrice','taxRate','discountRate','subtotal','sortOrder','createdAt','updatedAt']);

export const PaymentScalarFieldEnumSchema = z.enum(['id','invoiceId','amount','currency','method','reference','paymentDate','notes','feeAmount','status','gatewayId','refundedAmount','createdById','createdAt','updatedAt']);

export const ExpenseScalarFieldEnumSchema = z.enum(['id','organizationId','categoryId','customCategory','amount','currency','date','description','receipt','vendor','paymentMethod','projectId','status','reimbursable','reimbursed','reimbursedAt','submittedAt','createdById','approvedById','approvedAt','rejectedAt','rejectionReason','notes','createdAt','updatedAt']);

export const ExpenseCategoryScalarFieldEnumSchema = z.enum(['id','organizationId','name','description','color','isActive','createdAt','updatedAt']);

export const ExpenseTagScalarFieldEnumSchema = z.enum(['id','organizationId','name','color','createdAt']);

export const ExpenseToTagScalarFieldEnumSchema = z.enum(['expenseId','tagId']);

export const CommentScalarFieldEnumSchema = z.enum(['id','taskId','content','authorId','createdAt','updatedAt']);

export const AttachmentScalarFieldEnumSchema = z.enum(['id','taskId','name','fileUrl','fileType','fileSize','uploadedById','createdAt','updatedAt']);

export const CalendarEventScalarFieldEnumSchema = z.enum(['id','title','description','startTime','endTime','allDay','location','organizerId','createdAt','updatedAt']);

export const CalendarEventAttendeeScalarFieldEnumSchema = z.enum(['eventId','userId','status','createdAt','updatedAt']);

export const NotificationScalarFieldEnumSchema = z.enum(['id','userId','title','content','type','read','actionUrl','createdAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','organizationId','email','role','inviterId','token','status','expiresAt','acceptedAt','createdAt','updatedAt']);

export const EmployeeScalarFieldEnumSchema = z.enum(['id','organizationId','firstName','lastName','email','phone','position','department','hireDate','terminationDate','status','managerId','address','city','state','country','postalCode','birthDate','taxId','emergencyContactName','emergencyContactPhone','createdAt','updatedAt']);

export const PayrollScalarFieldEnumSchema = z.enum(['id','employeeId','payPeriodStart','payPeriodEnd','payDate','basicSalary','overtime','bonus','tax','deductions','netAmount','currency','status','notes','createdById','createdAt','updatedAt']);

export const TimeOffScalarFieldEnumSchema = z.enum(['id','employeeId','type','startDate','endDate','duration','reason','status','approvedById','approvedAt','createdAt','updatedAt']);

export const PerformanceReviewScalarFieldEnumSchema = z.enum(['id','employeeId','reviewerId','reviewPeriod','performanceScore','strengths','improvements','goals','comments','reviewDate','status','createdAt','updatedAt']);

export const MarketingCampaignScalarFieldEnumSchema = z.enum(['id','organizationId','name','description','type','status','startDate','endDate','budget','currency','targetAudience','createdById','createdAt','updatedAt']);

export const EmailCampaignScalarFieldEnumSchema = z.enum(['id','campaignId','subject','content','sender','scheduledAt','sentAt','opens','clicks','bounces','createdAt','updatedAt']);

export const SocialMediaPostScalarFieldEnumSchema = z.enum(['id','campaignId','platform','content','mediaUrl','scheduledAt','publishedAt','likes','shares','comments','createdAt','updatedAt']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','createdAt','updatedAt']);

export const SessionScalarFieldEnumSchema = z.enum(['id','expiresAt','token','createdAt','updatedAt','ipAddress','userAgent','userId']);

export const AccountScalarFieldEnumSchema = z.enum(['id','accountId','providerId','userId','accessToken','refreshToken','idToken','accessTokenExpiresAt','refreshTokenExpiresAt','scope','password','createdAt','updatedAt']);

export const VerificationScalarFieldEnumSchema = z.enum(['id','identifier','value','expiresAt','createdAt','updatedAt']);

export const FinancialReportScalarFieldEnumSchema = z.enum(['id','organizationId','name','description','type','template','filters','dateRange','status','generatedAt','generatedBy','isTemplate','isScheduled','scheduleConfig','createdById','createdAt','updatedAt']);

export const FinancialReportDataScalarFieldEnumSchema = z.enum(['id','reportId','data','metadata','createdAt']);

export const FinancialReportExportScalarFieldEnumSchema = z.enum(['id','reportId','format','fileName','fileUrl','fileSize','status','error','createdById','createdAt','updatedAt']);

export const FinancialReportScheduleScalarFieldEnumSchema = z.enum(['id','reportId','frequency','dayOfWeek','dayOfMonth','time','timezone','isActive','lastRunAt','nextRunAt','recipients','emailSubject','emailBody','createdById','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const UserRoleSchema = z.enum(['ORGANIZATION_OWNER','SUPER_ADMIN','DEPARTMENT_MANAGER','HR_MANAGER','SALES_MANAGER','FINANCE_MANAGER','PROJECT_MANAGER','EMPLOYEE','CONTRACTOR','VIEWER']);

export type UserRoleType = `${z.infer<typeof UserRoleSchema>}`

export const CustomerTypeSchema = z.enum(['LEAD','PROSPECT','CUSTOMER','FORMER']);

export type CustomerTypeType = `${z.infer<typeof CustomerTypeSchema>}`

export const LeadStatusSchema = z.enum(['NEW','CONTACTED','QUALIFIED','PROPOSAL','NEGOTIATION','CLOSED_WON','CLOSED_LOST']);

export type LeadStatusType = `${z.infer<typeof LeadStatusSchema>}`

export const LeadSourceSchema = z.enum(['WEBSITE','REFERRAL','SOCIAL_MEDIA','EMAIL_CAMPAIGN','EVENT','COLD_CALL','OTHER']);

export type LeadSourceType = `${z.infer<typeof LeadSourceSchema>}`

export const InteractionTypeSchema = z.enum(['CALL','EMAIL','MEETING','NOTE','TASK']);

export type InteractionTypeType = `${z.infer<typeof InteractionTypeSchema>}`

export const InteractionMediumSchema = z.enum(['IN_PERSON','PHONE','VIDEO','EMAIL','CHAT','OTHER']);

export type InteractionMediumType = `${z.infer<typeof InteractionMediumSchema>}`

export const ProjectStatusSchema = z.enum(['PLANNED','IN_PROGRESS','ON_HOLD','COMPLETED','CANCELLED']);

export type ProjectStatusType = `${z.infer<typeof ProjectStatusSchema>}`

export const TaskStatusSchema = z.enum(['BACKLOG','TODO','IN_PROGRESS','REVIEW','DONE','ARCHIVED']);

export type TaskStatusType = `${z.infer<typeof TaskStatusSchema>}`

export const PrioritySchema = z.enum(['LOW','MEDIUM','HIGH','URGENT']);

export type PriorityType = `${z.infer<typeof PrioritySchema>}`

export const InvoiceStatusSchema = z.enum(['DRAFT','SENT','VIEWED','PAID','PARTIALLY_PAID','OVERDUE','CANCELLED']);

export type InvoiceStatusType = `${z.infer<typeof InvoiceStatusSchema>}`

export const PaymentMethodSchema = z.enum(['CREDIT_CARD','BANK_TRANSFER','CASH','CHECK','PAYPAL','STRIPE','OTHER']);

export type PaymentMethodType = `${z.infer<typeof PaymentMethodSchema>}`

export const PaymentStatusSchema = z.enum(['PENDING','COMPLETED','FAILED','REFUNDED','PARTIALLY_REFUNDED','CANCELLED']);

export type PaymentStatusType = `${z.infer<typeof PaymentStatusSchema>}`

export const ExpenseStatusSchema = z.enum(['DRAFT','SUBMITTED','APPROVED','REJECTED','PAID','REIMBURSED']);

export type ExpenseStatusType = `${z.infer<typeof ExpenseStatusSchema>}`

export const AttendeeStatusSchema = z.enum(['PENDING','ACCEPTED','DECLINED','TENTATIVE']);

export type AttendeeStatusType = `${z.infer<typeof AttendeeStatusSchema>}`

export const NotificationTypeSchema = z.enum(['TASK','COMMENT','MENTION','REMINDER','SYSTEM']);

export type NotificationTypeType = `${z.infer<typeof NotificationTypeSchema>}`

export const InvitationStatusSchema = z.enum(['PENDING','ACCEPTED','EXPIRED','REVOKED']);

export type InvitationStatusType = `${z.infer<typeof InvitationStatusSchema>}`

export const EmployeeStatusSchema = z.enum(['ACTIVE','ON_LEAVE','TERMINATED','PROBATION']);

export type EmployeeStatusType = `${z.infer<typeof EmployeeStatusSchema>}`

export const PayrollStatusSchema = z.enum(['DRAFT','APPROVED','PAID','CANCELLED']);

export type PayrollStatusType = `${z.infer<typeof PayrollStatusSchema>}`

export const TimeOffTypeSchema = z.enum(['VACATION','SICK','PERSONAL','BEREAVEMENT','MATERNITY','PATERNITY','UNPAID']);

export type TimeOffTypeType = `${z.infer<typeof TimeOffTypeSchema>}`

export const TimeOffStatusSchema = z.enum(['PENDING','APPROVED','DENIED','CANCELLED']);

export type TimeOffStatusType = `${z.infer<typeof TimeOffStatusSchema>}`

export const ReviewStatusSchema = z.enum(['DRAFT','SUBMITTED','ACKNOWLEDGED','COMPLETED']);

export type ReviewStatusType = `${z.infer<typeof ReviewStatusSchema>}`

export const CampaignTypeSchema = z.enum(['EMAIL','SOCIAL_MEDIA','PPC','CONTENT','EVENT','OTHER']);

export type CampaignTypeType = `${z.infer<typeof CampaignTypeSchema>}`

export const CampaignStatusSchema = z.enum(['DRAFT','SCHEDULED','ACTIVE','PAUSED','COMPLETED','CANCELLED']);

export type CampaignStatusType = `${z.infer<typeof CampaignStatusSchema>}`

export const SocialPlatformSchema = z.enum(['FACEBOOK','TWITTER','LINKEDIN','INSTAGRAM','YOUTUBE','TIKTOK','PINTEREST']);

export type SocialPlatformType = `${z.infer<typeof SocialPlatformSchema>}`

export const FinancialReportTypeSchema = z.enum(['INCOME_STATEMENT','BALANCE_SHEET','CASH_FLOW','EXPENSE_REPORT','PROFIT_LOSS','CUSTOM']);

export type FinancialReportTypeType = `${z.infer<typeof FinancialReportTypeSchema>}`

export const FinancialReportStatusSchema = z.enum(['DRAFT','GENERATING','COMPLETED','FAILED','ARCHIVED']);

export type FinancialReportStatusType = `${z.infer<typeof FinancialReportStatusSchema>}`

export const FinancialReportExportFormatSchema = z.enum(['PDF','EXCEL','CSV','JSON']);

export type FinancialReportExportFormatType = `${z.infer<typeof FinancialReportExportFormatSchema>}`

export const FinancialReportExportStatusSchema = z.enum(['PENDING','PROCESSING','COMPLETED','FAILED']);

export type FinancialReportExportStatusType = `${z.infer<typeof FinancialReportExportStatusSchema>}`

export const FinancialReportScheduleFrequencySchema = z.enum(['DAILY','WEEKLY','MONTHLY','QUARTERLY','YEARLY']);

export type FinancialReportScheduleFrequencyType = `${z.infer<typeof FinancialReportScheduleFrequencySchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// PERMISSION SCHEMA
/////////////////////////////////////////

export const PermissionSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Permission = z.infer<typeof PermissionSchema>

/////////////////////////////////////////
// ROLE PERMISSION SCHEMA
/////////////////////////////////////////

export const RolePermissionSchema = z.object({
  role: UserRoleSchema,
  id: z.string().cuid(),
  permissionId: z.string(),
  createdAt: z.coerce.date(),
})

export type RolePermission = z.infer<typeof RolePermissionSchema>

/////////////////////////////////////////
// CUSTOM ROLE SCHEMA
/////////////////////////////////////////

export const CustomRoleSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  color: z.string(),
  isActive: z.boolean(),
  createdById: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CustomRole = z.infer<typeof CustomRoleSchema>

/////////////////////////////////////////
// CUSTOM ROLE PERMISSION SCHEMA
/////////////////////////////////////////

export const CustomRolePermissionSchema = z.object({
  id: z.string().cuid(),
  customRoleId: z.string(),
  permissionId: z.string(),
  createdAt: z.coerce.date(),
})

export type CustomRolePermission = z.infer<typeof CustomRolePermissionSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  logo: z.string().nullable(),
  website: z.string().nullable(),
  industry: z.string().nullable(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// USER ORGANIZATION SCHEMA
/////////////////////////////////////////

export const UserOrganizationSchema = z.object({
  role: UserRoleSchema.nullable(),
  userId: z.string(),
  organizationId: z.string(),
  customRoleId: z.string().nullable(),
  joinedAt: z.coerce.date(),
})

export type UserOrganization = z.infer<typeof UserOrganizationSchema>

/////////////////////////////////////////
// CUSTOMER SCHEMA
/////////////////////////////////////////

export const CustomerSchema = z.object({
  type: CustomerTypeSchema,
  status: LeadStatusSchema.nullable(),
  source: LeadSourceSchema.nullable(),
  id: z.string().cuid(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  company: z.string().nullable(),
  position: z.string().nullable(),
  address: z.string().nullable(),
  city: z.string().nullable(),
  state: z.string().nullable(),
  country: z.string().nullable(),
  postalCode: z.string().nullable(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Customer = z.infer<typeof CustomerSchema>

/////////////////////////////////////////
// CUSTOMER INTERACTION SCHEMA
/////////////////////////////////////////

export const CustomerInteractionSchema = z.object({
  type: InteractionTypeSchema,
  medium: InteractionMediumSchema,
  id: z.string().cuid(),
  customerId: z.string(),
  subject: z.string().nullable(),
  content: z.string().nullable(),
  scheduledAt: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CustomerInteraction = z.infer<typeof CustomerInteractionSchema>

/////////////////////////////////////////
// DEAL SCHEMA
/////////////////////////////////////////

export const DealSchema = z.object({
  status: LeadStatusSchema,
  id: z.string().cuid(),
  customerId: z.string(),
  title: z.string(),
  value: z.instanceof(Prisma.Decimal, { message: "Field 'value' must be a Decimal. Location: ['Models', 'Deal']"}),
  currency: z.string(),
  stage: z.number().int(),
  probability: z.number().nullable(),
  expectedCloseDate: z.coerce.date().nullable(),
  actualCloseDate: z.coerce.date().nullable(),
  description: z.string().nullable(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Deal = z.infer<typeof DealSchema>

/////////////////////////////////////////
// PROJECT SCHEMA
/////////////////////////////////////////

export const ProjectSchema = z.object({
  status: ProjectStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  startDate: z.coerce.date().nullable(),
  endDate: z.coerce.date().nullable(),
  budget: z.instanceof(Prisma.Decimal, { message: "Field 'budget' must be a Decimal. Location: ['Models', 'Project']"}).nullable(),
  currency: z.string(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Project = z.infer<typeof ProjectSchema>

/////////////////////////////////////////
// TASK SCHEMA
/////////////////////////////////////////

export const TaskSchema = z.object({
  status: TaskStatusSchema,
  priority: PrioritySchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  projectId: z.string().nullable(),
  parentTaskId: z.string().nullable(),
  title: z.string(),
  description: z.string().nullable(),
  startDate: z.coerce.date().nullable(),
  dueDate: z.coerce.date().nullable(),
  completedAt: z.coerce.date().nullable(),
  assignedToId: z.string().nullable(),
  createdById: z.string().nullable(),
  estimatedHours: z.number().nullable(),
  actualHours: z.number().nullable(),
  order: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  customerInteractionId: z.string().nullable(),
})

export type Task = z.infer<typeof TaskSchema>

/////////////////////////////////////////
// PROJECT RESOURCE SCHEMA
/////////////////////////////////////////

export const ProjectResourceSchema = z.object({
  projectId: z.string(),
  assigneeId: z.string(),
  role: z.string().nullable(),
  allocation: z.number().nullable(),
  startDate: z.coerce.date().nullable(),
  endDate: z.coerce.date().nullable(),
  hourlyRate: z.instanceof(Prisma.Decimal, { message: "Field 'hourlyRate' must be a Decimal. Location: ['Models', 'ProjectResource']"}).nullable(),
  currency: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProjectResource = z.infer<typeof ProjectResourceSchema>

/////////////////////////////////////////
// TIME ENTRY SCHEMA
/////////////////////////////////////////

export const TimeEntrySchema = z.object({
  id: z.string().cuid(),
  projectId: z.string().nullable(),
  taskId: z.string().nullable(),
  userId: z.string(),
  description: z.string().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().nullable(),
  duration: z.number().int().nullable(),
  billable: z.boolean(),
  invoiced: z.boolean(),
  invoiceId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TimeEntry = z.infer<typeof TimeEntrySchema>

/////////////////////////////////////////
// INVOICE SCHEMA
/////////////////////////////////////////

export const InvoiceSchema = z.object({
  status: InvoiceStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().nullable(),
  customerAddress: z.string().nullable(),
  customerPhone: z.string().nullable(),
  invoiceNumber: z.string(),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string(),
  poNumber: z.string().nullable(),
  subtotal: z.instanceof(Prisma.Decimal, { message: "Field 'subtotal' must be a Decimal. Location: ['Models', 'Invoice']"}),
  taxAmount: z.instanceof(Prisma.Decimal, { message: "Field 'taxAmount' must be a Decimal. Location: ['Models', 'Invoice']"}),
  discountAmount: z.instanceof(Prisma.Decimal, { message: "Field 'discountAmount' must be a Decimal. Location: ['Models', 'Invoice']"}),
  shippingAmount: z.instanceof(Prisma.Decimal, { message: "Field 'shippingAmount' must be a Decimal. Location: ['Models', 'Invoice']"}),
  totalAmount: z.instanceof(Prisma.Decimal, { message: "Field 'totalAmount' must be a Decimal. Location: ['Models', 'Invoice']"}),
  paidAmount: z.instanceof(Prisma.Decimal, { message: "Field 'paidAmount' must be a Decimal. Location: ['Models', 'Invoice']"}),
  currency: z.string(),
  notes: z.string().nullable(),
  internalNotes: z.string().nullable(),
  termsAndConditions: z.string().nullable(),
  footer: z.string().nullable(),
  logoUrl: z.string().nullable(),
  sentAt: z.coerce.date().nullable(),
  viewedAt: z.coerce.date().nullable(),
  lastReminder: z.coerce.date().nullable(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Invoice = z.infer<typeof InvoiceSchema>

/////////////////////////////////////////
// INVOICE ITEM SCHEMA
/////////////////////////////////////////

export const InvoiceItemSchema = z.object({
  id: z.string().cuid(),
  invoiceId: z.string(),
  productId: z.string().nullable(),
  description: z.string(),
  quantity: z.instanceof(Prisma.Decimal, { message: "Field 'quantity' must be a Decimal. Location: ['Models', 'InvoiceItem']"}),
  unitPrice: z.instanceof(Prisma.Decimal, { message: "Field 'unitPrice' must be a Decimal. Location: ['Models', 'InvoiceItem']"}),
  taxRate: z.instanceof(Prisma.Decimal, { message: "Field 'taxRate' must be a Decimal. Location: ['Models', 'InvoiceItem']"}),
  discountRate: z.instanceof(Prisma.Decimal, { message: "Field 'discountRate' must be a Decimal. Location: ['Models', 'InvoiceItem']"}),
  subtotal: z.instanceof(Prisma.Decimal, { message: "Field 'subtotal' must be a Decimal. Location: ['Models', 'InvoiceItem']"}),
  sortOrder: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type InvoiceItem = z.infer<typeof InvoiceItemSchema>

/////////////////////////////////////////
// PAYMENT SCHEMA
/////////////////////////////////////////

export const PaymentSchema = z.object({
  method: PaymentMethodSchema,
  status: PaymentStatusSchema,
  id: z.string().cuid(),
  invoiceId: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Payment']"}),
  currency: z.string(),
  reference: z.string().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().nullable(),
  feeAmount: z.instanceof(Prisma.Decimal, { message: "Field 'feeAmount' must be a Decimal. Location: ['Models', 'Payment']"}),
  gatewayId: z.string().nullable(),
  refundedAmount: z.instanceof(Prisma.Decimal, { message: "Field 'refundedAmount' must be a Decimal. Location: ['Models', 'Payment']"}),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Payment = z.infer<typeof PaymentSchema>

/////////////////////////////////////////
// EXPENSE SCHEMA
/////////////////////////////////////////

export const ExpenseSchema = z.object({
  paymentMethod: PaymentMethodSchema,
  status: ExpenseStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  categoryId: z.string().nullable(),
  customCategory: z.string().nullable(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Expense']"}),
  currency: z.string(),
  date: z.coerce.date(),
  description: z.string().nullable(),
  receipt: z.string().nullable(),
  vendor: z.string().nullable(),
  projectId: z.string().nullable(),
  reimbursable: z.boolean(),
  reimbursed: z.boolean(),
  reimbursedAt: z.coerce.date().nullable(),
  submittedAt: z.coerce.date().nullable(),
  createdById: z.string().nullable(),
  approvedById: z.string().nullable(),
  approvedAt: z.coerce.date().nullable(),
  rejectedAt: z.coerce.date().nullable(),
  rejectionReason: z.string().nullable(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Expense = z.infer<typeof ExpenseSchema>

/////////////////////////////////////////
// EXPENSE CATEGORY SCHEMA
/////////////////////////////////////////

export const ExpenseCategorySchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  color: z.string(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ExpenseCategory = z.infer<typeof ExpenseCategorySchema>

/////////////////////////////////////////
// EXPENSE TAG SCHEMA
/////////////////////////////////////////

export const ExpenseTagSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  color: z.string(),
  createdAt: z.coerce.date(),
})

export type ExpenseTag = z.infer<typeof ExpenseTagSchema>

/////////////////////////////////////////
// EXPENSE TO TAG SCHEMA
/////////////////////////////////////////

export const ExpenseToTagSchema = z.object({
  expenseId: z.string(),
  tagId: z.string(),
})

export type ExpenseToTag = z.infer<typeof ExpenseToTagSchema>

/////////////////////////////////////////
// COMMENT SCHEMA
/////////////////////////////////////////

export const CommentSchema = z.object({
  id: z.string().cuid(),
  taskId: z.string(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Comment = z.infer<typeof CommentSchema>

/////////////////////////////////////////
// ATTACHMENT SCHEMA
/////////////////////////////////////////

export const AttachmentSchema = z.object({
  id: z.string().cuid(),
  taskId: z.string(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Attachment = z.infer<typeof AttachmentSchema>

/////////////////////////////////////////
// CALENDAR EVENT SCHEMA
/////////////////////////////////////////

export const CalendarEventSchema = z.object({
  id: z.string().cuid(),
  title: z.string(),
  description: z.string().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean(),
  location: z.string().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CalendarEvent = z.infer<typeof CalendarEventSchema>

/////////////////////////////////////////
// CALENDAR EVENT ATTENDEE SCHEMA
/////////////////////////////////////////

export const CalendarEventAttendeeSchema = z.object({
  status: AttendeeStatusSchema,
  eventId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CalendarEventAttendee = z.infer<typeof CalendarEventAttendeeSchema>

/////////////////////////////////////////
// NOTIFICATION SCHEMA
/////////////////////////////////////////

export const NotificationSchema = z.object({
  type: NotificationTypeSchema,
  id: z.string().cuid(),
  userId: z.string(),
  title: z.string(),
  content: z.string(),
  read: z.boolean(),
  actionUrl: z.string().nullable(),
  createdAt: z.coerce.date(),
})

export type Notification = z.infer<typeof NotificationSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  role: UserRoleSchema,
  status: InvitationStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  email: z.string(),
  inviterId: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// EMPLOYEE SCHEMA
/////////////////////////////////////////

export const EmployeeSchema = z.object({
  status: EmployeeStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().nullable(),
  position: z.string().nullable(),
  department: z.string().nullable(),
  hireDate: z.coerce.date().nullable(),
  terminationDate: z.coerce.date().nullable(),
  managerId: z.string().nullable(),
  address: z.string().nullable(),
  city: z.string().nullable(),
  state: z.string().nullable(),
  country: z.string().nullable(),
  postalCode: z.string().nullable(),
  birthDate: z.coerce.date().nullable(),
  taxId: z.string().nullable(),
  emergencyContactName: z.string().nullable(),
  emergencyContactPhone: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Employee = z.infer<typeof EmployeeSchema>

/////////////////////////////////////////
// PAYROLL SCHEMA
/////////////////////////////////////////

export const PayrollSchema = z.object({
  status: PayrollStatusSchema,
  id: z.string().cuid(),
  employeeId: z.string(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.instanceof(Prisma.Decimal, { message: "Field 'basicSalary' must be a Decimal. Location: ['Models', 'Payroll']"}),
  overtime: z.instanceof(Prisma.Decimal, { message: "Field 'overtime' must be a Decimal. Location: ['Models', 'Payroll']"}),
  bonus: z.instanceof(Prisma.Decimal, { message: "Field 'bonus' must be a Decimal. Location: ['Models', 'Payroll']"}),
  tax: z.instanceof(Prisma.Decimal, { message: "Field 'tax' must be a Decimal. Location: ['Models', 'Payroll']"}),
  deductions: z.instanceof(Prisma.Decimal, { message: "Field 'deductions' must be a Decimal. Location: ['Models', 'Payroll']"}),
  netAmount: z.instanceof(Prisma.Decimal, { message: "Field 'netAmount' must be a Decimal. Location: ['Models', 'Payroll']"}),
  currency: z.string(),
  notes: z.string().nullable(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Payroll = z.infer<typeof PayrollSchema>

/////////////////////////////////////////
// TIME OFF SCHEMA
/////////////////////////////////////////

export const TimeOffSchema = z.object({
  type: TimeOffTypeSchema,
  status: TimeOffStatusSchema,
  id: z.string().cuid(),
  employeeId: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().nullable(),
  approvedById: z.string().nullable(),
  approvedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TimeOff = z.infer<typeof TimeOffSchema>

/////////////////////////////////////////
// PERFORMANCE REVIEW SCHEMA
/////////////////////////////////////////

export const PerformanceReviewSchema = z.object({
  status: ReviewStatusSchema,
  id: z.string().cuid(),
  employeeId: z.string(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().nullable(),
  strengths: z.string().nullable(),
  improvements: z.string().nullable(),
  goals: z.string().nullable(),
  comments: z.string().nullable(),
  reviewDate: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type PerformanceReview = z.infer<typeof PerformanceReviewSchema>

/////////////////////////////////////////
// MARKETING CAMPAIGN SCHEMA
/////////////////////////////////////////

export const MarketingCampaignSchema = z.object({
  type: CampaignTypeSchema,
  status: CampaignStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  startDate: z.coerce.date().nullable(),
  endDate: z.coerce.date().nullable(),
  budget: z.instanceof(Prisma.Decimal, { message: "Field 'budget' must be a Decimal. Location: ['Models', 'MarketingCampaign']"}).nullable(),
  currency: z.string(),
  targetAudience: z.string().nullable(),
  createdById: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MarketingCampaign = z.infer<typeof MarketingCampaignSchema>

/////////////////////////////////////////
// EMAIL CAMPAIGN SCHEMA
/////////////////////////////////////////

export const EmailCampaignSchema = z.object({
  id: z.string().cuid(),
  campaignId: z.string(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().nullable(),
  sentAt: z.coerce.date().nullable(),
  opens: z.number().int(),
  clicks: z.number().int(),
  bounces: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EmailCampaign = z.infer<typeof EmailCampaignSchema>

/////////////////////////////////////////
// SOCIAL MEDIA POST SCHEMA
/////////////////////////////////////////

export const SocialMediaPostSchema = z.object({
  platform: SocialPlatformSchema,
  id: z.string().cuid(),
  campaignId: z.string(),
  content: z.string(),
  mediaUrl: z.string().nullable(),
  scheduledAt: z.coerce.date().nullable(),
  publishedAt: z.coerce.date().nullable(),
  likes: z.number().int(),
  shares: z.number().int(),
  comments: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SocialMediaPost = z.infer<typeof SocialMediaPostSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  idToken: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  password: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// VERIFICATION SCHEMA
/////////////////////////////////////////

export const VerificationSchema = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Verification = z.infer<typeof VerificationSchema>

/////////////////////////////////////////
// FINANCIAL REPORT SCHEMA
/////////////////////////////////////////

export const FinancialReportSchema = z.object({
  type: FinancialReportTypeSchema,
  status: FinancialReportStatusSchema,
  id: z.string().cuid(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  template: JsonValueSchema,
  filters: JsonValueSchema.nullable(),
  dateRange: JsonValueSchema,
  generatedAt: z.coerce.date().nullable(),
  generatedBy: z.string().nullable(),
  isTemplate: z.boolean(),
  isScheduled: z.boolean(),
  scheduleConfig: JsonValueSchema.nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FinancialReport = z.infer<typeof FinancialReportSchema>

/////////////////////////////////////////
// FINANCIAL REPORT DATA SCHEMA
/////////////////////////////////////////

export const FinancialReportDataSchema = z.object({
  id: z.string().cuid(),
  reportId: z.string(),
  data: JsonValueSchema,
  metadata: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
})

export type FinancialReportData = z.infer<typeof FinancialReportDataSchema>

/////////////////////////////////////////
// FINANCIAL REPORT EXPORT SCHEMA
/////////////////////////////////////////

export const FinancialReportExportSchema = z.object({
  format: FinancialReportExportFormatSchema,
  status: FinancialReportExportStatusSchema,
  id: z.string().cuid(),
  reportId: z.string(),
  fileName: z.string(),
  fileUrl: z.string().nullable(),
  fileSize: z.number().int().nullable(),
  error: z.string().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FinancialReportExport = z.infer<typeof FinancialReportExportSchema>

/////////////////////////////////////////
// FINANCIAL REPORT SCHEDULE SCHEMA
/////////////////////////////////////////

export const FinancialReportScheduleSchema = z.object({
  frequency: FinancialReportScheduleFrequencySchema,
  id: z.string().cuid(),
  reportId: z.string(),
  dayOfWeek: z.number().int().nullable(),
  dayOfMonth: z.number().int().nullable(),
  time: z.string(),
  timezone: z.string(),
  isActive: z.boolean(),
  lastRunAt: z.coerce.date().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: JsonValueSchema,
  emailSubject: z.string().nullable(),
  emailBody: z.string().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FinancialReportSchedule = z.infer<typeof FinancialReportScheduleSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// PERMISSION
//------------------------------------------------------

export const PermissionIncludeSchema: z.ZodType<Prisma.PermissionInclude> = z.object({
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  customRolePermissions: z.union([z.boolean(),z.lazy(() => CustomRolePermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PermissionArgsSchema: z.ZodType<Prisma.PermissionDefaultArgs> = z.object({
  select: z.lazy(() => PermissionSelectSchema).optional(),
  include: z.lazy(() => PermissionIncludeSchema).optional(),
}).strict();

export const PermissionCountOutputTypeArgsSchema: z.ZodType<Prisma.PermissionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PermissionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PermissionCountOutputTypeSelectSchema: z.ZodType<Prisma.PermissionCountOutputTypeSelect> = z.object({
  rolePermissions: z.boolean().optional(),
  customRolePermissions: z.boolean().optional(),
}).strict();

export const PermissionSelectSchema: z.ZodType<Prisma.PermissionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  module: z.boolean().optional(),
  action: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  rolePermissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  customRolePermissions: z.union([z.boolean(),z.lazy(() => CustomRolePermissionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLE PERMISSION
//------------------------------------------------------

export const RolePermissionIncludeSchema: z.ZodType<Prisma.RolePermissionInclude> = z.object({
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

export const RolePermissionArgsSchema: z.ZodType<Prisma.RolePermissionDefaultArgs> = z.object({
  select: z.lazy(() => RolePermissionSelectSchema).optional(),
  include: z.lazy(() => RolePermissionIncludeSchema).optional(),
}).strict();

export const RolePermissionSelectSchema: z.ZodType<Prisma.RolePermissionSelect> = z.object({
  id: z.boolean().optional(),
  role: z.boolean().optional(),
  permissionId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

// CUSTOM ROLE
//------------------------------------------------------

export const CustomRoleIncludeSchema: z.ZodType<Prisma.CustomRoleInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => CustomRolePermissionFindManyArgsSchema)]).optional(),
  userAssignments: z.union([z.boolean(),z.lazy(() => UserOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomRoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomRoleArgsSchema: z.ZodType<Prisma.CustomRoleDefaultArgs> = z.object({
  select: z.lazy(() => CustomRoleSelectSchema).optional(),
  include: z.lazy(() => CustomRoleIncludeSchema).optional(),
}).strict();

export const CustomRoleCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomRoleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomRoleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomRoleCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomRoleCountOutputTypeSelect> = z.object({
  permissions: z.boolean().optional(),
  userAssignments: z.boolean().optional(),
}).strict();

export const CustomRoleSelectSchema: z.ZodType<Prisma.CustomRoleSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  color: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => CustomRolePermissionFindManyArgsSchema)]).optional(),
  userAssignments: z.union([z.boolean(),z.lazy(() => UserOrganizationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomRoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOM ROLE PERMISSION
//------------------------------------------------------

export const CustomRolePermissionIncludeSchema: z.ZodType<Prisma.CustomRolePermissionInclude> = z.object({
  customRole: z.union([z.boolean(),z.lazy(() => CustomRoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

export const CustomRolePermissionArgsSchema: z.ZodType<Prisma.CustomRolePermissionDefaultArgs> = z.object({
  select: z.lazy(() => CustomRolePermissionSelectSchema).optional(),
  include: z.lazy(() => CustomRolePermissionIncludeSchema).optional(),
}).strict();

export const CustomRolePermissionSelectSchema: z.ZodType<Prisma.CustomRolePermissionSelect> = z.object({
  id: z.boolean().optional(),
  customRoleId: z.boolean().optional(),
  permissionId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  customRole: z.union([z.boolean(),z.lazy(() => CustomRoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UserOrganizationFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  invoices: z.union([z.boolean(),z.lazy(() => InvoiceFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  expenseCategories: z.union([z.boolean(),z.lazy(() => ExpenseCategoryFindManyArgsSchema)]).optional(),
  expenseTags: z.union([z.boolean(),z.lazy(() => ExpenseTagFindManyArgsSchema)]).optional(),
  employees: z.union([z.boolean(),z.lazy(() => EmployeeFindManyArgsSchema)]).optional(),
  campaigns: z.union([z.boolean(),z.lazy(() => MarketingCampaignFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  customRoles: z.union([z.boolean(),z.lazy(() => CustomRoleFindManyArgsSchema)]).optional(),
  financialReports: z.union([z.boolean(),z.lazy(() => FinancialReportFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  customers: z.boolean().optional(),
  projects: z.boolean().optional(),
  tasks: z.boolean().optional(),
  invoices: z.boolean().optional(),
  expenses: z.boolean().optional(),
  expenseCategories: z.boolean().optional(),
  expenseTags: z.boolean().optional(),
  employees: z.boolean().optional(),
  campaigns: z.boolean().optional(),
  invitations: z.boolean().optional(),
  customRoles: z.boolean().optional(),
  financialReports: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  logo: z.boolean().optional(),
  website: z.boolean().optional(),
  industry: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UserOrganizationFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  invoices: z.union([z.boolean(),z.lazy(() => InvoiceFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  expenseCategories: z.union([z.boolean(),z.lazy(() => ExpenseCategoryFindManyArgsSchema)]).optional(),
  expenseTags: z.union([z.boolean(),z.lazy(() => ExpenseTagFindManyArgsSchema)]).optional(),
  employees: z.union([z.boolean(),z.lazy(() => EmployeeFindManyArgsSchema)]).optional(),
  campaigns: z.union([z.boolean(),z.lazy(() => MarketingCampaignFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  customRoles: z.union([z.boolean(),z.lazy(() => CustomRoleFindManyArgsSchema)]).optional(),
  financialReports: z.union([z.boolean(),z.lazy(() => FinancialReportFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ORGANIZATION
//------------------------------------------------------

export const UserOrganizationIncludeSchema: z.ZodType<Prisma.UserOrganizationInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  customRole: z.union([z.boolean(),z.lazy(() => CustomRoleArgsSchema)]).optional(),
}).strict()

export const UserOrganizationArgsSchema: z.ZodType<Prisma.UserOrganizationDefaultArgs> = z.object({
  select: z.lazy(() => UserOrganizationSelectSchema).optional(),
  include: z.lazy(() => UserOrganizationIncludeSchema).optional(),
}).strict();

export const UserOrganizationSelectSchema: z.ZodType<Prisma.UserOrganizationSelect> = z.object({
  userId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  role: z.boolean().optional(),
  customRoleId: z.boolean().optional(),
  joinedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  customRole: z.union([z.boolean(),z.lazy(() => CustomRoleArgsSchema)]).optional(),
}).strict()

// CUSTOMER
//------------------------------------------------------

export const CustomerIncludeSchema: z.ZodType<Prisma.CustomerInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  interactions: z.union([z.boolean(),z.lazy(() => CustomerInteractionFindManyArgsSchema)]).optional(),
  deals: z.union([z.boolean(),z.lazy(() => DealFindManyArgsSchema)]).optional(),
  invoices: z.union([z.boolean(),z.lazy(() => InvoiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomerArgsSchema: z.ZodType<Prisma.CustomerDefaultArgs> = z.object({
  select: z.lazy(() => CustomerSelectSchema).optional(),
  include: z.lazy(() => CustomerIncludeSchema).optional(),
}).strict();

export const CustomerCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomerCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomerCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomerCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomerCountOutputTypeSelect> = z.object({
  interactions: z.boolean().optional(),
  deals: z.boolean().optional(),
  invoices: z.boolean().optional(),
}).strict();

export const CustomerSelectSchema: z.ZodType<Prisma.CustomerSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  company: z.boolean().optional(),
  position: z.boolean().optional(),
  address: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  country: z.boolean().optional(),
  postalCode: z.boolean().optional(),
  source: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  interactions: z.union([z.boolean(),z.lazy(() => CustomerInteractionFindManyArgsSchema)]).optional(),
  deals: z.union([z.boolean(),z.lazy(() => DealFindManyArgsSchema)]).optional(),
  invoices: z.union([z.boolean(),z.lazy(() => InvoiceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOMER INTERACTION
//------------------------------------------------------

export const CustomerInteractionIncludeSchema: z.ZodType<Prisma.CustomerInteractionInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerInteractionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomerInteractionArgsSchema: z.ZodType<Prisma.CustomerInteractionDefaultArgs> = z.object({
  select: z.lazy(() => CustomerInteractionSelectSchema).optional(),
  include: z.lazy(() => CustomerInteractionIncludeSchema).optional(),
}).strict();

export const CustomerInteractionCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomerInteractionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomerInteractionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomerInteractionCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomerInteractionCountOutputTypeSelect> = z.object({
  tasks: z.boolean().optional(),
}).strict();

export const CustomerInteractionSelectSchema: z.ZodType<Prisma.CustomerInteractionSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  type: z.boolean().optional(),
  medium: z.boolean().optional(),
  subject: z.boolean().optional(),
  content: z.boolean().optional(),
  scheduledAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerInteractionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEAL
//------------------------------------------------------

export const DealIncludeSchema: z.ZodType<Prisma.DealInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

export const DealArgsSchema: z.ZodType<Prisma.DealDefaultArgs> = z.object({
  select: z.lazy(() => DealSelectSchema).optional(),
  include: z.lazy(() => DealIncludeSchema).optional(),
}).strict();

export const DealSelectSchema: z.ZodType<Prisma.DealSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  title: z.boolean().optional(),
  value: z.boolean().optional(),
  currency: z.boolean().optional(),
  status: z.boolean().optional(),
  stage: z.boolean().optional(),
  probability: z.boolean().optional(),
  expectedCloseDate: z.boolean().optional(),
  actualCloseDate: z.boolean().optional(),
  description: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

// PROJECT
//------------------------------------------------------

export const ProjectIncludeSchema: z.ZodType<Prisma.ProjectInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  resources: z.union([z.boolean(),z.lazy(() => ProjectResourceFindManyArgsSchema)]).optional(),
  timeEntries: z.union([z.boolean(),z.lazy(() => TimeEntryFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectArgsSchema: z.ZodType<Prisma.ProjectDefaultArgs> = z.object({
  select: z.lazy(() => ProjectSelectSchema).optional(),
  include: z.lazy(() => ProjectIncludeSchema).optional(),
}).strict();

export const ProjectCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProjectCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectCountOutputTypeSelect> = z.object({
  tasks: z.boolean().optional(),
  resources: z.boolean().optional(),
  timeEntries: z.boolean().optional(),
  expenses: z.boolean().optional(),
}).strict();

export const ProjectSelectSchema: z.ZodType<Prisma.ProjectSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  status: z.boolean().optional(),
  budget: z.boolean().optional(),
  currency: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  resources: z.union([z.boolean(),z.lazy(() => ProjectResourceFindManyArgsSchema)]).optional(),
  timeEntries: z.union([z.boolean(),z.lazy(() => TimeEntryFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TASK
//------------------------------------------------------

export const TaskIncludeSchema: z.ZodType<Prisma.TaskInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  parentTask: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  subtasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  timeEntries: z.union([z.boolean(),z.lazy(() => TimeEntryFindManyArgsSchema)]).optional(),
  comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  attachments: z.union([z.boolean(),z.lazy(() => AttachmentFindManyArgsSchema)]).optional(),
  customerInteraction: z.union([z.boolean(),z.lazy(() => CustomerInteractionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaskArgsSchema: z.ZodType<Prisma.TaskDefaultArgs> = z.object({
  select: z.lazy(() => TaskSelectSchema).optional(),
  include: z.lazy(() => TaskIncludeSchema).optional(),
}).strict();

export const TaskCountOutputTypeArgsSchema: z.ZodType<Prisma.TaskCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TaskCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaskCountOutputTypeSelectSchema: z.ZodType<Prisma.TaskCountOutputTypeSelect> = z.object({
  subtasks: z.boolean().optional(),
  timeEntries: z.boolean().optional(),
  comments: z.boolean().optional(),
  attachments: z.boolean().optional(),
}).strict();

export const TaskSelectSchema: z.ZodType<Prisma.TaskSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  projectId: z.boolean().optional(),
  parentTaskId: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  status: z.boolean().optional(),
  priority: z.boolean().optional(),
  startDate: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  assignedToId: z.boolean().optional(),
  createdById: z.boolean().optional(),
  estimatedHours: z.boolean().optional(),
  actualHours: z.boolean().optional(),
  order: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customerInteractionId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  parentTask: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  subtasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  timeEntries: z.union([z.boolean(),z.lazy(() => TimeEntryFindManyArgsSchema)]).optional(),
  comments: z.union([z.boolean(),z.lazy(() => CommentFindManyArgsSchema)]).optional(),
  attachments: z.union([z.boolean(),z.lazy(() => AttachmentFindManyArgsSchema)]).optional(),
  customerInteraction: z.union([z.boolean(),z.lazy(() => CustomerInteractionArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROJECT RESOURCE
//------------------------------------------------------

export const ProjectResourceIncludeSchema: z.ZodType<Prisma.ProjectResourceInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
}).strict()

export const ProjectResourceArgsSchema: z.ZodType<Prisma.ProjectResourceDefaultArgs> = z.object({
  select: z.lazy(() => ProjectResourceSelectSchema).optional(),
  include: z.lazy(() => ProjectResourceIncludeSchema).optional(),
}).strict();

export const ProjectResourceSelectSchema: z.ZodType<Prisma.ProjectResourceSelect> = z.object({
  projectId: z.boolean().optional(),
  assigneeId: z.boolean().optional(),
  role: z.boolean().optional(),
  allocation: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  hourlyRate: z.boolean().optional(),
  currency: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
}).strict()

// TIME ENTRY
//------------------------------------------------------

export const TimeEntryIncludeSchema: z.ZodType<Prisma.TimeEntryInclude> = z.object({
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

export const TimeEntryArgsSchema: z.ZodType<Prisma.TimeEntryDefaultArgs> = z.object({
  select: z.lazy(() => TimeEntrySelectSchema).optional(),
  include: z.lazy(() => TimeEntryIncludeSchema).optional(),
}).strict();

export const TimeEntrySelectSchema: z.ZodType<Prisma.TimeEntrySelect> = z.object({
  id: z.boolean().optional(),
  projectId: z.boolean().optional(),
  taskId: z.boolean().optional(),
  userId: z.boolean().optional(),
  description: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  duration: z.boolean().optional(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

// INVOICE
//------------------------------------------------------

export const InvoiceIncludeSchema: z.ZodType<Prisma.InvoiceInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => InvoiceItemFindManyArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InvoiceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const InvoiceArgsSchema: z.ZodType<Prisma.InvoiceDefaultArgs> = z.object({
  select: z.lazy(() => InvoiceSelectSchema).optional(),
  include: z.lazy(() => InvoiceIncludeSchema).optional(),
}).strict();

export const InvoiceCountOutputTypeArgsSchema: z.ZodType<Prisma.InvoiceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => InvoiceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const InvoiceCountOutputTypeSelectSchema: z.ZodType<Prisma.InvoiceCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
  payments: z.boolean().optional(),
}).strict();

export const InvoiceSelectSchema: z.ZodType<Prisma.InvoiceSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  customerId: z.boolean().optional(),
  customerEmail: z.boolean().optional(),
  customerName: z.boolean().optional(),
  customerAddress: z.boolean().optional(),
  customerPhone: z.boolean().optional(),
  invoiceNumber: z.boolean().optional(),
  status: z.boolean().optional(),
  issueDate: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  paymentTerms: z.boolean().optional(),
  poNumber: z.boolean().optional(),
  subtotal: z.boolean().optional(),
  taxAmount: z.boolean().optional(),
  discountAmount: z.boolean().optional(),
  shippingAmount: z.boolean().optional(),
  totalAmount: z.boolean().optional(),
  paidAmount: z.boolean().optional(),
  currency: z.boolean().optional(),
  notes: z.boolean().optional(),
  internalNotes: z.boolean().optional(),
  termsAndConditions: z.boolean().optional(),
  footer: z.boolean().optional(),
  logoUrl: z.boolean().optional(),
  sentAt: z.boolean().optional(),
  viewedAt: z.boolean().optional(),
  lastReminder: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => InvoiceItemFindManyArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InvoiceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INVOICE ITEM
//------------------------------------------------------

export const InvoiceItemIncludeSchema: z.ZodType<Prisma.InvoiceItemInclude> = z.object({
  invoice: z.union([z.boolean(),z.lazy(() => InvoiceArgsSchema)]).optional(),
}).strict()

export const InvoiceItemArgsSchema: z.ZodType<Prisma.InvoiceItemDefaultArgs> = z.object({
  select: z.lazy(() => InvoiceItemSelectSchema).optional(),
  include: z.lazy(() => InvoiceItemIncludeSchema).optional(),
}).strict();

export const InvoiceItemSelectSchema: z.ZodType<Prisma.InvoiceItemSelect> = z.object({
  id: z.boolean().optional(),
  invoiceId: z.boolean().optional(),
  productId: z.boolean().optional(),
  description: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unitPrice: z.boolean().optional(),
  taxRate: z.boolean().optional(),
  discountRate: z.boolean().optional(),
  subtotal: z.boolean().optional(),
  sortOrder: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  invoice: z.union([z.boolean(),z.lazy(() => InvoiceArgsSchema)]).optional(),
}).strict()

// PAYMENT
//------------------------------------------------------

export const PaymentIncludeSchema: z.ZodType<Prisma.PaymentInclude> = z.object({
  invoice: z.union([z.boolean(),z.lazy(() => InvoiceArgsSchema)]).optional(),
}).strict()

export const PaymentArgsSchema: z.ZodType<Prisma.PaymentDefaultArgs> = z.object({
  select: z.lazy(() => PaymentSelectSchema).optional(),
  include: z.lazy(() => PaymentIncludeSchema).optional(),
}).strict();

export const PaymentSelectSchema: z.ZodType<Prisma.PaymentSelect> = z.object({
  id: z.boolean().optional(),
  invoiceId: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  method: z.boolean().optional(),
  reference: z.boolean().optional(),
  paymentDate: z.boolean().optional(),
  notes: z.boolean().optional(),
  feeAmount: z.boolean().optional(),
  status: z.boolean().optional(),
  gatewayId: z.boolean().optional(),
  refundedAmount: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  invoice: z.union([z.boolean(),z.lazy(() => InvoiceArgsSchema)]).optional(),
}).strict()

// EXPENSE
//------------------------------------------------------

export const ExpenseIncludeSchema: z.ZodType<Prisma.ExpenseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ExpenseCategoryArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => ExpenseToTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExpenseArgsSchema: z.ZodType<Prisma.ExpenseDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseSelectSchema).optional(),
  include: z.lazy(() => ExpenseIncludeSchema).optional(),
}).strict();

export const ExpenseCountOutputTypeArgsSchema: z.ZodType<Prisma.ExpenseCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExpenseCountOutputTypeSelectSchema: z.ZodType<Prisma.ExpenseCountOutputTypeSelect> = z.object({
  tags: z.boolean().optional(),
}).strict();

export const ExpenseSelectSchema: z.ZodType<Prisma.ExpenseSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  customCategory: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  date: z.boolean().optional(),
  description: z.boolean().optional(),
  receipt: z.boolean().optional(),
  vendor: z.boolean().optional(),
  paymentMethod: z.boolean().optional(),
  projectId: z.boolean().optional(),
  status: z.boolean().optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.boolean().optional(),
  submittedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  approvedById: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  rejectedAt: z.boolean().optional(),
  rejectionReason: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => ExpenseCategoryArgsSchema)]).optional(),
  project: z.union([z.boolean(),z.lazy(() => ProjectArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => ExpenseToTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE CATEGORY
//------------------------------------------------------

export const ExpenseCategoryIncludeSchema: z.ZodType<Prisma.ExpenseCategoryInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExpenseCategoryArgsSchema: z.ZodType<Prisma.ExpenseCategoryDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseCategorySelectSchema).optional(),
  include: z.lazy(() => ExpenseCategoryIncludeSchema).optional(),
}).strict();

export const ExpenseCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.ExpenseCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExpenseCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.ExpenseCategoryCountOutputTypeSelect> = z.object({
  expenses: z.boolean().optional(),
}).strict();

export const ExpenseCategorySelectSchema: z.ZodType<Prisma.ExpenseCategorySelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  color: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE TAG
//------------------------------------------------------

export const ExpenseTagIncludeSchema: z.ZodType<Prisma.ExpenseTagInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseToTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExpenseTagArgsSchema: z.ZodType<Prisma.ExpenseTagDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseTagSelectSchema).optional(),
  include: z.lazy(() => ExpenseTagIncludeSchema).optional(),
}).strict();

export const ExpenseTagCountOutputTypeArgsSchema: z.ZodType<Prisma.ExpenseTagCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseTagCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExpenseTagCountOutputTypeSelectSchema: z.ZodType<Prisma.ExpenseTagCountOutputTypeSelect> = z.object({
  expenses: z.boolean().optional(),
}).strict();

export const ExpenseTagSelectSchema: z.ZodType<Prisma.ExpenseTagSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  color: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseToTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExpenseTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE TO TAG
//------------------------------------------------------

export const ExpenseToTagIncludeSchema: z.ZodType<Prisma.ExpenseToTagInclude> = z.object({
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  tag: z.union([z.boolean(),z.lazy(() => ExpenseTagArgsSchema)]).optional(),
}).strict()

export const ExpenseToTagArgsSchema: z.ZodType<Prisma.ExpenseToTagDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseToTagSelectSchema).optional(),
  include: z.lazy(() => ExpenseToTagIncludeSchema).optional(),
}).strict();

export const ExpenseToTagSelectSchema: z.ZodType<Prisma.ExpenseToTagSelect> = z.object({
  expenseId: z.boolean().optional(),
  tagId: z.boolean().optional(),
  expense: z.union([z.boolean(),z.lazy(() => ExpenseArgsSchema)]).optional(),
  tag: z.union([z.boolean(),z.lazy(() => ExpenseTagArgsSchema)]).optional(),
}).strict()

// COMMENT
//------------------------------------------------------

export const CommentIncludeSchema: z.ZodType<Prisma.CommentInclude> = z.object({
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

export const CommentArgsSchema: z.ZodType<Prisma.CommentDefaultArgs> = z.object({
  select: z.lazy(() => CommentSelectSchema).optional(),
  include: z.lazy(() => CommentIncludeSchema).optional(),
}).strict();

export const CommentSelectSchema: z.ZodType<Prisma.CommentSelect> = z.object({
  id: z.boolean().optional(),
  taskId: z.boolean().optional(),
  content: z.boolean().optional(),
  authorId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

// ATTACHMENT
//------------------------------------------------------

export const AttachmentIncludeSchema: z.ZodType<Prisma.AttachmentInclude> = z.object({
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

export const AttachmentArgsSchema: z.ZodType<Prisma.AttachmentDefaultArgs> = z.object({
  select: z.lazy(() => AttachmentSelectSchema).optional(),
  include: z.lazy(() => AttachmentIncludeSchema).optional(),
}).strict();

export const AttachmentSelectSchema: z.ZodType<Prisma.AttachmentSelect> = z.object({
  id: z.boolean().optional(),
  taskId: z.boolean().optional(),
  name: z.boolean().optional(),
  fileUrl: z.boolean().optional(),
  fileType: z.boolean().optional(),
  fileSize: z.boolean().optional(),
  uploadedById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
}).strict()

// CALENDAR EVENT
//------------------------------------------------------

export const CalendarEventIncludeSchema: z.ZodType<Prisma.CalendarEventInclude> = z.object({
  attendees: z.union([z.boolean(),z.lazy(() => CalendarEventAttendeeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CalendarEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CalendarEventArgsSchema: z.ZodType<Prisma.CalendarEventDefaultArgs> = z.object({
  select: z.lazy(() => CalendarEventSelectSchema).optional(),
  include: z.lazy(() => CalendarEventIncludeSchema).optional(),
}).strict();

export const CalendarEventCountOutputTypeArgsSchema: z.ZodType<Prisma.CalendarEventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CalendarEventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CalendarEventCountOutputTypeSelectSchema: z.ZodType<Prisma.CalendarEventCountOutputTypeSelect> = z.object({
  attendees: z.boolean().optional(),
}).strict();

export const CalendarEventSelectSchema: z.ZodType<Prisma.CalendarEventSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  allDay: z.boolean().optional(),
  location: z.boolean().optional(),
  organizerId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  attendees: z.union([z.boolean(),z.lazy(() => CalendarEventAttendeeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CalendarEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CALENDAR EVENT ATTENDEE
//------------------------------------------------------

export const CalendarEventAttendeeIncludeSchema: z.ZodType<Prisma.CalendarEventAttendeeInclude> = z.object({
  event: z.union([z.boolean(),z.lazy(() => CalendarEventArgsSchema)]).optional(),
}).strict()

export const CalendarEventAttendeeArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeDefaultArgs> = z.object({
  select: z.lazy(() => CalendarEventAttendeeSelectSchema).optional(),
  include: z.lazy(() => CalendarEventAttendeeIncludeSchema).optional(),
}).strict();

export const CalendarEventAttendeeSelectSchema: z.ZodType<Prisma.CalendarEventAttendeeSelect> = z.object({
  eventId: z.boolean().optional(),
  userId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  event: z.union([z.boolean(),z.lazy(() => CalendarEventArgsSchema)]).optional(),
}).strict()

// NOTIFICATION
//------------------------------------------------------

export const NotificationSelectSchema: z.ZodType<Prisma.NotificationSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  title: z.boolean().optional(),
  content: z.boolean().optional(),
  type: z.boolean().optional(),
  read: z.boolean().optional(),
  actionUrl: z.boolean().optional(),
  createdAt: z.boolean().optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  token: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  acceptedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// EMPLOYEE
//------------------------------------------------------

export const EmployeeIncludeSchema: z.ZodType<Prisma.EmployeeInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  payrolls: z.union([z.boolean(),z.lazy(() => PayrollFindManyArgsSchema)]).optional(),
  timeOff: z.union([z.boolean(),z.lazy(() => TimeOffFindManyArgsSchema)]).optional(),
  performanceReviews: z.union([z.boolean(),z.lazy(() => PerformanceReviewFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EmployeeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EmployeeArgsSchema: z.ZodType<Prisma.EmployeeDefaultArgs> = z.object({
  select: z.lazy(() => EmployeeSelectSchema).optional(),
  include: z.lazy(() => EmployeeIncludeSchema).optional(),
}).strict();

export const EmployeeCountOutputTypeArgsSchema: z.ZodType<Prisma.EmployeeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EmployeeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EmployeeCountOutputTypeSelectSchema: z.ZodType<Prisma.EmployeeCountOutputTypeSelect> = z.object({
  payrolls: z.boolean().optional(),
  timeOff: z.boolean().optional(),
  performanceReviews: z.boolean().optional(),
}).strict();

export const EmployeeSelectSchema: z.ZodType<Prisma.EmployeeSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  position: z.boolean().optional(),
  department: z.boolean().optional(),
  hireDate: z.boolean().optional(),
  terminationDate: z.boolean().optional(),
  status: z.boolean().optional(),
  managerId: z.boolean().optional(),
  address: z.boolean().optional(),
  city: z.boolean().optional(),
  state: z.boolean().optional(),
  country: z.boolean().optional(),
  postalCode: z.boolean().optional(),
  birthDate: z.boolean().optional(),
  taxId: z.boolean().optional(),
  emergencyContactName: z.boolean().optional(),
  emergencyContactPhone: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  payrolls: z.union([z.boolean(),z.lazy(() => PayrollFindManyArgsSchema)]).optional(),
  timeOff: z.union([z.boolean(),z.lazy(() => TimeOffFindManyArgsSchema)]).optional(),
  performanceReviews: z.union([z.boolean(),z.lazy(() => PerformanceReviewFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EmployeeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PAYROLL
//------------------------------------------------------

export const PayrollIncludeSchema: z.ZodType<Prisma.PayrollInclude> = z.object({
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

export const PayrollArgsSchema: z.ZodType<Prisma.PayrollDefaultArgs> = z.object({
  select: z.lazy(() => PayrollSelectSchema).optional(),
  include: z.lazy(() => PayrollIncludeSchema).optional(),
}).strict();

export const PayrollSelectSchema: z.ZodType<Prisma.PayrollSelect> = z.object({
  id: z.boolean().optional(),
  employeeId: z.boolean().optional(),
  payPeriodStart: z.boolean().optional(),
  payPeriodEnd: z.boolean().optional(),
  payDate: z.boolean().optional(),
  basicSalary: z.boolean().optional(),
  overtime: z.boolean().optional(),
  bonus: z.boolean().optional(),
  tax: z.boolean().optional(),
  deductions: z.boolean().optional(),
  netAmount: z.boolean().optional(),
  currency: z.boolean().optional(),
  status: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

// TIME OFF
//------------------------------------------------------

export const TimeOffIncludeSchema: z.ZodType<Prisma.TimeOffInclude> = z.object({
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

export const TimeOffArgsSchema: z.ZodType<Prisma.TimeOffDefaultArgs> = z.object({
  select: z.lazy(() => TimeOffSelectSchema).optional(),
  include: z.lazy(() => TimeOffIncludeSchema).optional(),
}).strict();

export const TimeOffSelectSchema: z.ZodType<Prisma.TimeOffSelect> = z.object({
  id: z.boolean().optional(),
  employeeId: z.boolean().optional(),
  type: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  duration: z.boolean().optional(),
  reason: z.boolean().optional(),
  status: z.boolean().optional(),
  approvedById: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

// PERFORMANCE REVIEW
//------------------------------------------------------

export const PerformanceReviewIncludeSchema: z.ZodType<Prisma.PerformanceReviewInclude> = z.object({
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

export const PerformanceReviewArgsSchema: z.ZodType<Prisma.PerformanceReviewDefaultArgs> = z.object({
  select: z.lazy(() => PerformanceReviewSelectSchema).optional(),
  include: z.lazy(() => PerformanceReviewIncludeSchema).optional(),
}).strict();

export const PerformanceReviewSelectSchema: z.ZodType<Prisma.PerformanceReviewSelect> = z.object({
  id: z.boolean().optional(),
  employeeId: z.boolean().optional(),
  reviewerId: z.boolean().optional(),
  reviewPeriod: z.boolean().optional(),
  performanceScore: z.boolean().optional(),
  strengths: z.boolean().optional(),
  improvements: z.boolean().optional(),
  goals: z.boolean().optional(),
  comments: z.boolean().optional(),
  reviewDate: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  employee: z.union([z.boolean(),z.lazy(() => EmployeeArgsSchema)]).optional(),
}).strict()

// MARKETING CAMPAIGN
//------------------------------------------------------

export const MarketingCampaignIncludeSchema: z.ZodType<Prisma.MarketingCampaignInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  emailCampaigns: z.union([z.boolean(),z.lazy(() => EmailCampaignFindManyArgsSchema)]).optional(),
  socialPosts: z.union([z.boolean(),z.lazy(() => SocialMediaPostFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MarketingCampaignCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MarketingCampaignArgsSchema: z.ZodType<Prisma.MarketingCampaignDefaultArgs> = z.object({
  select: z.lazy(() => MarketingCampaignSelectSchema).optional(),
  include: z.lazy(() => MarketingCampaignIncludeSchema).optional(),
}).strict();

export const MarketingCampaignCountOutputTypeArgsSchema: z.ZodType<Prisma.MarketingCampaignCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MarketingCampaignCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MarketingCampaignCountOutputTypeSelectSchema: z.ZodType<Prisma.MarketingCampaignCountOutputTypeSelect> = z.object({
  emailCampaigns: z.boolean().optional(),
  socialPosts: z.boolean().optional(),
}).strict();

export const MarketingCampaignSelectSchema: z.ZodType<Prisma.MarketingCampaignSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  budget: z.boolean().optional(),
  currency: z.boolean().optional(),
  targetAudience: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  emailCampaigns: z.union([z.boolean(),z.lazy(() => EmailCampaignFindManyArgsSchema)]).optional(),
  socialPosts: z.union([z.boolean(),z.lazy(() => SocialMediaPostFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MarketingCampaignCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EMAIL CAMPAIGN
//------------------------------------------------------

export const EmailCampaignIncludeSchema: z.ZodType<Prisma.EmailCampaignInclude> = z.object({
  campaign: z.union([z.boolean(),z.lazy(() => MarketingCampaignArgsSchema)]).optional(),
}).strict()

export const EmailCampaignArgsSchema: z.ZodType<Prisma.EmailCampaignDefaultArgs> = z.object({
  select: z.lazy(() => EmailCampaignSelectSchema).optional(),
  include: z.lazy(() => EmailCampaignIncludeSchema).optional(),
}).strict();

export const EmailCampaignSelectSchema: z.ZodType<Prisma.EmailCampaignSelect> = z.object({
  id: z.boolean().optional(),
  campaignId: z.boolean().optional(),
  subject: z.boolean().optional(),
  content: z.boolean().optional(),
  sender: z.boolean().optional(),
  scheduledAt: z.boolean().optional(),
  sentAt: z.boolean().optional(),
  opens: z.boolean().optional(),
  clicks: z.boolean().optional(),
  bounces: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  campaign: z.union([z.boolean(),z.lazy(() => MarketingCampaignArgsSchema)]).optional(),
}).strict()

// SOCIAL MEDIA POST
//------------------------------------------------------

export const SocialMediaPostIncludeSchema: z.ZodType<Prisma.SocialMediaPostInclude> = z.object({
  campaign: z.union([z.boolean(),z.lazy(() => MarketingCampaignArgsSchema)]).optional(),
}).strict()

export const SocialMediaPostArgsSchema: z.ZodType<Prisma.SocialMediaPostDefaultArgs> = z.object({
  select: z.lazy(() => SocialMediaPostSelectSchema).optional(),
  include: z.lazy(() => SocialMediaPostIncludeSchema).optional(),
}).strict();

export const SocialMediaPostSelectSchema: z.ZodType<Prisma.SocialMediaPostSelect> = z.object({
  id: z.boolean().optional(),
  campaignId: z.boolean().optional(),
  platform: z.boolean().optional(),
  content: z.boolean().optional(),
  mediaUrl: z.boolean().optional(),
  scheduledAt: z.boolean().optional(),
  publishedAt: z.boolean().optional(),
  likes: z.boolean().optional(),
  shares: z.boolean().optional(),
  comments: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  campaign: z.union([z.boolean(),z.lazy(() => MarketingCampaignArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  password: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION
//------------------------------------------------------

export const VerificationSelectSchema: z.ZodType<Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// FINANCIAL REPORT
//------------------------------------------------------

export const FinancialReportIncludeSchema: z.ZodType<Prisma.FinancialReportInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  reportData: z.union([z.boolean(),z.lazy(() => FinancialReportDataFindManyArgsSchema)]).optional(),
  exports: z.union([z.boolean(),z.lazy(() => FinancialReportExportFindManyArgsSchema)]).optional(),
  schedules: z.union([z.boolean(),z.lazy(() => FinancialReportScheduleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FinancialReportCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FinancialReportArgsSchema: z.ZodType<Prisma.FinancialReportDefaultArgs> = z.object({
  select: z.lazy(() => FinancialReportSelectSchema).optional(),
  include: z.lazy(() => FinancialReportIncludeSchema).optional(),
}).strict();

export const FinancialReportCountOutputTypeArgsSchema: z.ZodType<Prisma.FinancialReportCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FinancialReportCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FinancialReportCountOutputTypeSelectSchema: z.ZodType<Prisma.FinancialReportCountOutputTypeSelect> = z.object({
  reportData: z.boolean().optional(),
  exports: z.boolean().optional(),
  schedules: z.boolean().optional(),
}).strict();

export const FinancialReportSelectSchema: z.ZodType<Prisma.FinancialReportSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  type: z.boolean().optional(),
  template: z.boolean().optional(),
  filters: z.boolean().optional(),
  dateRange: z.boolean().optional(),
  status: z.boolean().optional(),
  generatedAt: z.boolean().optional(),
  generatedBy: z.boolean().optional(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  reportData: z.union([z.boolean(),z.lazy(() => FinancialReportDataFindManyArgsSchema)]).optional(),
  exports: z.union([z.boolean(),z.lazy(() => FinancialReportExportFindManyArgsSchema)]).optional(),
  schedules: z.union([z.boolean(),z.lazy(() => FinancialReportScheduleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FinancialReportCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FINANCIAL REPORT DATA
//------------------------------------------------------

export const FinancialReportDataIncludeSchema: z.ZodType<Prisma.FinancialReportDataInclude> = z.object({
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()

export const FinancialReportDataArgsSchema: z.ZodType<Prisma.FinancialReportDataDefaultArgs> = z.object({
  select: z.lazy(() => FinancialReportDataSelectSchema).optional(),
  include: z.lazy(() => FinancialReportDataIncludeSchema).optional(),
}).strict();

export const FinancialReportDataSelectSchema: z.ZodType<Prisma.FinancialReportDataSelect> = z.object({
  id: z.boolean().optional(),
  reportId: z.boolean().optional(),
  data: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()

// FINANCIAL REPORT EXPORT
//------------------------------------------------------

export const FinancialReportExportIncludeSchema: z.ZodType<Prisma.FinancialReportExportInclude> = z.object({
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()

export const FinancialReportExportArgsSchema: z.ZodType<Prisma.FinancialReportExportDefaultArgs> = z.object({
  select: z.lazy(() => FinancialReportExportSelectSchema).optional(),
  include: z.lazy(() => FinancialReportExportIncludeSchema).optional(),
}).strict();

export const FinancialReportExportSelectSchema: z.ZodType<Prisma.FinancialReportExportSelect> = z.object({
  id: z.boolean().optional(),
  reportId: z.boolean().optional(),
  format: z.boolean().optional(),
  fileName: z.boolean().optional(),
  fileUrl: z.boolean().optional(),
  fileSize: z.boolean().optional(),
  status: z.boolean().optional(),
  error: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()

// FINANCIAL REPORT SCHEDULE
//------------------------------------------------------

export const FinancialReportScheduleIncludeSchema: z.ZodType<Prisma.FinancialReportScheduleInclude> = z.object({
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()

export const FinancialReportScheduleArgsSchema: z.ZodType<Prisma.FinancialReportScheduleDefaultArgs> = z.object({
  select: z.lazy(() => FinancialReportScheduleSelectSchema).optional(),
  include: z.lazy(() => FinancialReportScheduleIncludeSchema).optional(),
}).strict();

export const FinancialReportScheduleSelectSchema: z.ZodType<Prisma.FinancialReportScheduleSelect> = z.object({
  id: z.boolean().optional(),
  reportId: z.boolean().optional(),
  frequency: z.boolean().optional(),
  dayOfWeek: z.boolean().optional(),
  dayOfMonth: z.boolean().optional(),
  time: z.boolean().optional(),
  timezone: z.boolean().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.boolean().optional(),
  nextRunAt: z.boolean().optional(),
  recipients: z.boolean().optional(),
  emailSubject: z.boolean().optional(),
  emailBody: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  report: z.union([z.boolean(),z.lazy(() => FinancialReportArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const PermissionWhereInputSchema: z.ZodType<Prisma.PermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  module: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionListRelationFilterSchema).optional()
}).strict();

export const PermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  rolePermissions: z.lazy(() => RolePermissionOrderByRelationAggregateInputSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PermissionWhereUniqueInputSchema: z.ZodType<Prisma.PermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  module: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionListRelationFilterSchema).optional()
}).strict());

export const PermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PermissionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PermissionMinOrderByAggregateInputSchema).optional()
}).strict();

export const PermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  module: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RolePermissionWhereInputSchema: z.ZodType<Prisma.RolePermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => PermissionRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict();

export const RolePermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => PermissionOrderByWithRelationInputSchema).optional()
}).strict();

export const RolePermissionWhereUniqueInputSchema: z.ZodType<Prisma.RolePermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    role_permissionId: z.lazy(() => RolePermissionRolePermissionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    role_permissionId: z.lazy(() => RolePermissionRolePermissionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  role_permissionId: z.lazy(() => RolePermissionRolePermissionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => PermissionRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict());

export const RolePermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RolePermissionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RolePermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RolePermissionMinOrderByAggregateInputSchema).optional()
}).strict();

export const RolePermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleWithAggregatesFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  permissionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomRoleWhereInputSchema: z.ZodType<Prisma.CustomRoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRoleWhereInputSchema),z.lazy(() => CustomRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRoleWhereInputSchema),z.lazy(() => CustomRoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionListRelationFilterSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationListRelationFilterSchema).optional()
}).strict();

export const CustomRoleOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomRoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  permissions: z.lazy(() => CustomRolePermissionOrderByRelationAggregateInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomRoleWhereUniqueInputSchema: z.ZodType<Prisma.CustomRoleWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_name: z.lazy(() => CustomRoleOrganizationIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_name: z.lazy(() => CustomRoleOrganizationIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_name: z.lazy(() => CustomRoleOrganizationIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CustomRoleWhereInputSchema),z.lazy(() => CustomRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRoleWhereInputSchema),z.lazy(() => CustomRoleWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionListRelationFilterSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationListRelationFilterSchema).optional()
}).strict());

export const CustomRoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomRoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomRoleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomRoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomRoleMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomRoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomRoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomRolePermissionWhereInputSchema: z.ZodType<Prisma.CustomRolePermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRolePermissionWhereInputSchema),z.lazy(() => CustomRolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRolePermissionWhereInputSchema),z.lazy(() => CustomRolePermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customRoleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customRole: z.union([ z.lazy(() => CustomRoleRelationFilterSchema),z.lazy(() => CustomRoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomRolePermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  customRole: z.lazy(() => CustomRoleOrderByWithRelationInputSchema).optional(),
  permission: z.lazy(() => PermissionOrderByWithRelationInputSchema).optional()
}).strict();

export const CustomRolePermissionWhereUniqueInputSchema: z.ZodType<Prisma.CustomRolePermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    customRoleId_permissionId: z.lazy(() => CustomRolePermissionCustomRoleIdPermissionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    customRoleId_permissionId: z.lazy(() => CustomRolePermissionCustomRoleIdPermissionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  customRoleId_permissionId: z.lazy(() => CustomRolePermissionCustomRoleIdPermissionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CustomRolePermissionWhereInputSchema),z.lazy(() => CustomRolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRolePermissionWhereInputSchema),z.lazy(() => CustomRolePermissionWhereInputSchema).array() ]).optional(),
  customRoleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customRole: z.union([ z.lazy(() => CustomRoleRelationFilterSchema),z.lazy(() => CustomRoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict());

export const CustomRolePermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomRolePermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomRolePermissionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomRolePermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomRolePermissionMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomRolePermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomRolePermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomRolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRolePermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomRolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customRoleId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  industry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserOrganizationListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  invoices: z.lazy(() => InvoiceListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryListRelationFilterSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagListRelationFilterSchema).optional(),
  employees: z.lazy(() => EmployeeListRelationFilterSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  customRoles: z.lazy(() => CustomRoleListRelationFilterSchema).optional(),
  financialReports: z.lazy(() => FinancialReportListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  industry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UserOrganizationOrderByRelationAggregateInputSchema).optional(),
  customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  projects: z.lazy(() => ProjectOrderByRelationAggregateInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  invoices: z.lazy(() => InvoiceOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryOrderByRelationAggregateInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagOrderByRelationAggregateInputSchema).optional(),
  employees: z.lazy(() => EmployeeOrderByRelationAggregateInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleOrderByRelationAggregateInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  industry: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users: z.lazy(() => UserOrganizationListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  invoices: z.lazy(() => InvoiceListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryListRelationFilterSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagListRelationFilterSchema).optional(),
  employees: z.lazy(() => EmployeeListRelationFilterSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  customRoles: z.lazy(() => CustomRoleListRelationFilterSchema).optional(),
  financialReports: z.lazy(() => FinancialReportListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  website: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  industry: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  website: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  industry: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserOrganizationWhereInputSchema: z.ZodType<Prisma.UserOrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserOrganizationWhereInputSchema),z.lazy(() => UserOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOrganizationWhereInputSchema),z.lazy(() => UserOrganizationWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleNullableFilterSchema),z.lazy(() => UserRoleSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  joinedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  customRole: z.union([ z.lazy(() => CustomRoleNullableRelationFilterSchema),z.lazy(() => CustomRoleWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UserOrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrganizationOrderByWithRelationInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customRoleId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  joinedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  customRole: z.lazy(() => CustomRoleOrderByWithRelationInputSchema).optional()
}).strict();

export const UserOrganizationWhereUniqueInputSchema: z.ZodType<Prisma.UserOrganizationWhereUniqueInput> = z.object({
  userId_organizationId: z.lazy(() => UserOrganizationUserIdOrganizationIdCompoundUniqueInputSchema)
})
.and(z.object({
  userId_organizationId: z.lazy(() => UserOrganizationUserIdOrganizationIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => UserOrganizationWhereInputSchema),z.lazy(() => UserOrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOrganizationWhereInputSchema),z.lazy(() => UserOrganizationWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleNullableFilterSchema),z.lazy(() => UserRoleSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  joinedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  customRole: z.union([ z.lazy(() => CustomRoleNullableRelationFilterSchema),z.lazy(() => CustomRoleWhereInputSchema) ]).optional().nullable(),
}).strict());

export const UserOrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrganizationOrderByWithAggregationInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customRoleId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  joinedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserOrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserOrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserOrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserOrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserOrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => UserOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => UserOrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleNullableWithAggregatesFilterSchema),z.lazy(() => UserRoleSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  joinedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerWhereInputSchema: z.ZodType<Prisma.CustomerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumCustomerTypeFilterSchema),z.lazy(() => CustomerTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusNullableFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumLeadSourceNullableFilterSchema),z.lazy(() => LeadSourceSchema) ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionListRelationFilterSchema).optional(),
  deals: z.lazy(() => DealListRelationFilterSchema).optional(),
  invoices: z.lazy(() => InvoiceListRelationFilterSchema).optional()
}).strict();

export const CustomerOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomerOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  company: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  interactions: z.lazy(() => CustomerInteractionOrderByRelationAggregateInputSchema).optional(),
  deals: z.lazy(() => DealOrderByRelationAggregateInputSchema).optional(),
  invoices: z.lazy(() => InvoiceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomerWhereUniqueInputSchema: z.ZodType<Prisma.CustomerWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumCustomerTypeFilterSchema),z.lazy(() => CustomerTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusNullableFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumLeadSourceNullableFilterSchema),z.lazy(() => LeadSourceSchema) ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionListRelationFilterSchema).optional(),
  deals: z.lazy(() => DealListRelationFilterSchema).optional(),
  invoices: z.lazy(() => InvoiceListRelationFilterSchema).optional()
}).strict());

export const CustomerOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomerOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  company: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomerCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomerMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumCustomerTypeWithAggregatesFilterSchema),z.lazy(() => CustomerTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusNullableWithAggregatesFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumLeadSourceNullableWithAggregatesFilterSchema),z.lazy(() => LeadSourceSchema) ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerInteractionWhereInputSchema: z.ZodType<Prisma.CustomerInteractionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerInteractionWhereInputSchema),z.lazy(() => CustomerInteractionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerInteractionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerInteractionWhereInputSchema),z.lazy(() => CustomerInteractionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumInteractionTypeFilterSchema),z.lazy(() => InteractionTypeSchema) ]).optional(),
  medium: z.union([ z.lazy(() => EnumInteractionMediumFilterSchema),z.lazy(() => InteractionMediumSchema) ]).optional(),
  subject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  content: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict();

export const CustomerInteractionOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomerInteractionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  medium: z.lazy(() => SortOrderSchema).optional(),
  subject: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  content: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomerInteractionWhereUniqueInputSchema: z.ZodType<Prisma.CustomerInteractionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => CustomerInteractionWhereInputSchema),z.lazy(() => CustomerInteractionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerInteractionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerInteractionWhereInputSchema),z.lazy(() => CustomerInteractionWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumInteractionTypeFilterSchema),z.lazy(() => InteractionTypeSchema) ]).optional(),
  medium: z.union([ z.lazy(() => EnumInteractionMediumFilterSchema),z.lazy(() => InteractionMediumSchema) ]).optional(),
  subject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  content: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict());

export const CustomerInteractionOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomerInteractionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  medium: z.lazy(() => SortOrderSchema).optional(),
  subject: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  content: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomerInteractionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomerInteractionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomerInteractionMinOrderByAggregateInputSchema).optional()
}).strict();

export const CustomerInteractionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomerInteractionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerInteractionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerInteractionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerInteractionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerInteractionScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerInteractionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumInteractionTypeWithAggregatesFilterSchema),z.lazy(() => InteractionTypeSchema) ]).optional(),
  medium: z.union([ z.lazy(() => EnumInteractionMediumWithAggregatesFilterSchema),z.lazy(() => InteractionMediumSchema) ]).optional(),
  subject: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  content: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DealWhereInputSchema: z.ZodType<Prisma.DealWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DealWhereInputSchema),z.lazy(() => DealWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DealWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DealWhereInputSchema),z.lazy(() => DealWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional(),
  stage: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  probability: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  expectedCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  actualCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict();

export const DealOrderByWithRelationInputSchema: z.ZodType<Prisma.DealOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expectedCloseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  actualCloseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional()
}).strict();

export const DealWhereUniqueInputSchema: z.ZodType<Prisma.DealWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => DealWhereInputSchema),z.lazy(() => DealWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DealWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DealWhereInputSchema),z.lazy(() => DealWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional(),
  stage: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  probability: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  expectedCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  actualCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict());

export const DealOrderByWithAggregationInputSchema: z.ZodType<Prisma.DealOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expectedCloseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  actualCloseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DealCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DealAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DealMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DealMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DealSumOrderByAggregateInputSchema).optional()
}).strict();

export const DealScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DealScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DealScalarWhereWithAggregatesInputSchema),z.lazy(() => DealScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DealScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DealScalarWhereWithAggregatesInputSchema),z.lazy(() => DealScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusWithAggregatesFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional(),
  stage: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  probability: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  expectedCloseDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  actualCloseDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProjectWhereInputSchema: z.ZodType<Prisma.ProjectWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  resources: z.lazy(() => ProjectResourceListRelationFilterSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional()
}).strict();

export const ProjectOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  budget: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceOrderByRelationAggregateInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectWhereUniqueInputSchema: z.ZodType<Prisma.ProjectWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectWhereInputSchema),z.lazy(() => ProjectWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  resources: z.lazy(() => ProjectResourceListRelationFilterSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional()
}).strict());

export const ProjectOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  budget: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProjectAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProjectSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusWithAggregatesFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  budget: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskWhereInputSchema: z.ZodType<Prisma.TaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentTaskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTaskStatusFilterSchema),z.lazy(() => TaskStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumPriorityFilterSchema),z.lazy(() => PrioritySchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  estimatedHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  actualHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerInteractionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  parentTask: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryListRelationFilterSchema).optional(),
  comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  attachments: z.lazy(() => AttachmentListRelationFilterSchema).optional(),
  customerInteraction: z.union([ z.lazy(() => CustomerInteractionNullableRelationFilterSchema),z.lazy(() => CustomerInteractionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TaskOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentTaskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  estimatedHours: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  actualHours: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerInteractionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  parentTask: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  subtasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryOrderByRelationAggregateInputSchema).optional(),
  comments: z.lazy(() => CommentOrderByRelationAggregateInputSchema).optional(),
  attachments: z.lazy(() => AttachmentOrderByRelationAggregateInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionOrderByWithRelationInputSchema).optional()
}).strict();

export const TaskWhereUniqueInputSchema: z.ZodType<Prisma.TaskWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentTaskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTaskStatusFilterSchema),z.lazy(() => TaskStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumPriorityFilterSchema),z.lazy(() => PrioritySchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  estimatedHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  actualHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerInteractionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  parentTask: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryListRelationFilterSchema).optional(),
  comments: z.lazy(() => CommentListRelationFilterSchema).optional(),
  attachments: z.lazy(() => AttachmentListRelationFilterSchema).optional(),
  customerInteraction: z.union([ z.lazy(() => CustomerInteractionNullableRelationFilterSchema),z.lazy(() => CustomerInteractionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parentTaskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  estimatedHours: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  actualHours: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerInteractionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TaskCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TaskAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TaskSumOrderByAggregateInputSchema).optional()
}).strict();

export const TaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  parentTaskId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTaskStatusWithAggregatesFilterSchema),z.lazy(() => TaskStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumPriorityWithAggregatesFilterSchema),z.lazy(() => PrioritySchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedToId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  estimatedHours: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  actualHours: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  customerInteractionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProjectResourceWhereInputSchema: z.ZodType<Prisma.ProjectResourceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectResourceWhereInputSchema),z.lazy(() => ProjectResourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectResourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectResourceWhereInputSchema),z.lazy(() => ProjectResourceWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assigneeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allocation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  hourlyRate: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
}).strict();

export const ProjectResourceOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectResourceOrderByWithRelationInput> = z.object({
  projectId: z.lazy(() => SortOrderSchema).optional(),
  assigneeId: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allocation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hourlyRate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional()
}).strict();

export const ProjectResourceWhereUniqueInputSchema: z.ZodType<Prisma.ProjectResourceWhereUniqueInput> = z.object({
  projectId_assigneeId: z.lazy(() => ProjectResourceProjectIdAssigneeIdCompoundUniqueInputSchema)
})
.and(z.object({
  projectId_assigneeId: z.lazy(() => ProjectResourceProjectIdAssigneeIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ProjectResourceWhereInputSchema),z.lazy(() => ProjectResourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectResourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectResourceWhereInputSchema),z.lazy(() => ProjectResourceWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assigneeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allocation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  hourlyRate: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
}).strict());

export const ProjectResourceOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectResourceOrderByWithAggregationInput> = z.object({
  projectId: z.lazy(() => SortOrderSchema).optional(),
  assigneeId: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allocation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hourlyRate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectResourceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProjectResourceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectResourceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectResourceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProjectResourceSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectResourceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectResourceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectResourceScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectResourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectResourceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectResourceScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectResourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  assigneeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  allocation: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  hourlyRate: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TimeEntryWhereInputSchema: z.ZodType<Prisma.TimeEntryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeEntryWhereInputSchema),z.lazy(() => TimeEntryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeEntryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeEntryWhereInputSchema),z.lazy(() => TimeEntryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  billable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiced: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  task: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TimeEntryOrderByWithRelationInputSchema: z.ZodType<Prisma.TimeEntryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  taskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  billable: z.lazy(() => SortOrderSchema).optional(),
  invoiced: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional()
}).strict();

export const TimeEntryWhereUniqueInputSchema: z.ZodType<Prisma.TimeEntryWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TimeEntryWhereInputSchema),z.lazy(() => TimeEntryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeEntryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeEntryWhereInputSchema),z.lazy(() => TimeEntryWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  billable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiced: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  task: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TimeEntryOrderByWithAggregationInputSchema: z.ZodType<Prisma.TimeEntryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  taskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  billable: z.lazy(() => SortOrderSchema).optional(),
  invoiced: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TimeEntryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TimeEntryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TimeEntryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TimeEntryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TimeEntrySumOrderByAggregateInputSchema).optional()
}).strict();

export const TimeEntryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TimeEntryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TimeEntryScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeEntryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeEntryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeEntryScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeEntryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  billable: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  invoiced: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvoiceWhereInputSchema: z.ZodType<Prisma.InvoiceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceWhereInputSchema),z.lazy(() => InvoiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceWhereInputSchema),z.lazy(() => InvoiceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvoiceStatusFilterSchema),z.lazy(() => InvoiceStatusSchema) ]).optional(),
  issueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  paymentTerms: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  poNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shippingAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  totalAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  paidAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  internalNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  footer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  viewedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastReminder: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional()
}).strict();

export const InvoiceOrderByWithRelationInputSchema: z.ZodType<Prisma.InvoiceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  customerEmail: z.lazy(() => SortOrderSchema).optional(),
  customerName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customerAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customerPhone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invoiceNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  issueDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  paymentTerms: z.lazy(() => SortOrderSchema).optional(),
  poNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  internalNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  termsAndConditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  footer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  viewedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastReminder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => InvoiceItemOrderByRelationAggregateInputSchema).optional(),
  payments: z.lazy(() => PaymentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const InvoiceWhereUniqueInputSchema: z.ZodType<Prisma.InvoiceWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_invoiceNumber: z.lazy(() => InvoiceOrganizationIdInvoiceNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_invoiceNumber: z.lazy(() => InvoiceOrganizationIdInvoiceNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_invoiceNumber: z.lazy(() => InvoiceOrganizationIdInvoiceNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => InvoiceWhereInputSchema),z.lazy(() => InvoiceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceWhereInputSchema),z.lazy(() => InvoiceWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvoiceStatusFilterSchema),z.lazy(() => InvoiceStatusSchema) ]).optional(),
  issueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  paymentTerms: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  poNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shippingAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  totalAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  paidAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  internalNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  footer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  viewedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastReminder: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  customer: z.union([ z.lazy(() => CustomerRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional()
}).strict());

export const InvoiceOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvoiceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  customerEmail: z.lazy(() => SortOrderSchema).optional(),
  customerName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customerAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customerPhone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  invoiceNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  issueDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  paymentTerms: z.lazy(() => SortOrderSchema).optional(),
  poNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  internalNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  termsAndConditions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  footer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logoUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  viewedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastReminder: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvoiceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InvoiceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvoiceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvoiceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InvoiceSumOrderByAggregateInputSchema).optional()
}).strict();

export const InvoiceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvoiceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceScalarWhereWithAggregatesInputSchema),z.lazy(() => InvoiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceScalarWhereWithAggregatesInputSchema),z.lazy(() => InvoiceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerEmail: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customerAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customerPhone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  invoiceNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvoiceStatusWithAggregatesFilterSchema),z.lazy(() => InvoiceStatusSchema) ]).optional(),
  issueDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  paymentTerms: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  poNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subtotal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shippingAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  totalAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  paidAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  internalNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  footer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  viewedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastReminder: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvoiceItemWhereInputSchema: z.ZodType<Prisma.InvoiceItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceItemWhereInputSchema),z.lazy(() => InvoiceItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceItemWhereInputSchema),z.lazy(() => InvoiceItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  unitPrice: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invoice: z.union([ z.lazy(() => InvoiceRelationFilterSchema),z.lazy(() => InvoiceWhereInputSchema) ]).optional(),
}).strict();

export const InvoiceItemOrderByWithRelationInputSchema: z.ZodType<Prisma.InvoiceItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  invoice: z.lazy(() => InvoiceOrderByWithRelationInputSchema).optional()
}).strict();

export const InvoiceItemWhereUniqueInputSchema: z.ZodType<Prisma.InvoiceItemWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => InvoiceItemWhereInputSchema),z.lazy(() => InvoiceItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceItemWhereInputSchema),z.lazy(() => InvoiceItemWhereInputSchema).array() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  unitPrice: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invoice: z.union([ z.lazy(() => InvoiceRelationFilterSchema),z.lazy(() => InvoiceWhereInputSchema) ]).optional(),
}).strict());

export const InvoiceItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvoiceItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvoiceItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InvoiceItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvoiceItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvoiceItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InvoiceItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const InvoiceItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvoiceItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceItemScalarWhereWithAggregatesInputSchema),z.lazy(() => InvoiceItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceItemScalarWhereWithAggregatesInputSchema),z.lazy(() => InvoiceItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  unitPrice: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  subtotal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PaymentWhereInputSchema: z.ZodType<Prisma.PaymentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  method: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  feeAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  gatewayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refundedAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invoice: z.union([ z.lazy(() => InvoiceRelationFilterSchema),z.lazy(() => InvoiceWhereInputSchema) ]).optional(),
}).strict();

export const PaymentOrderByWithRelationInputSchema: z.ZodType<Prisma.PaymentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  reference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  gatewayId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  invoice: z.lazy(() => InvoiceOrderByWithRelationInputSchema).optional()
}).strict();

export const PaymentWhereUniqueInputSchema: z.ZodType<Prisma.PaymentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  method: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  feeAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  gatewayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refundedAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  invoice: z.union([ z.lazy(() => InvoiceRelationFilterSchema),z.lazy(() => InvoiceWhereInputSchema) ]).optional(),
}).strict());

export const PaymentOrderByWithAggregationInputSchema: z.ZodType<Prisma.PaymentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  reference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  gatewayId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PaymentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PaymentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PaymentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PaymentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PaymentSumOrderByAggregateInputSchema).optional()
}).strict();

export const PaymentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PaymentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  method: z.union([ z.lazy(() => EnumPaymentMethodWithAggregatesFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  reference: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paymentDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  feeAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusWithAggregatesFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  gatewayId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refundedAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseWhereInputSchema: z.ZodType<Prisma.ExpenseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receipt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vendor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumExpenseStatusFilterSchema),z.lazy(() => ExpenseStatusSchema) ]).optional(),
  reimbursable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  submittedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectionReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => ExpenseCategoryNullableRelationFilterSchema),z.lazy(() => ExpenseCategoryWhereInputSchema) ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => ExpenseToTagListRelationFilterSchema).optional()
}).strict();

export const ExpenseOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  receipt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  vendor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reimbursable: z.lazy(() => SortOrderSchema).optional(),
  reimbursed: z.lazy(() => SortOrderSchema).optional(),
  reimbursedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  submittedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectionReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  category: z.lazy(() => ExpenseCategoryOrderByWithRelationInputSchema).optional(),
  project: z.lazy(() => ProjectOrderByWithRelationInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ExpenseWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receipt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vendor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumExpenseStatusFilterSchema),z.lazy(() => ExpenseStatusSchema) ]).optional(),
  reimbursable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  submittedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectionReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => ExpenseCategoryNullableRelationFilterSchema),z.lazy(() => ExpenseCategoryWhereInputSchema) ]).optional().nullable(),
  project: z.union([ z.lazy(() => ProjectNullableRelationFilterSchema),z.lazy(() => ProjectWhereInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => ExpenseToTagListRelationFilterSchema).optional()
}).strict());

export const ExpenseOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customCategory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  receipt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  vendor: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reimbursable: z.lazy(() => SortOrderSchema).optional(),
  reimbursed: z.lazy(() => SortOrderSchema).optional(),
  reimbursedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  submittedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rejectionReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExpenseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExpenseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExpenseSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  customCategory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  receipt: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vendor: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodWithAggregatesFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumExpenseStatusWithAggregatesFilterSchema),z.lazy(() => ExpenseStatusSchema) ]).optional(),
  reimbursable: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  reimbursed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  reimbursedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  submittedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  approvedById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectionReason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseCategoryWhereInputSchema: z.ZodType<Prisma.ExpenseCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseCategoryWhereInputSchema),z.lazy(() => ExpenseCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseCategoryWhereInputSchema),z.lazy(() => ExpenseCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional()
}).strict();

export const ExpenseCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ExpenseCategoryWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_name: z.lazy(() => ExpenseCategoryOrganizationIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_name: z.lazy(() => ExpenseCategoryOrganizationIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_name: z.lazy(() => ExpenseCategoryOrganizationIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ExpenseCategoryWhereInputSchema),z.lazy(() => ExpenseCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseCategoryWhereInputSchema),z.lazy(() => ExpenseCategoryWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional()
}).strict());

export const ExpenseCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExpenseCategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseCategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseTagWhereInputSchema: z.ZodType<Prisma.ExpenseTagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseTagWhereInputSchema),z.lazy(() => ExpenseTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseTagWhereInputSchema),z.lazy(() => ExpenseTagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseToTagListRelationFilterSchema).optional()
}).strict();

export const ExpenseTagOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseTagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseToTagOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ExpenseTagWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseTagWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_name: z.lazy(() => ExpenseTagOrganizationIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_name: z.lazy(() => ExpenseTagOrganizationIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_name: z.lazy(() => ExpenseTagOrganizationIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ExpenseTagWhereInputSchema),z.lazy(() => ExpenseTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseTagWhereInputSchema),z.lazy(() => ExpenseTagWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseToTagListRelationFilterSchema).optional()
}).strict());

export const ExpenseTagOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseTagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExpenseTagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseTagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseTagMinOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseTagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseTagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseTagScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseTagScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseToTagWhereInputSchema: z.ZodType<Prisma.ExpenseToTagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseToTagWhereInputSchema),z.lazy(() => ExpenseToTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseToTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseToTagWhereInputSchema),z.lazy(() => ExpenseToTagWhereInputSchema).array() ]).optional(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tagId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expense: z.union([ z.lazy(() => ExpenseRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => ExpenseTagRelationFilterSchema),z.lazy(() => ExpenseTagWhereInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseToTagOrderByWithRelationInput> = z.object({
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  expense: z.lazy(() => ExpenseOrderByWithRelationInputSchema).optional(),
  tag: z.lazy(() => ExpenseTagOrderByWithRelationInputSchema).optional()
}).strict();

export const ExpenseToTagWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseToTagWhereUniqueInput> = z.object({
  expenseId_tagId: z.lazy(() => ExpenseToTagExpenseIdTagIdCompoundUniqueInputSchema)
})
.and(z.object({
  expenseId_tagId: z.lazy(() => ExpenseToTagExpenseIdTagIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ExpenseToTagWhereInputSchema),z.lazy(() => ExpenseToTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseToTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseToTagWhereInputSchema),z.lazy(() => ExpenseToTagWhereInputSchema).array() ]).optional(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tagId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expense: z.union([ z.lazy(() => ExpenseRelationFilterSchema),z.lazy(() => ExpenseWhereInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => ExpenseTagRelationFilterSchema),z.lazy(() => ExpenseTagWhereInputSchema) ]).optional(),
}).strict());

export const ExpenseToTagOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseToTagOrderByWithAggregationInput> = z.object({
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExpenseToTagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseToTagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseToTagMinOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseToTagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseToTagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseToTagScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseToTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseToTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseToTagScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseToTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  expenseId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  tagId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const CommentWhereInputSchema: z.ZodType<Prisma.CommentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  authorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
}).strict();

export const CommentOrderByWithRelationInputSchema: z.ZodType<Prisma.CommentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  authorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional()
}).strict();

export const CommentWhereUniqueInputSchema: z.ZodType<Prisma.CommentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentWhereInputSchema),z.lazy(() => CommentWhereInputSchema).array() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  authorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
}).strict());

export const CommentOrderByWithAggregationInputSchema: z.ZodType<Prisma.CommentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  authorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CommentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CommentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CommentMinOrderByAggregateInputSchema).optional()
}).strict();

export const CommentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CommentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CommentScalarWhereWithAggregatesInputSchema),z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentScalarWhereWithAggregatesInputSchema),z.lazy(() => CommentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  authorId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AttachmentWhereInputSchema: z.ZodType<Prisma.AttachmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  uploadedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
}).strict();

export const AttachmentOrderByWithRelationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileType: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  uploadedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional()
}).strict();

export const AttachmentWhereUniqueInputSchema: z.ZodType<Prisma.AttachmentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  uploadedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
}).strict());

export const AttachmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileType: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  uploadedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AttachmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AttachmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AttachmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AttachmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AttachmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const AttachmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AttachmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  uploadedById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CalendarEventWhereInputSchema: z.ZodType<Prisma.CalendarEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attendees: z.lazy(() => CalendarEventAttendeeListRelationFilterSchema).optional()
}).strict();

export const CalendarEventOrderByWithRelationInputSchema: z.ZodType<Prisma.CalendarEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  attendees: z.lazy(() => CalendarEventAttendeeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CalendarEventWhereUniqueInputSchema: z.ZodType<Prisma.CalendarEventWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventWhereInputSchema),z.lazy(() => CalendarEventWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  allDay: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attendees: z.lazy(() => CalendarEventAttendeeListRelationFilterSchema).optional()
}).strict());

export const CalendarEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.CalendarEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CalendarEventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CalendarEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CalendarEventMinOrderByAggregateInputSchema).optional()
}).strict();

export const CalendarEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CalendarEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  allDay: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CalendarEventAttendeeWhereInputSchema: z.ZodType<Prisma.CalendarEventAttendeeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventAttendeeWhereInputSchema),z.lazy(() => CalendarEventAttendeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventAttendeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventAttendeeWhereInputSchema),z.lazy(() => CalendarEventAttendeeWhereInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumAttendeeStatusFilterSchema),z.lazy(() => AttendeeStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event: z.union([ z.lazy(() => CalendarEventRelationFilterSchema),z.lazy(() => CalendarEventWhereInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeOrderByWithRelationInputSchema: z.ZodType<Prisma.CalendarEventAttendeeOrderByWithRelationInput> = z.object({
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  event: z.lazy(() => CalendarEventOrderByWithRelationInputSchema).optional()
}).strict();

export const CalendarEventAttendeeWhereUniqueInputSchema: z.ZodType<Prisma.CalendarEventAttendeeWhereUniqueInput> = z.object({
  eventId_userId: z.lazy(() => CalendarEventAttendeeEventIdUserIdCompoundUniqueInputSchema)
})
.and(z.object({
  eventId_userId: z.lazy(() => CalendarEventAttendeeEventIdUserIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CalendarEventAttendeeWhereInputSchema),z.lazy(() => CalendarEventAttendeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventAttendeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventAttendeeWhereInputSchema),z.lazy(() => CalendarEventAttendeeWhereInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumAttendeeStatusFilterSchema),z.lazy(() => AttendeeStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event: z.union([ z.lazy(() => CalendarEventRelationFilterSchema),z.lazy(() => CalendarEventWhereInputSchema) ]).optional(),
}).strict());

export const CalendarEventAttendeeOrderByWithAggregationInputSchema: z.ZodType<Prisma.CalendarEventAttendeeOrderByWithAggregationInput> = z.object({
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CalendarEventAttendeeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CalendarEventAttendeeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CalendarEventAttendeeMinOrderByAggregateInputSchema).optional()
}).strict();

export const CalendarEventAttendeeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CalendarEventAttendeeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventAttendeeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereWithAggregatesInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumAttendeeStatusWithAggregatesFilterSchema),z.lazy(() => AttendeeStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const NotificationWhereInputSchema: z.ZodType<Prisma.NotificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  actionUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const NotificationOrderByWithRelationInputSchema: z.ZodType<Prisma.NotificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  actionUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationWhereUniqueInputSchema: z.ZodType<Prisma.NotificationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  actionUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const NotificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.NotificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  actionUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => NotificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NotificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NotificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const NotificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.NotificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeWithAggregatesFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  actionUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvitationStatusFilterSchema),z.lazy(() => InvitationStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  acceptedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  acceptedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string(),
    organizationId_email: z.lazy(() => InvitationOrganizationIdEmailCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
    token: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    organizationId_email: z.lazy(() => InvitationOrganizationIdEmailCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
    organizationId_email: z.lazy(() => InvitationOrganizationIdEmailCompoundUniqueInputSchema),
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    organizationId_email: z.lazy(() => InvitationOrganizationIdEmailCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  organizationId_email: z.lazy(() => InvitationOrganizationIdEmailCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvitationStatusFilterSchema),z.lazy(() => InvitationStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  acceptedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  acceptedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleWithAggregatesFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  inviterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvitationStatusWithAggregatesFilterSchema),z.lazy(() => InvitationStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  acceptedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EmployeeWhereInputSchema: z.ZodType<Prisma.EmployeeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EmployeeWhereInputSchema),z.lazy(() => EmployeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmployeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmployeeWhereInputSchema),z.lazy(() => EmployeeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hireDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  terminationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEmployeeStatusFilterSchema),z.lazy(() => EmployeeStatusSchema) ]).optional(),
  managerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  taxId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollListRelationFilterSchema).optional(),
  timeOff: z.lazy(() => TimeOffListRelationFilterSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewListRelationFilterSchema).optional()
}).strict();

export const EmployeeOrderByWithRelationInputSchema: z.ZodType<Prisma.EmployeeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  department: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hireDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  terminationDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  managerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  taxId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emergencyContactName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emergencyContactPhone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  payrolls: z.lazy(() => PayrollOrderByRelationAggregateInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffOrderByRelationAggregateInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EmployeeWhereUniqueInputSchema: z.ZodType<Prisma.EmployeeWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EmployeeWhereInputSchema),z.lazy(() => EmployeeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmployeeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmployeeWhereInputSchema),z.lazy(() => EmployeeWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hireDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  terminationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEmployeeStatusFilterSchema),z.lazy(() => EmployeeStatusSchema) ]).optional(),
  managerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  taxId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollListRelationFilterSchema).optional(),
  timeOff: z.lazy(() => TimeOffListRelationFilterSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewListRelationFilterSchema).optional()
}).strict());

export const EmployeeOrderByWithAggregationInputSchema: z.ZodType<Prisma.EmployeeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  department: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  hireDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  terminationDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  managerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  city: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  country: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  taxId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emergencyContactName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emergencyContactPhone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EmployeeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EmployeeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EmployeeMinOrderByAggregateInputSchema).optional()
}).strict();

export const EmployeeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EmployeeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EmployeeScalarWhereWithAggregatesInputSchema),z.lazy(() => EmployeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmployeeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmployeeScalarWhereWithAggregatesInputSchema),z.lazy(() => EmployeeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  department: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  hireDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  terminationDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEmployeeStatusWithAggregatesFilterSchema),z.lazy(() => EmployeeStatusSchema) ]).optional(),
  managerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  birthDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  taxId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PayrollWhereInputSchema: z.ZodType<Prisma.PayrollWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PayrollWhereInputSchema),z.lazy(() => PayrollWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayrollWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayrollWhereInputSchema),z.lazy(() => PayrollWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payPeriodStart: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payPeriodEnd: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  basicSalary: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  overtime: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bonus: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  tax: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  deductions: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  netAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPayrollStatusFilterSchema),z.lazy(() => PayrollStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict();

export const PayrollOrderByWithRelationInputSchema: z.ZodType<Prisma.PayrollOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  payPeriodStart: z.lazy(() => SortOrderSchema).optional(),
  payPeriodEnd: z.lazy(() => SortOrderSchema).optional(),
  payDate: z.lazy(() => SortOrderSchema).optional(),
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  employee: z.lazy(() => EmployeeOrderByWithRelationInputSchema).optional()
}).strict();

export const PayrollWhereUniqueInputSchema: z.ZodType<Prisma.PayrollWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PayrollWhereInputSchema),z.lazy(() => PayrollWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayrollWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayrollWhereInputSchema),z.lazy(() => PayrollWhereInputSchema).array() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payPeriodStart: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payPeriodEnd: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  basicSalary: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  overtime: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bonus: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  tax: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  deductions: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  netAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPayrollStatusFilterSchema),z.lazy(() => PayrollStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict());

export const PayrollOrderByWithAggregationInputSchema: z.ZodType<Prisma.PayrollOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  payPeriodStart: z.lazy(() => SortOrderSchema).optional(),
  payPeriodEnd: z.lazy(() => SortOrderSchema).optional(),
  payDate: z.lazy(() => SortOrderSchema).optional(),
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PayrollCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PayrollAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PayrollMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PayrollMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PayrollSumOrderByAggregateInputSchema).optional()
}).strict();

export const PayrollScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PayrollScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PayrollScalarWhereWithAggregatesInputSchema),z.lazy(() => PayrollScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayrollScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayrollScalarWhereWithAggregatesInputSchema),z.lazy(() => PayrollScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  payPeriodStart: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  payPeriodEnd: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  payDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  basicSalary: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  overtime: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bonus: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  tax: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  deductions: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  netAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPayrollStatusWithAggregatesFilterSchema),z.lazy(() => PayrollStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TimeOffWhereInputSchema: z.ZodType<Prisma.TimeOffWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeOffWhereInputSchema),z.lazy(() => TimeOffWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeOffWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeOffWhereInputSchema),z.lazy(() => TimeOffWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTimeOffTypeFilterSchema),z.lazy(() => TimeOffTypeSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTimeOffStatusFilterSchema),z.lazy(() => TimeOffStatusSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict();

export const TimeOffOrderByWithRelationInputSchema: z.ZodType<Prisma.TimeOffOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  reason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  employee: z.lazy(() => EmployeeOrderByWithRelationInputSchema).optional()
}).strict();

export const TimeOffWhereUniqueInputSchema: z.ZodType<Prisma.TimeOffWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TimeOffWhereInputSchema),z.lazy(() => TimeOffWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeOffWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeOffWhereInputSchema),z.lazy(() => TimeOffWhereInputSchema).array() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTimeOffTypeFilterSchema),z.lazy(() => TimeOffTypeSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTimeOffStatusFilterSchema),z.lazy(() => TimeOffStatusSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict());

export const TimeOffOrderByWithAggregationInputSchema: z.ZodType<Prisma.TimeOffOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  reason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TimeOffCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TimeOffAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TimeOffMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TimeOffMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TimeOffSumOrderByAggregateInputSchema).optional()
}).strict();

export const TimeOffScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TimeOffScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TimeOffScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeOffScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeOffScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeOffScalarWhereWithAggregatesInputSchema),z.lazy(() => TimeOffScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTimeOffTypeWithAggregatesFilterSchema),z.lazy(() => TimeOffTypeSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTimeOffStatusWithAggregatesFilterSchema),z.lazy(() => TimeOffStatusSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PerformanceReviewWhereInputSchema: z.ZodType<Prisma.PerformanceReviewWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PerformanceReviewWhereInputSchema),z.lazy(() => PerformanceReviewWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceReviewWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceReviewWhereInputSchema),z.lazy(() => PerformanceReviewWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewPeriod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performanceScore: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  strengths: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  improvements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goals: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumReviewStatusFilterSchema),z.lazy(() => ReviewStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewOrderByWithRelationInputSchema: z.ZodType<Prisma.PerformanceReviewOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewPeriod: z.lazy(() => SortOrderSchema).optional(),
  performanceScore: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  strengths: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  improvements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  goals: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  employee: z.lazy(() => EmployeeOrderByWithRelationInputSchema).optional()
}).strict();

export const PerformanceReviewWhereUniqueInputSchema: z.ZodType<Prisma.PerformanceReviewWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PerformanceReviewWhereInputSchema),z.lazy(() => PerformanceReviewWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceReviewWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceReviewWhereInputSchema),z.lazy(() => PerformanceReviewWhereInputSchema).array() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewPeriod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performanceScore: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  strengths: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  improvements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goals: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumReviewStatusFilterSchema),z.lazy(() => ReviewStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  employee: z.union([ z.lazy(() => EmployeeRelationFilterSchema),z.lazy(() => EmployeeWhereInputSchema) ]).optional(),
}).strict());

export const PerformanceReviewOrderByWithAggregationInputSchema: z.ZodType<Prisma.PerformanceReviewOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewPeriod: z.lazy(() => SortOrderSchema).optional(),
  performanceScore: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  strengths: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  improvements: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  goals: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  comments: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PerformanceReviewCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PerformanceReviewAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PerformanceReviewMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PerformanceReviewMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PerformanceReviewSumOrderByAggregateInputSchema).optional()
}).strict();

export const PerformanceReviewScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PerformanceReviewScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PerformanceReviewScalarWhereWithAggregatesInputSchema),z.lazy(() => PerformanceReviewScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceReviewScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceReviewScalarWhereWithAggregatesInputSchema),z.lazy(() => PerformanceReviewScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reviewPeriod: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  performanceScore: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  strengths: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  improvements: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goals: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reviewDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumReviewStatusWithAggregatesFilterSchema),z.lazy(() => ReviewStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MarketingCampaignWhereInputSchema: z.ZodType<Prisma.MarketingCampaignWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MarketingCampaignWhereInputSchema),z.lazy(() => MarketingCampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MarketingCampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MarketingCampaignWhereInputSchema),z.lazy(() => MarketingCampaignWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumCampaignTypeFilterSchema),z.lazy(() => CampaignTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumCampaignStatusFilterSchema),z.lazy(() => CampaignStatusSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetAudience: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignListRelationFilterSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostListRelationFilterSchema).optional()
}).strict();

export const MarketingCampaignOrderByWithRelationInputSchema: z.ZodType<Prisma.MarketingCampaignOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  budget: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  targetAudience: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignOrderByRelationAggregateInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MarketingCampaignWhereUniqueInputSchema: z.ZodType<Prisma.MarketingCampaignWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => MarketingCampaignWhereInputSchema),z.lazy(() => MarketingCampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MarketingCampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MarketingCampaignWhereInputSchema),z.lazy(() => MarketingCampaignWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumCampaignTypeFilterSchema),z.lazy(() => CampaignTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumCampaignStatusFilterSchema),z.lazy(() => CampaignStatusSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetAudience: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignListRelationFilterSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostListRelationFilterSchema).optional()
}).strict());

export const MarketingCampaignOrderByWithAggregationInputSchema: z.ZodType<Prisma.MarketingCampaignOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  budget: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  targetAudience: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MarketingCampaignCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MarketingCampaignAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MarketingCampaignMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MarketingCampaignMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MarketingCampaignSumOrderByAggregateInputSchema).optional()
}).strict();

export const MarketingCampaignScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MarketingCampaignScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MarketingCampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => MarketingCampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MarketingCampaignScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MarketingCampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => MarketingCampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumCampaignTypeWithAggregatesFilterSchema),z.lazy(() => CampaignTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumCampaignStatusWithAggregatesFilterSchema),z.lazy(() => CampaignStatusSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  budget: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  targetAudience: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EmailCampaignWhereInputSchema: z.ZodType<Prisma.EmailCampaignWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EmailCampaignWhereInputSchema),z.lazy(() => EmailCampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmailCampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmailCampaignWhereInputSchema),z.lazy(() => EmailCampaignWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sender: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  opens: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  clicks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  bounces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  campaign: z.union([ z.lazy(() => MarketingCampaignRelationFilterSchema),z.lazy(() => MarketingCampaignWhereInputSchema) ]).optional(),
}).strict();

export const EmailCampaignOrderByWithRelationInputSchema: z.ZodType<Prisma.EmailCampaignOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  campaign: z.lazy(() => MarketingCampaignOrderByWithRelationInputSchema).optional()
}).strict();

export const EmailCampaignWhereUniqueInputSchema: z.ZodType<Prisma.EmailCampaignWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EmailCampaignWhereInputSchema),z.lazy(() => EmailCampaignWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmailCampaignWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmailCampaignWhereInputSchema),z.lazy(() => EmailCampaignWhereInputSchema).array() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sender: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  opens: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  clicks: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  bounces: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  campaign: z.union([ z.lazy(() => MarketingCampaignRelationFilterSchema),z.lazy(() => MarketingCampaignWhereInputSchema) ]).optional(),
}).strict());

export const EmailCampaignOrderByWithAggregationInputSchema: z.ZodType<Prisma.EmailCampaignOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sentAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EmailCampaignCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EmailCampaignAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EmailCampaignMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EmailCampaignMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EmailCampaignSumOrderByAggregateInputSchema).optional()
}).strict();

export const EmailCampaignScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EmailCampaignScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EmailCampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => EmailCampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmailCampaignScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmailCampaignScalarWhereWithAggregatesInputSchema),z.lazy(() => EmailCampaignScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sender: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  opens: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  clicks: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  bounces: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SocialMediaPostWhereInputSchema: z.ZodType<Prisma.SocialMediaPostWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SocialMediaPostWhereInputSchema),z.lazy(() => SocialMediaPostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SocialMediaPostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SocialMediaPostWhereInputSchema),z.lazy(() => SocialMediaPostWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSocialPlatformFilterSchema),z.lazy(() => SocialPlatformSchema) ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shares: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  comments: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  campaign: z.union([ z.lazy(() => MarketingCampaignRelationFilterSchema),z.lazy(() => MarketingCampaignWhereInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostOrderByWithRelationInputSchema: z.ZodType<Prisma.SocialMediaPostOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  mediaUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publishedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  campaign: z.lazy(() => MarketingCampaignOrderByWithRelationInputSchema).optional()
}).strict();

export const SocialMediaPostWhereUniqueInputSchema: z.ZodType<Prisma.SocialMediaPostWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SocialMediaPostWhereInputSchema),z.lazy(() => SocialMediaPostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SocialMediaPostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SocialMediaPostWhereInputSchema),z.lazy(() => SocialMediaPostWhereInputSchema).array() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSocialPlatformFilterSchema),z.lazy(() => SocialPlatformSchema) ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  shares: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  comments: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  campaign: z.union([ z.lazy(() => MarketingCampaignRelationFilterSchema),z.lazy(() => MarketingCampaignWhereInputSchema) ]).optional(),
}).strict());

export const SocialMediaPostOrderByWithAggregationInputSchema: z.ZodType<Prisma.SocialMediaPostOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  mediaUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scheduledAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publishedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SocialMediaPostCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SocialMediaPostAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SocialMediaPostMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SocialMediaPostMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SocialMediaPostSumOrderByAggregateInputSchema).optional()
}).strict();

export const SocialMediaPostScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SocialMediaPostScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SocialMediaPostScalarWhereWithAggregatesInputSchema),z.lazy(() => SocialMediaPostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SocialMediaPostScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SocialMediaPostScalarWhereWithAggregatesInputSchema),z.lazy(() => SocialMediaPostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSocialPlatformWithAggregatesFilterSchema),z.lazy(() => SocialPlatformSchema) ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mediaUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  likes: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shares: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  comments: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    token: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationWhereInputSchema: z.ZodType<Prisma.VerificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VerificationOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const VerificationWhereUniqueInputSchema: z.ZodType<Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const VerificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FinancialReportWhereInputSchema: z.ZodType<Prisma.FinancialReportWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportWhereInputSchema),z.lazy(() => FinancialReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportWhereInputSchema),z.lazy(() => FinancialReportWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumFinancialReportTypeFilterSchema),z.lazy(() => FinancialReportTypeSchema) ]).optional(),
  template: z.lazy(() => JsonFilterSchema).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  dateRange: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFinancialReportStatusFilterSchema),z.lazy(() => FinancialReportStatusSchema) ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isTemplate: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isScheduled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  scheduleConfig: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataListRelationFilterSchema).optional(),
  exports: z.lazy(() => FinancialReportExportListRelationFilterSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleListRelationFilterSchema).optional()
}).strict();

export const FinancialReportOrderByWithRelationInputSchema: z.ZodType<Prisma.FinancialReportOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  template: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateRange: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isTemplate: z.lazy(() => SortOrderSchema).optional(),
  isScheduled: z.lazy(() => SortOrderSchema).optional(),
  scheduleConfig: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  reportData: z.lazy(() => FinancialReportDataOrderByRelationAggregateInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportOrderByRelationAggregateInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FinancialReportWhereUniqueInputSchema: z.ZodType<Prisma.FinancialReportWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FinancialReportWhereInputSchema),z.lazy(() => FinancialReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportWhereInputSchema),z.lazy(() => FinancialReportWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumFinancialReportTypeFilterSchema),z.lazy(() => FinancialReportTypeSchema) ]).optional(),
  template: z.lazy(() => JsonFilterSchema).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  dateRange: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFinancialReportStatusFilterSchema),z.lazy(() => FinancialReportStatusSchema) ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isTemplate: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isScheduled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  scheduleConfig: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataListRelationFilterSchema).optional(),
  exports: z.lazy(() => FinancialReportExportListRelationFilterSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleListRelationFilterSchema).optional()
}).strict());

export const FinancialReportOrderByWithAggregationInputSchema: z.ZodType<Prisma.FinancialReportOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  template: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dateRange: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  generatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isTemplate: z.lazy(() => SortOrderSchema).optional(),
  isScheduled: z.lazy(() => SortOrderSchema).optional(),
  scheduleConfig: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FinancialReportCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FinancialReportMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FinancialReportMinOrderByAggregateInputSchema).optional()
}).strict();

export const FinancialReportScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FinancialReportScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumFinancialReportTypeWithAggregatesFilterSchema),z.lazy(() => FinancialReportTypeSchema) ]).optional(),
  template: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  filters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  dateRange: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFinancialReportStatusWithAggregatesFilterSchema),z.lazy(() => FinancialReportStatusSchema) ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isTemplate: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isScheduled: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  scheduleConfig: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportDataWhereInputSchema: z.ZodType<Prisma.FinancialReportDataWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportDataWhereInputSchema),z.lazy(() => FinancialReportDataWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportDataWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportDataWhereInputSchema),z.lazy(() => FinancialReportDataWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataOrderByWithRelationInputSchema: z.ZodType<Prisma.FinancialReportDataOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  report: z.lazy(() => FinancialReportOrderByWithRelationInputSchema).optional()
}).strict();

export const FinancialReportDataWhereUniqueInputSchema: z.ZodType<Prisma.FinancialReportDataWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FinancialReportDataWhereInputSchema),z.lazy(() => FinancialReportDataWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportDataWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportDataWhereInputSchema),z.lazy(() => FinancialReportDataWhereInputSchema).array() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict());

export const FinancialReportDataOrderByWithAggregationInputSchema: z.ZodType<Prisma.FinancialReportDataOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FinancialReportDataCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FinancialReportDataMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FinancialReportDataMinOrderByAggregateInputSchema).optional()
}).strict();

export const FinancialReportDataScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FinancialReportDataScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportDataScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportDataScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportDataScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportDataScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportDataScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportExportWhereInputSchema: z.ZodType<Prisma.FinancialReportExportWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportExportWhereInputSchema),z.lazy(() => FinancialReportExportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportExportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportExportWhereInputSchema),z.lazy(() => FinancialReportExportWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  format: z.union([ z.lazy(() => EnumFinancialReportExportFormatFilterSchema),z.lazy(() => FinancialReportExportFormatSchema) ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileSize: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumFinancialReportExportStatusFilterSchema),z.lazy(() => FinancialReportExportStatusSchema) ]).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportOrderByWithRelationInputSchema: z.ZodType<Prisma.FinancialReportExportOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fileSize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  report: z.lazy(() => FinancialReportOrderByWithRelationInputSchema).optional()
}).strict();

export const FinancialReportExportWhereUniqueInputSchema: z.ZodType<Prisma.FinancialReportExportWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FinancialReportExportWhereInputSchema),z.lazy(() => FinancialReportExportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportExportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportExportWhereInputSchema),z.lazy(() => FinancialReportExportWhereInputSchema).array() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  format: z.union([ z.lazy(() => EnumFinancialReportExportFormatFilterSchema),z.lazy(() => FinancialReportExportFormatSchema) ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileSize: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumFinancialReportExportStatusFilterSchema),z.lazy(() => FinancialReportExportStatusSchema) ]).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict());

export const FinancialReportExportOrderByWithAggregationInputSchema: z.ZodType<Prisma.FinancialReportExportOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fileSize: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FinancialReportExportCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FinancialReportExportAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FinancialReportExportMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FinancialReportExportMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FinancialReportExportSumOrderByAggregateInputSchema).optional()
}).strict();

export const FinancialReportExportScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FinancialReportExportScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportExportScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportExportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportExportScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportExportScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportExportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  format: z.union([ z.lazy(() => EnumFinancialReportExportFormatWithAggregatesFilterSchema),z.lazy(() => FinancialReportExportFormatSchema) ]).optional(),
  fileName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fileSize: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumFinancialReportExportStatusWithAggregatesFilterSchema),z.lazy(() => FinancialReportExportStatusSchema) ]).optional(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportScheduleWhereInputSchema: z.ZodType<Prisma.FinancialReportScheduleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportScheduleWhereInputSchema),z.lazy(() => FinancialReportScheduleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScheduleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScheduleWhereInputSchema),z.lazy(() => FinancialReportScheduleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumFinancialReportScheduleFrequencyFilterSchema),z.lazy(() => FinancialReportScheduleFrequencySchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dayOfMonth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timezone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  lastRunAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextRunAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipients: z.lazy(() => JsonFilterSchema).optional(),
  emailSubject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailBody: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleOrderByWithRelationInputSchema: z.ZodType<Prisma.FinancialReportScheduleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dayOfMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  timezone: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  lastRunAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nextRunAt: z.lazy(() => SortOrderSchema).optional(),
  recipients: z.lazy(() => SortOrderSchema).optional(),
  emailSubject: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emailBody: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  report: z.lazy(() => FinancialReportOrderByWithRelationInputSchema).optional()
}).strict();

export const FinancialReportScheduleWhereUniqueInputSchema: z.ZodType<Prisma.FinancialReportScheduleWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FinancialReportScheduleWhereInputSchema),z.lazy(() => FinancialReportScheduleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScheduleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScheduleWhereInputSchema),z.lazy(() => FinancialReportScheduleWhereInputSchema).array() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumFinancialReportScheduleFrequencyFilterSchema),z.lazy(() => FinancialReportScheduleFrequencySchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  dayOfMonth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timezone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  lastRunAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextRunAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipients: z.lazy(() => JsonFilterSchema).optional(),
  emailSubject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailBody: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  report: z.union([ z.lazy(() => FinancialReportRelationFilterSchema),z.lazy(() => FinancialReportWhereInputSchema) ]).optional(),
}).strict());

export const FinancialReportScheduleOrderByWithAggregationInputSchema: z.ZodType<Prisma.FinancialReportScheduleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dayOfMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  timezone: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  lastRunAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nextRunAt: z.lazy(() => SortOrderSchema).optional(),
  recipients: z.lazy(() => SortOrderSchema).optional(),
  emailSubject: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emailBody: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FinancialReportScheduleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FinancialReportScheduleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FinancialReportScheduleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FinancialReportScheduleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FinancialReportScheduleSumOrderByAggregateInputSchema).optional()
}).strict();

export const FinancialReportScheduleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FinancialReportScheduleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScheduleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereWithAggregatesInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumFinancialReportScheduleFrequencyWithAggregatesFilterSchema),z.lazy(() => FinancialReportScheduleFrequencySchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  dayOfMonth: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timezone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  lastRunAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextRunAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  recipients: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  emailSubject: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emailBody: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PermissionCreateInputSchema: z.ZodType<Prisma.PermissionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUpdateInputSchema: z.ZodType<Prisma.PermissionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionCreateManyInputSchema: z.ZodType<Prisma.PermissionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateInputSchema: z.ZodType<Prisma.RolePermissionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutRolePermissionsInputSchema)
}).strict();

export const RolePermissionUncheckedCreateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateInputSchema: z.ZodType<Prisma.RolePermissionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutRolePermissionsNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyInputSchema: z.ZodType<Prisma.RolePermissionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRoleCreateInputSchema: z.ZodType<Prisma.CustomRoleCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomRolesInputSchema),
  permissions: z.lazy(() => CustomRolePermissionCreateNestedManyWithoutCustomRoleInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleUncheckedCreateInputSchema: z.ZodType<Prisma.CustomRoleUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleUpdateInputSchema: z.ZodType<Prisma.CustomRoleUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomRolesNestedInputSchema).optional(),
  permissions: z.lazy(() => CustomRolePermissionUpdateManyWithoutCustomRoleNestedInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleCreateManyInputSchema: z.ZodType<Prisma.CustomRoleCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomRoleUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomRoleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionCreateInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  customRole: z.lazy(() => CustomRoleCreateNestedOneWithoutPermissionsInputSchema),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutCustomRolePermissionsInputSchema)
}).strict();

export const CustomRolePermissionUncheckedCreateInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customRoleId: z.string(),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionUpdateInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customRole: z.lazy(() => CustomRoleUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutCustomRolePermissionsNestedInputSchema).optional()
}).strict();

export const CustomRolePermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customRoleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionCreateManyInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customRoleId: z.string(),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customRoleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationCreateInputSchema: z.ZodType<Prisma.UserOrganizationCreateInput> = z.object({
  userId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  joinedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema),
  customRole: z.lazy(() => CustomRoleCreateNestedOneWithoutUserAssignmentsInputSchema).optional()
}).strict();

export const UserOrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedCreateInput> = z.object({
  userId: z.string(),
  organizationId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  customRoleId: z.string().optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationUpdateInputSchema: z.ZodType<Prisma.UserOrganizationUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  customRole: z.lazy(() => CustomRoleUpdateOneWithoutUserAssignmentsNestedInputSchema).optional()
}).strict();

export const UserOrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationCreateManyInputSchema: z.ZodType<Prisma.UserOrganizationCreateManyInput> = z.object({
  userId: z.string(),
  organizationId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  customRoleId: z.string().optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.UserOrganizationUpdateManyMutationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateInputSchema: z.ZodType<Prisma.CustomerCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  interactions: z.lazy(() => CustomerInteractionCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUpdateInputSchema: z.ZodType<Prisma.CustomerUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  interactions: z.lazy(() => CustomerInteractionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerCreateManyInputSchema: z.ZodType<Prisma.CustomerCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomerUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerInteractionCreateInputSchema: z.ZodType<Prisma.CustomerInteractionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInteractionsInputSchema),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutCustomerInteractionInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedCreateInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutCustomerInteractionInputSchema).optional()
}).strict();

export const CustomerInteractionUpdateInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInteractionsNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutCustomerInteractionNestedInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutCustomerInteractionNestedInputSchema).optional()
}).strict();

export const CustomerInteractionCreateManyInputSchema: z.ZodType<Prisma.CustomerInteractionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerInteractionUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerInteractionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealCreateInputSchema: z.ZodType<Prisma.DealCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutDealsInputSchema)
}).strict();

export const DealUncheckedCreateInputSchema: z.ZodType<Prisma.DealUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DealUpdateInputSchema: z.ZodType<Prisma.DealUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutDealsNestedInputSchema).optional()
}).strict();

export const DealUncheckedUpdateInputSchema: z.ZodType<Prisma.DealUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealCreateManyInputSchema: z.ZodType<Prisma.DealCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DealUpdateManyMutationInputSchema: z.ZodType<Prisma.DealUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DealUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateInputSchema: z.ZodType<Prisma.ProjectCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUpdateInputSchema: z.ZodType<Prisma.ProjectUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectCreateManyInputSchema: z.ZodType<Prisma.ProjectCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateInputSchema: z.ZodType<Prisma.TaskCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUpdateInputSchema: z.ZodType<Prisma.TaskUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskCreateManyInputSchema: z.ZodType<Prisma.TaskCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable()
}).strict();

export const TaskUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectResourceCreateInputSchema: z.ZodType<Prisma.ProjectResourceCreateInput> = z.object({
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutResourcesInputSchema)
}).strict();

export const ProjectResourceUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedCreateInput> = z.object({
  projectId: z.string(),
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectResourceUpdateInputSchema: z.ZodType<Prisma.ProjectResourceUpdateInput> = z.object({
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneRequiredWithoutResourcesNestedInputSchema).optional()
}).strict();

export const ProjectResourceUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedUpdateInput> = z.object({
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectResourceCreateManyInputSchema: z.ZodType<Prisma.ProjectResourceCreateManyInput> = z.object({
  projectId: z.string(),
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectResourceUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectResourceUpdateManyMutationInput> = z.object({
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectResourceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedUpdateManyInput> = z.object({
  projectId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryCreateInputSchema: z.ZodType<Prisma.TimeEntryCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTimeEntriesInputSchema).optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutTimeEntriesInputSchema).optional()
}).strict();

export const TimeEntryUncheckedCreateInputSchema: z.ZodType<Prisma.TimeEntryUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeEntryUpdateInputSchema: z.ZodType<Prisma.TimeEntryUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTimeEntriesNestedInputSchema).optional(),
  task: z.lazy(() => TaskUpdateOneWithoutTimeEntriesNestedInputSchema).optional()
}).strict();

export const TimeEntryUncheckedUpdateInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryCreateManyInputSchema: z.ZodType<Prisma.TimeEntryCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  taskId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeEntryUpdateManyMutationInputSchema: z.ZodType<Prisma.TimeEntryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceCreateInputSchema: z.ZodType<Prisma.InvoiceCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvoicesInputSchema),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInvoicesInputSchema),
  items: z.lazy(() => InvoiceItemCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUncheckedCreateInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUpdateInputSchema: z.ZodType<Prisma.InvoiceUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  items: z.lazy(() => InvoiceItemUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceCreateManyInputSchema: z.ZodType<Prisma.InvoiceCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceUpdateManyMutationInputSchema: z.ZodType<Prisma.InvoiceUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemCreateInputSchema: z.ZodType<Prisma.InvoiceItemCreateInput> = z.object({
  id: z.string().cuid().optional(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invoice: z.lazy(() => InvoiceCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const InvoiceItemUncheckedCreateInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  invoiceId: z.string(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceItemUpdateInputSchema: z.ZodType<Prisma.InvoiceItemUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invoice: z.lazy(() => InvoiceUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const InvoiceItemUncheckedUpdateInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemCreateManyInputSchema: z.ZodType<Prisma.InvoiceItemCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  invoiceId: z.string(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceItemUpdateManyMutationInputSchema: z.ZodType<Prisma.InvoiceItemUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentCreateInputSchema: z.ZodType<Prisma.PaymentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  invoice: z.lazy(() => InvoiceCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentUncheckedCreateInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  invoiceId: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentUpdateInputSchema: z.ZodType<Prisma.PaymentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  invoice: z.lazy(() => InvoiceUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentUncheckedUpdateInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentCreateManyInputSchema: z.ZodType<Prisma.PaymentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  invoiceId: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentUpdateManyMutationInputSchema: z.ZodType<Prisma.PaymentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCreateInputSchema: z.ZodType<Prisma.ExpenseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  category: z.lazy(() => ExpenseCategoryCreateNestedOneWithoutExpensesInputSchema).optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutExpensesInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUpdateInputSchema: z.ZodType<Prisma.ExpenseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  category: z.lazy(() => ExpenseCategoryUpdateOneWithoutExpensesNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutExpensesNestedInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseCreateManyInputSchema: z.ZodType<Prisma.ExpenseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCategoryCreateInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpenseCategoriesInputSchema),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ExpenseCategoryUpdateInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpenseCategoriesNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryCreateManyInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseTagCreateInputSchema: z.ZodType<Prisma.ExpenseTagCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpenseTagsInputSchema),
  expenses: z.lazy(() => ExpenseToTagCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const ExpenseTagUpdateInputSchema: z.ZodType<Prisma.ExpenseTagUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpenseTagsNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseToTagUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const ExpenseTagCreateManyInputSchema: z.ZodType<Prisma.ExpenseTagCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ExpenseTagUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseTagUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseTagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagCreateInputSchema: z.ZodType<Prisma.ExpenseToTagCreateInput> = z.object({
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutTagsInputSchema),
  tag: z.lazy(() => ExpenseTagCreateNestedOneWithoutExpensesInputSchema)
}).strict();

export const ExpenseToTagUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedCreateInput> = z.object({
  expenseId: z.string(),
  tagId: z.string()
}).strict();

export const ExpenseToTagUpdateInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateInput> = z.object({
  expense: z.lazy(() => ExpenseUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  tag: z.lazy(() => ExpenseTagUpdateOneRequiredWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseToTagUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateInput> = z.object({
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagCreateManyInputSchema: z.ZodType<Prisma.ExpenseToTagCreateManyInput> = z.object({
  expenseId: z.string(),
  tagId: z.string()
}).strict();

export const ExpenseToTagUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyMutationInput> = z.object({
}).strict();

export const ExpenseToTagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateManyInput> = z.object({
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentCreateInputSchema: z.ZodType<Prisma.CommentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutCommentsInputSchema)
}).strict();

export const CommentUncheckedCreateInputSchema: z.ZodType<Prisma.CommentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CommentUpdateInputSchema: z.ZodType<Prisma.CommentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  task: z.lazy(() => TaskUpdateOneRequiredWithoutCommentsNestedInputSchema).optional()
}).strict();

export const CommentUncheckedUpdateInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentCreateManyInputSchema: z.ZodType<Prisma.CommentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CommentUpdateManyMutationInputSchema: z.ZodType<Prisma.CommentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateInputSchema: z.ZodType<Prisma.AttachmentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutAttachmentsInputSchema)
}).strict();

export const AttachmentUncheckedCreateInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AttachmentUpdateInputSchema: z.ZodType<Prisma.AttachmentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  task: z.lazy(() => TaskUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional()
}).strict();

export const AttachmentUncheckedUpdateInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateManyInputSchema: z.ZodType<Prisma.AttachmentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AttachmentUpdateManyMutationInputSchema: z.ZodType<Prisma.AttachmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventCreateInputSchema: z.ZodType<Prisma.CalendarEventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean().optional(),
  location: z.string().optional().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  attendees: z.lazy(() => CalendarEventAttendeeCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const CalendarEventUncheckedCreateInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean().optional(),
  location: z.string().optional().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  attendees: z.lazy(() => CalendarEventAttendeeUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const CalendarEventUpdateInputSchema: z.ZodType<Prisma.CalendarEventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attendees: z.lazy(() => CalendarEventAttendeeUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const CalendarEventUncheckedUpdateInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attendees: z.lazy(() => CalendarEventAttendeeUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const CalendarEventCreateManyInputSchema: z.ZodType<Prisma.CalendarEventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean().optional(),
  location: z.string().optional().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventUpdateManyMutationInputSchema: z.ZodType<Prisma.CalendarEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeCreateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateInput> = z.object({
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  event: z.lazy(() => CalendarEventCreateNestedOneWithoutAttendeesInputSchema)
}).strict();

export const CalendarEventAttendeeUncheckedCreateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedCreateInput> = z.object({
  eventId: z.string(),
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventAttendeeUpdateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event: z.lazy(() => CalendarEventUpdateOneRequiredWithoutAttendeesNestedInputSchema).optional()
}).strict();

export const CalendarEventAttendeeUncheckedUpdateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedUpdateInput> = z.object({
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeCreateManyInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateManyInput> = z.object({
  eventId: z.string(),
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventAttendeeUpdateManyMutationInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateManyMutationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedUpdateManyInput> = z.object({
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationCreateInputSchema: z.ZodType<Prisma.NotificationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  title: z.string(),
  content: z.string(),
  type: z.lazy(() => NotificationTypeSchema),
  read: z.boolean().optional(),
  actionUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUncheckedCreateInputSchema: z.ZodType<Prisma.NotificationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  title: z.string(),
  content: z.string(),
  type: z.lazy(() => NotificationTypeSchema),
  read: z.boolean().optional(),
  actionUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUpdateInputSchema: z.ZodType<Prisma.NotificationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  actionUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUncheckedUpdateInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  actionUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationCreateManyInputSchema: z.ZodType<Prisma.NotificationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  title: z.string(),
  content: z.string(),
  type: z.lazy(() => NotificationTypeSchema),
  read: z.boolean().optional(),
  actionUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUpdateManyMutationInputSchema: z.ZodType<Prisma.NotificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  actionUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  actionUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmployeeCreateInputSchema: z.ZodType<Prisma.EmployeeCreateInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutEmployeesInputSchema),
  payrolls: z.lazy(() => PayrollCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUncheckedCreateInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payrolls: z.lazy(() => PayrollUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUpdateInputSchema: z.ZodType<Prisma.EmployeeUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutEmployeesNestedInputSchema).optional(),
  payrolls: z.lazy(() => PayrollUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeCreateManyInputSchema: z.ZodType<Prisma.EmployeeCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmployeeUpdateManyMutationInputSchema: z.ZodType<Prisma.EmployeeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmployeeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollCreateInputSchema: z.ZodType<Prisma.PayrollCreateInput> = z.object({
  id: z.string().cuid().optional(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  employee: z.lazy(() => EmployeeCreateNestedOneWithoutPayrollsInputSchema)
}).strict();

export const PayrollUncheckedCreateInputSchema: z.ZodType<Prisma.PayrollUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PayrollUpdateInputSchema: z.ZodType<Prisma.PayrollUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  employee: z.lazy(() => EmployeeUpdateOneRequiredWithoutPayrollsNestedInputSchema).optional()
}).strict();

export const PayrollUncheckedUpdateInputSchema: z.ZodType<Prisma.PayrollUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollCreateManyInputSchema: z.ZodType<Prisma.PayrollCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PayrollUpdateManyMutationInputSchema: z.ZodType<Prisma.PayrollUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PayrollUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffCreateInputSchema: z.ZodType<Prisma.TimeOffCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  employee: z.lazy(() => EmployeeCreateNestedOneWithoutTimeOffInputSchema)
}).strict();

export const TimeOffUncheckedCreateInputSchema: z.ZodType<Prisma.TimeOffUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeOffUpdateInputSchema: z.ZodType<Prisma.TimeOffUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  employee: z.lazy(() => EmployeeUpdateOneRequiredWithoutTimeOffNestedInputSchema).optional()
}).strict();

export const TimeOffUncheckedUpdateInputSchema: z.ZodType<Prisma.TimeOffUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffCreateManyInputSchema: z.ZodType<Prisma.TimeOffCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeOffUpdateManyMutationInputSchema: z.ZodType<Prisma.TimeOffUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TimeOffUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewCreateInputSchema: z.ZodType<Prisma.PerformanceReviewCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  employee: z.lazy(() => EmployeeCreateNestedOneWithoutPerformanceReviewsInputSchema)
}).strict();

export const PerformanceReviewUncheckedCreateInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PerformanceReviewUpdateInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  employee: z.lazy(() => EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInputSchema).optional()
}).strict();

export const PerformanceReviewUncheckedUpdateInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewCreateManyInputSchema: z.ZodType<Prisma.PerformanceReviewCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  employeeId: z.string(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PerformanceReviewUpdateManyMutationInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  employeeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MarketingCampaignCreateInputSchema: z.ZodType<Prisma.MarketingCampaignCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCampaignsInputSchema),
  emailCampaigns: z.lazy(() => EmailCampaignCreateNestedManyWithoutCampaignInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedCreateInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedCreateNestedManyWithoutCampaignInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignUpdateInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCampaignsNestedInputSchema).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUpdateManyWithoutCampaignNestedInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedUpdateInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignCreateManyInputSchema: z.ZodType<Prisma.MarketingCampaignCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MarketingCampaignUpdateManyMutationInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MarketingCampaignUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignCreateInputSchema: z.ZodType<Prisma.EmailCampaignCreateInput> = z.object({
  id: z.string().cuid().optional(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  campaign: z.lazy(() => MarketingCampaignCreateNestedOneWithoutEmailCampaignsInputSchema)
}).strict();

export const EmailCampaignUncheckedCreateInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  campaignId: z.string(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmailCampaignUpdateInputSchema: z.ZodType<Prisma.EmailCampaignUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  campaign: z.lazy(() => MarketingCampaignUpdateOneRequiredWithoutEmailCampaignsNestedInputSchema).optional()
}).strict();

export const EmailCampaignUncheckedUpdateInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campaignId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignCreateManyInputSchema: z.ZodType<Prisma.EmailCampaignCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  campaignId: z.string(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmailCampaignUpdateManyMutationInputSchema: z.ZodType<Prisma.EmailCampaignUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campaignId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostCreateInputSchema: z.ZodType<Prisma.SocialMediaPostCreateInput> = z.object({
  id: z.string().cuid().optional(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  campaign: z.lazy(() => MarketingCampaignCreateNestedOneWithoutSocialPostsInputSchema)
}).strict();

export const SocialMediaPostUncheckedCreateInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  campaignId: z.string(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SocialMediaPostUpdateInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  campaign: z.lazy(() => MarketingCampaignUpdateOneRequiredWithoutSocialPostsNestedInputSchema).optional()
}).strict();

export const SocialMediaPostUncheckedUpdateInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campaignId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostCreateManyInputSchema: z.ZodType<Prisma.SocialMediaPostCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  campaignId: z.string(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SocialMediaPostUpdateManyMutationInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  campaignId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationCreateInputSchema: z.ZodType<Prisma.VerificationCreateInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateInputSchema: z.ZodType<Prisma.VerificationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationCreateManyInputSchema: z.ZodType<Prisma.VerificationCreateManyInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FinancialReportCreateInputSchema: z.ZodType<Prisma.FinancialReportCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFinancialReportsInputSchema),
  reportData: z.lazy(() => FinancialReportDataCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUncheckedCreateInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUpdateInputSchema: z.ZodType<Prisma.FinancialReportUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInputSchema).optional(),
  reportData: z.lazy(() => FinancialReportDataUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportCreateManyInputSchema: z.ZodType<Prisma.FinancialReportCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportUpdateManyMutationInputSchema: z.ZodType<Prisma.FinancialReportUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataCreateInputSchema: z.ZodType<Prisma.FinancialReportDataCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  report: z.lazy(() => FinancialReportCreateNestedOneWithoutReportDataInputSchema)
}).strict();

export const FinancialReportDataUncheckedCreateInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FinancialReportDataUpdateInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  report: z.lazy(() => FinancialReportUpdateOneRequiredWithoutReportDataNestedInputSchema).optional()
}).strict();

export const FinancialReportDataUncheckedUpdateInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataCreateManyInputSchema: z.ZodType<Prisma.FinancialReportDataCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FinancialReportDataUpdateManyMutationInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportCreateInputSchema: z.ZodType<Prisma.FinancialReportExportCreateInput> = z.object({
  id: z.string().cuid().optional(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  report: z.lazy(() => FinancialReportCreateNestedOneWithoutExportsInputSchema)
}).strict();

export const FinancialReportExportUncheckedCreateInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportExportUpdateInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  report: z.lazy(() => FinancialReportUpdateOneRequiredWithoutExportsNestedInputSchema).optional()
}).strict();

export const FinancialReportExportUncheckedUpdateInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportCreateManyInputSchema: z.ZodType<Prisma.FinancialReportExportCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportExportUpdateManyMutationInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleCreateInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateInput> = z.object({
  id: z.string().cuid().optional(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  report: z.lazy(() => FinancialReportCreateNestedOneWithoutSchedulesInputSchema)
}).strict();

export const FinancialReportScheduleUncheckedCreateInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportScheduleUpdateInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  report: z.lazy(() => FinancialReportUpdateOneRequiredWithoutSchedulesNestedInputSchema).optional()
}).strict();

export const FinancialReportScheduleUncheckedUpdateInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleCreateManyInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  reportId: z.string(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportScheduleUpdateManyMutationInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reportId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const RolePermissionListRelationFilterSchema: z.ZodType<Prisma.RolePermissionListRelationFilter> = z.object({
  every: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  some: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  none: z.lazy(() => RolePermissionWhereInputSchema).optional()
}).strict();

export const CustomRolePermissionListRelationFilterSchema: z.ZodType<Prisma.CustomRolePermissionListRelationFilter> = z.object({
  every: z.lazy(() => CustomRolePermissionWhereInputSchema).optional(),
  some: z.lazy(() => CustomRolePermissionWhereInputSchema).optional(),
  none: z.lazy(() => CustomRolePermissionWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const RolePermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RolePermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRolePermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomRolePermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const EnumUserRoleFilterSchema: z.ZodType<Prisma.EnumUserRoleFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleFilterSchema) ]).optional(),
}).strict();

export const PermissionRelationFilterSchema: z.ZodType<Prisma.PermissionRelationFilter> = z.object({
  is: z.lazy(() => PermissionWhereInputSchema).optional(),
  isNot: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const RolePermissionRolePermissionIdCompoundUniqueInputSchema: z.ZodType<Prisma.RolePermissionRolePermissionIdCompoundUniqueInput> = z.object({
  role: z.lazy(() => UserRoleSchema),
  permissionId: z.string()
}).strict();

export const RolePermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const OrganizationRelationFilterSchema: z.ZodType<Prisma.OrganizationRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const UserOrganizationListRelationFilterSchema: z.ZodType<Prisma.UserOrganizationListRelationFilter> = z.object({
  every: z.lazy(() => UserOrganizationWhereInputSchema).optional(),
  some: z.lazy(() => UserOrganizationWhereInputSchema).optional(),
  none: z.lazy(() => UserOrganizationWhereInputSchema).optional()
}).strict();

export const UserOrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRoleOrganizationIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.CustomRoleOrganizationIdNameCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  name: z.string()
}).strict();

export const CustomRoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const CustomRoleRelationFilterSchema: z.ZodType<Prisma.CustomRoleRelationFilter> = z.object({
  is: z.lazy(() => CustomRoleWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomRoleWhereInputSchema).optional()
}).strict();

export const CustomRolePermissionCustomRoleIdPermissionIdCompoundUniqueInputSchema: z.ZodType<Prisma.CustomRolePermissionCustomRoleIdPermissionIdCompoundUniqueInput> = z.object({
  customRoleId: z.string(),
  permissionId: z.string()
}).strict();

export const CustomRolePermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRolePermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRolePermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRolePermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRolePermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomRolePermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerListRelationFilterSchema: z.ZodType<Prisma.CustomerListRelationFilter> = z.object({
  every: z.lazy(() => CustomerWhereInputSchema).optional(),
  some: z.lazy(() => CustomerWhereInputSchema).optional(),
  none: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const ProjectListRelationFilterSchema: z.ZodType<Prisma.ProjectListRelationFilter> = z.object({
  every: z.lazy(() => ProjectWhereInputSchema).optional(),
  some: z.lazy(() => ProjectWhereInputSchema).optional(),
  none: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const TaskListRelationFilterSchema: z.ZodType<Prisma.TaskListRelationFilter> = z.object({
  every: z.lazy(() => TaskWhereInputSchema).optional(),
  some: z.lazy(() => TaskWhereInputSchema).optional(),
  none: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const InvoiceListRelationFilterSchema: z.ZodType<Prisma.InvoiceListRelationFilter> = z.object({
  every: z.lazy(() => InvoiceWhereInputSchema).optional(),
  some: z.lazy(() => InvoiceWhereInputSchema).optional(),
  none: z.lazy(() => InvoiceWhereInputSchema).optional()
}).strict();

export const ExpenseListRelationFilterSchema: z.ZodType<Prisma.ExpenseListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ExpenseCategoryListRelationFilterSchema: z.ZodType<Prisma.ExpenseCategoryListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseCategoryWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseCategoryWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseCategoryWhereInputSchema).optional()
}).strict();

export const ExpenseTagListRelationFilterSchema: z.ZodType<Prisma.ExpenseTagListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseTagWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseTagWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseTagWhereInputSchema).optional()
}).strict();

export const EmployeeListRelationFilterSchema: z.ZodType<Prisma.EmployeeListRelationFilter> = z.object({
  every: z.lazy(() => EmployeeWhereInputSchema).optional(),
  some: z.lazy(() => EmployeeWhereInputSchema).optional(),
  none: z.lazy(() => EmployeeWhereInputSchema).optional()
}).strict();

export const MarketingCampaignListRelationFilterSchema: z.ZodType<Prisma.MarketingCampaignListRelationFilter> = z.object({
  every: z.lazy(() => MarketingCampaignWhereInputSchema).optional(),
  some: z.lazy(() => MarketingCampaignWhereInputSchema).optional(),
  none: z.lazy(() => MarketingCampaignWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const CustomRoleListRelationFilterSchema: z.ZodType<Prisma.CustomRoleListRelationFilter> = z.object({
  every: z.lazy(() => CustomRoleWhereInputSchema).optional(),
  some: z.lazy(() => CustomRoleWhereInputSchema).optional(),
  none: z.lazy(() => CustomRoleWhereInputSchema).optional()
}).strict();

export const FinancialReportListRelationFilterSchema: z.ZodType<Prisma.FinancialReportListRelationFilter> = z.object({
  every: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  some: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  none: z.lazy(() => FinancialReportWhereInputSchema).optional()
}).strict();

export const CustomerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvoiceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseCategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseCategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseTagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseTagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmployeeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EmployeeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomRoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomRoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FinancialReportOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  website: z.lazy(() => SortOrderSchema).optional(),
  industry: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleNullableFilterSchema: z.ZodType<Prisma.EnumUserRoleNullableFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional().nullable(),
  in: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const CustomRoleNullableRelationFilterSchema: z.ZodType<Prisma.CustomRoleNullableRelationFilter> = z.object({
  is: z.lazy(() => CustomRoleWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CustomRoleWhereInputSchema).optional().nullable()
}).strict();

export const UserOrganizationUserIdOrganizationIdCompoundUniqueInputSchema: z.ZodType<Prisma.UserOrganizationUserIdOrganizationIdCompoundUniqueInput> = z.object({
  userId: z.string(),
  organizationId: z.string()
}).strict();

export const UserOrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserOrganizationCountOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  joinedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserOrganizationMaxOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  joinedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserOrganizationMinOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  customRoleId: z.lazy(() => SortOrderSchema).optional(),
  joinedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRoleNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional().nullable(),
  in: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleNullableFilterSchema).optional()
}).strict();

export const EnumCustomerTypeFilterSchema: z.ZodType<Prisma.EnumCustomerTypeFilter> = z.object({
  equals: z.lazy(() => CustomerTypeSchema).optional(),
  in: z.lazy(() => CustomerTypeSchema).array().optional(),
  notIn: z.lazy(() => CustomerTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => NestedEnumCustomerTypeFilterSchema) ]).optional(),
}).strict();

export const EnumLeadStatusNullableFilterSchema: z.ZodType<Prisma.EnumLeadStatusNullableFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional().nullable(),
  in: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumLeadSourceNullableFilterSchema: z.ZodType<Prisma.EnumLeadSourceNullableFilter> = z.object({
  equals: z.lazy(() => LeadSourceSchema).optional().nullable(),
  in: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NestedEnumLeadSourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const CustomerInteractionListRelationFilterSchema: z.ZodType<Prisma.CustomerInteractionListRelationFilter> = z.object({
  every: z.lazy(() => CustomerInteractionWhereInputSchema).optional(),
  some: z.lazy(() => CustomerInteractionWhereInputSchema).optional(),
  none: z.lazy(() => CustomerInteractionWhereInputSchema).optional()
}).strict();

export const DealListRelationFilterSchema: z.ZodType<Prisma.DealListRelationFilter> = z.object({
  every: z.lazy(() => DealWhereInputSchema).optional(),
  some: z.lazy(() => DealWhereInputSchema).optional(),
  none: z.lazy(() => DealWhereInputSchema).optional()
}).strict();

export const CustomerInteractionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomerInteractionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DealOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DealOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  company: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumCustomerTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCustomerTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CustomerTypeSchema).optional(),
  in: z.lazy(() => CustomerTypeSchema).array().optional(),
  notIn: z.lazy(() => CustomerTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => NestedEnumCustomerTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCustomerTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCustomerTypeFilterSchema).optional()
}).strict();

export const EnumLeadStatusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLeadStatusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional().nullable(),
  in: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadStatusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadStatusNullableFilterSchema).optional()
}).strict();

export const EnumLeadSourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLeadSourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadSourceSchema).optional().nullable(),
  in: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NestedEnumLeadSourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadSourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadSourceNullableFilterSchema).optional()
}).strict();

export const EnumInteractionTypeFilterSchema: z.ZodType<Prisma.EnumInteractionTypeFilter> = z.object({
  equals: z.lazy(() => InteractionTypeSchema).optional(),
  in: z.lazy(() => InteractionTypeSchema).array().optional(),
  notIn: z.lazy(() => InteractionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => NestedEnumInteractionTypeFilterSchema) ]).optional(),
}).strict();

export const EnumInteractionMediumFilterSchema: z.ZodType<Prisma.EnumInteractionMediumFilter> = z.object({
  equals: z.lazy(() => InteractionMediumSchema).optional(),
  in: z.lazy(() => InteractionMediumSchema).array().optional(),
  notIn: z.lazy(() => InteractionMediumSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => NestedEnumInteractionMediumFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const CustomerRelationFilterSchema: z.ZodType<Prisma.CustomerRelationFilter> = z.object({
  is: z.lazy(() => CustomerWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerInteractionCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerInteractionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  medium: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerInteractionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerInteractionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  medium: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerInteractionMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerInteractionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  medium: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumInteractionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumInteractionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InteractionTypeSchema).optional(),
  in: z.lazy(() => InteractionTypeSchema).array().optional(),
  notIn: z.lazy(() => InteractionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => NestedEnumInteractionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInteractionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInteractionTypeFilterSchema).optional()
}).strict();

export const EnumInteractionMediumWithAggregatesFilterSchema: z.ZodType<Prisma.EnumInteractionMediumWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InteractionMediumSchema).optional(),
  in: z.lazy(() => InteractionMediumSchema).array().optional(),
  notIn: z.lazy(() => InteractionMediumSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => NestedEnumInteractionMediumWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInteractionMediumFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInteractionMediumFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const EnumLeadStatusFilterSchema: z.ZodType<Prisma.EnumLeadStatusFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional(),
  in: z.lazy(() => LeadStatusSchema).array().optional(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusFilterSchema) ]).optional(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DealCountOrderByAggregateInputSchema: z.ZodType<Prisma.DealCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.lazy(() => SortOrderSchema).optional(),
  expectedCloseDate: z.lazy(() => SortOrderSchema).optional(),
  actualCloseDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DealAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DealAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DealMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DealMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.lazy(() => SortOrderSchema).optional(),
  expectedCloseDate: z.lazy(() => SortOrderSchema).optional(),
  actualCloseDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DealMinOrderByAggregateInputSchema: z.ZodType<Prisma.DealMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.lazy(() => SortOrderSchema).optional(),
  expectedCloseDate: z.lazy(() => SortOrderSchema).optional(),
  actualCloseDate: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DealSumOrderByAggregateInputSchema: z.ZodType<Prisma.DealSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  stage: z.lazy(() => SortOrderSchema).optional(),
  probability: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const EnumLeadStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLeadStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional(),
  in: z.lazy(() => LeadStatusSchema).array().optional(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadStatusFilterSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const EnumProjectStatusFilterSchema: z.ZodType<Prisma.EnumProjectStatusFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusFilterSchema) ]).optional(),
}).strict();

export const DecimalNullableFilterSchema: z.ZodType<Prisma.DecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ProjectResourceListRelationFilterSchema: z.ZodType<Prisma.ProjectResourceListRelationFilter> = z.object({
  every: z.lazy(() => ProjectResourceWhereInputSchema).optional(),
  some: z.lazy(() => ProjectResourceWhereInputSchema).optional(),
  none: z.lazy(() => ProjectResourceWhereInputSchema).optional()
}).strict();

export const TimeEntryListRelationFilterSchema: z.ZodType<Prisma.TimeEntryListRelationFilter> = z.object({
  every: z.lazy(() => TimeEntryWhereInputSchema).optional(),
  some: z.lazy(() => TimeEntryWhereInputSchema).optional(),
  none: z.lazy(() => TimeEntryWhereInputSchema).optional()
}).strict();

export const ProjectResourceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectResourceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeEntryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TimeEntryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectAvgOrderByAggregateInput> = z.object({
  budget: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectSumOrderByAggregateInput> = z.object({
  budget: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumProjectStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumProjectStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional()
}).strict();

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const EnumTaskStatusFilterSchema: z.ZodType<Prisma.EnumTaskStatusFilter> = z.object({
  equals: z.lazy(() => TaskStatusSchema).optional(),
  in: z.lazy(() => TaskStatusSchema).array().optional(),
  notIn: z.lazy(() => TaskStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => NestedEnumTaskStatusFilterSchema) ]).optional(),
}).strict();

export const EnumPriorityFilterSchema: z.ZodType<Prisma.EnumPriorityFilter> = z.object({
  equals: z.lazy(() => PrioritySchema).optional(),
  in: z.lazy(() => PrioritySchema).array().optional(),
  notIn: z.lazy(() => PrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => NestedEnumPriorityFilterSchema) ]).optional(),
}).strict();

export const ProjectNullableRelationFilterSchema: z.ZodType<Prisma.ProjectNullableRelationFilter> = z.object({
  is: z.lazy(() => ProjectWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProjectWhereInputSchema).optional().nullable()
}).strict();

export const TaskNullableRelationFilterSchema: z.ZodType<Prisma.TaskNullableRelationFilter> = z.object({
  is: z.lazy(() => TaskWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaskWhereInputSchema).optional().nullable()
}).strict();

export const CommentListRelationFilterSchema: z.ZodType<Prisma.CommentListRelationFilter> = z.object({
  every: z.lazy(() => CommentWhereInputSchema).optional(),
  some: z.lazy(() => CommentWhereInputSchema).optional(),
  none: z.lazy(() => CommentWhereInputSchema).optional()
}).strict();

export const AttachmentListRelationFilterSchema: z.ZodType<Prisma.AttachmentListRelationFilter> = z.object({
  every: z.lazy(() => AttachmentWhereInputSchema).optional(),
  some: z.lazy(() => AttachmentWhereInputSchema).optional(),
  none: z.lazy(() => AttachmentWhereInputSchema).optional()
}).strict();

export const CustomerInteractionNullableRelationFilterSchema: z.ZodType<Prisma.CustomerInteractionNullableRelationFilter> = z.object({
  is: z.lazy(() => CustomerInteractionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CustomerInteractionWhereInputSchema).optional().nullable()
}).strict();

export const CommentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CommentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AttachmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  parentTaskId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  estimatedHours: z.lazy(() => SortOrderSchema).optional(),
  actualHours: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerInteractionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TaskAvgOrderByAggregateInput> = z.object({
  estimatedHours: z.lazy(() => SortOrderSchema).optional(),
  actualHours: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  parentTaskId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  estimatedHours: z.lazy(() => SortOrderSchema).optional(),
  actualHours: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerInteractionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  parentTaskId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  estimatedHours: z.lazy(() => SortOrderSchema).optional(),
  actualHours: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerInteractionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskSumOrderByAggregateInputSchema: z.ZodType<Prisma.TaskSumOrderByAggregateInput> = z.object({
  estimatedHours: z.lazy(() => SortOrderSchema).optional(),
  actualHours: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTaskStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTaskStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TaskStatusSchema).optional(),
  in: z.lazy(() => TaskStatusSchema).array().optional(),
  notIn: z.lazy(() => TaskStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => NestedEnumTaskStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTaskStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTaskStatusFilterSchema).optional()
}).strict();

export const EnumPriorityWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PrioritySchema).optional(),
  in: z.lazy(() => PrioritySchema).array().optional(),
  notIn: z.lazy(() => PrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => NestedEnumPriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPriorityFilterSchema).optional()
}).strict();

export const ProjectRelationFilterSchema: z.ZodType<Prisma.ProjectRelationFilter> = z.object({
  is: z.lazy(() => ProjectWhereInputSchema).optional(),
  isNot: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectResourceProjectIdAssigneeIdCompoundUniqueInputSchema: z.ZodType<Prisma.ProjectResourceProjectIdAssigneeIdCompoundUniqueInput> = z.object({
  projectId: z.string(),
  assigneeId: z.string()
}).strict();

export const ProjectResourceCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectResourceCountOrderByAggregateInput> = z.object({
  projectId: z.lazy(() => SortOrderSchema).optional(),
  assigneeId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  allocation: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  hourlyRate: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectResourceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectResourceAvgOrderByAggregateInput> = z.object({
  allocation: z.lazy(() => SortOrderSchema).optional(),
  hourlyRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectResourceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectResourceMaxOrderByAggregateInput> = z.object({
  projectId: z.lazy(() => SortOrderSchema).optional(),
  assigneeId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  allocation: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  hourlyRate: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectResourceMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectResourceMinOrderByAggregateInput> = z.object({
  projectId: z.lazy(() => SortOrderSchema).optional(),
  assigneeId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  allocation: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  hourlyRate: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectResourceSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectResourceSumOrderByAggregateInput> = z.object({
  allocation: z.lazy(() => SortOrderSchema).optional(),
  hourlyRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const TimeEntryCountOrderByAggregateInputSchema: z.ZodType<Prisma.TimeEntryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  billable: z.lazy(() => SortOrderSchema).optional(),
  invoiced: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeEntryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TimeEntryAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeEntryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TimeEntryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  billable: z.lazy(() => SortOrderSchema).optional(),
  invoiced: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeEntryMinOrderByAggregateInputSchema: z.ZodType<Prisma.TimeEntryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  billable: z.lazy(() => SortOrderSchema).optional(),
  invoiced: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeEntrySumOrderByAggregateInputSchema: z.ZodType<Prisma.TimeEntrySumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const EnumInvoiceStatusFilterSchema: z.ZodType<Prisma.EnumInvoiceStatusFilter> = z.object({
  equals: z.lazy(() => InvoiceStatusSchema).optional(),
  in: z.lazy(() => InvoiceStatusSchema).array().optional(),
  notIn: z.lazy(() => InvoiceStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => NestedEnumInvoiceStatusFilterSchema) ]).optional(),
}).strict();

export const InvoiceItemListRelationFilterSchema: z.ZodType<Prisma.InvoiceItemListRelationFilter> = z.object({
  every: z.lazy(() => InvoiceItemWhereInputSchema).optional(),
  some: z.lazy(() => InvoiceItemWhereInputSchema).optional(),
  none: z.lazy(() => InvoiceItemWhereInputSchema).optional()
}).strict();

export const PaymentListRelationFilterSchema: z.ZodType<Prisma.PaymentListRelationFilter> = z.object({
  every: z.lazy(() => PaymentWhereInputSchema).optional(),
  some: z.lazy(() => PaymentWhereInputSchema).optional(),
  none: z.lazy(() => PaymentWhereInputSchema).optional()
}).strict();

export const InvoiceItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvoiceItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PaymentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceOrganizationIdInvoiceNumberCompoundUniqueInputSchema: z.ZodType<Prisma.InvoiceOrganizationIdInvoiceNumberCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  invoiceNumber: z.string()
}).strict();

export const InvoiceCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  customerEmail: z.lazy(() => SortOrderSchema).optional(),
  customerName: z.lazy(() => SortOrderSchema).optional(),
  customerAddress: z.lazy(() => SortOrderSchema).optional(),
  customerPhone: z.lazy(() => SortOrderSchema).optional(),
  invoiceNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  issueDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  paymentTerms: z.lazy(() => SortOrderSchema).optional(),
  poNumber: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  internalNotes: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  footer: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  viewedAt: z.lazy(() => SortOrderSchema).optional(),
  lastReminder: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceAvgOrderByAggregateInput> = z.object({
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  customerEmail: z.lazy(() => SortOrderSchema).optional(),
  customerName: z.lazy(() => SortOrderSchema).optional(),
  customerAddress: z.lazy(() => SortOrderSchema).optional(),
  customerPhone: z.lazy(() => SortOrderSchema).optional(),
  invoiceNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  issueDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  paymentTerms: z.lazy(() => SortOrderSchema).optional(),
  poNumber: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  internalNotes: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  footer: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  viewedAt: z.lazy(() => SortOrderSchema).optional(),
  lastReminder: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  customerEmail: z.lazy(() => SortOrderSchema).optional(),
  customerName: z.lazy(() => SortOrderSchema).optional(),
  customerAddress: z.lazy(() => SortOrderSchema).optional(),
  customerPhone: z.lazy(() => SortOrderSchema).optional(),
  invoiceNumber: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  issueDate: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  paymentTerms: z.lazy(() => SortOrderSchema).optional(),
  poNumber: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  internalNotes: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  footer: z.lazy(() => SortOrderSchema).optional(),
  logoUrl: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  viewedAt: z.lazy(() => SortOrderSchema).optional(),
  lastReminder: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceSumOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceSumOrderByAggregateInput> = z.object({
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  taxAmount: z.lazy(() => SortOrderSchema).optional(),
  discountAmount: z.lazy(() => SortOrderSchema).optional(),
  shippingAmount: z.lazy(() => SortOrderSchema).optional(),
  totalAmount: z.lazy(() => SortOrderSchema).optional(),
  paidAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumInvoiceStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumInvoiceStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InvoiceStatusSchema).optional(),
  in: z.lazy(() => InvoiceStatusSchema).array().optional(),
  notIn: z.lazy(() => InvoiceStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => NestedEnumInvoiceStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvoiceStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvoiceStatusFilterSchema).optional()
}).strict();

export const InvoiceRelationFilterSchema: z.ZodType<Prisma.InvoiceRelationFilter> = z.object({
  is: z.lazy(() => InvoiceWhereInputSchema).optional(),
  isNot: z.lazy(() => InvoiceWhereInputSchema).optional()
}).strict();

export const InvoiceItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceItemAvgOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvoiceItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.InvoiceItemSumOrderByAggregateInput> = z.object({
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unitPrice: z.lazy(() => SortOrderSchema).optional(),
  taxRate: z.lazy(() => SortOrderSchema).optional(),
  discountRate: z.lazy(() => SortOrderSchema).optional(),
  subtotal: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPaymentMethodFilterSchema: z.ZodType<Prisma.EnumPaymentMethodFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional(),
  in: z.lazy(() => PaymentMethodSchema).array().optional(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodFilterSchema) ]).optional(),
}).strict();

export const EnumPaymentStatusFilterSchema: z.ZodType<Prisma.EnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const PaymentCountOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  paymentDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  gatewayId: z.lazy(() => SortOrderSchema).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  paymentDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  gatewayId: z.lazy(() => SortOrderSchema).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentMinOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  invoiceId: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  paymentDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  gatewayId: z.lazy(() => SortOrderSchema).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentSumOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  feeAmount: z.lazy(() => SortOrderSchema).optional(),
  refundedAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPaymentMethodWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentMethodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional(),
  in: z.lazy(() => PaymentMethodSchema).array().optional(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentMethodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentMethodFilterSchema).optional()
}).strict();

export const EnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const EnumExpenseStatusFilterSchema: z.ZodType<Prisma.EnumExpenseStatusFilter> = z.object({
  equals: z.lazy(() => ExpenseStatusSchema).optional(),
  in: z.lazy(() => ExpenseStatusSchema).array().optional(),
  notIn: z.lazy(() => ExpenseStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => NestedEnumExpenseStatusFilterSchema) ]).optional(),
}).strict();

export const ExpenseCategoryNullableRelationFilterSchema: z.ZodType<Prisma.ExpenseCategoryNullableRelationFilter> = z.object({
  is: z.lazy(() => ExpenseCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ExpenseCategoryWhereInputSchema).optional().nullable()
}).strict();

export const ExpenseToTagListRelationFilterSchema: z.ZodType<Prisma.ExpenseToTagListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseToTagWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseToTagWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseToTagWhereInputSchema).optional()
}).strict();

export const ExpenseToTagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseToTagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  customCategory: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  receipt: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reimbursable: z.lazy(() => SortOrderSchema).optional(),
  reimbursed: z.lazy(() => SortOrderSchema).optional(),
  reimbursedAt: z.lazy(() => SortOrderSchema).optional(),
  submittedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectionReason: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  customCategory: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  receipt: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reimbursable: z.lazy(() => SortOrderSchema).optional(),
  reimbursed: z.lazy(() => SortOrderSchema).optional(),
  reimbursedAt: z.lazy(() => SortOrderSchema).optional(),
  submittedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectionReason: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  customCategory: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  receipt: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => SortOrderSchema).optional(),
  paymentMethod: z.lazy(() => SortOrderSchema).optional(),
  projectId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reimbursable: z.lazy(() => SortOrderSchema).optional(),
  reimbursed: z.lazy(() => SortOrderSchema).optional(),
  reimbursedAt: z.lazy(() => SortOrderSchema).optional(),
  submittedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectedAt: z.lazy(() => SortOrderSchema).optional(),
  rejectionReason: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumExpenseStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumExpenseStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExpenseStatusSchema).optional(),
  in: z.lazy(() => ExpenseStatusSchema).array().optional(),
  notIn: z.lazy(() => ExpenseStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => NestedEnumExpenseStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExpenseStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExpenseStatusFilterSchema).optional()
}).strict();

export const ExpenseCategoryOrganizationIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.ExpenseCategoryOrganizationIdNameCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  name: z.string()
}).strict();

export const ExpenseCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseTagOrganizationIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.ExpenseTagOrganizationIdNameCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  name: z.string()
}).strict();

export const ExpenseTagCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseTagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseTagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseTagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseTagMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseTagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseRelationFilterSchema: z.ZodType<Prisma.ExpenseRelationFilter> = z.object({
  is: z.lazy(() => ExpenseWhereInputSchema).optional(),
  isNot: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ExpenseTagRelationFilterSchema: z.ZodType<Prisma.ExpenseTagRelationFilter> = z.object({
  is: z.lazy(() => ExpenseTagWhereInputSchema).optional(),
  isNot: z.lazy(() => ExpenseTagWhereInputSchema).optional()
}).strict();

export const ExpenseToTagExpenseIdTagIdCompoundUniqueInputSchema: z.ZodType<Prisma.ExpenseToTagExpenseIdTagIdCompoundUniqueInput> = z.object({
  expenseId: z.string(),
  tagId: z.string()
}).strict();

export const ExpenseToTagCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseToTagCountOrderByAggregateInput> = z.object({
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseToTagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseToTagMaxOrderByAggregateInput> = z.object({
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseToTagMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseToTagMinOrderByAggregateInput> = z.object({
  expenseId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskRelationFilterSchema: z.ZodType<Prisma.TaskRelationFilter> = z.object({
  is: z.lazy(() => TaskWhereInputSchema).optional(),
  isNot: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const CommentCountOrderByAggregateInputSchema: z.ZodType<Prisma.CommentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  authorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CommentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CommentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  authorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CommentMinOrderByAggregateInputSchema: z.ZodType<Prisma.CommentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  authorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileType: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  uploadedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentAvgOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileType: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  uploadedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileType: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  uploadedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentSumOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventAttendeeListRelationFilterSchema: z.ZodType<Prisma.CalendarEventAttendeeListRelationFilter> = z.object({
  every: z.lazy(() => CalendarEventAttendeeWhereInputSchema).optional(),
  some: z.lazy(() => CalendarEventAttendeeWhereInputSchema).optional(),
  none: z.lazy(() => CalendarEventAttendeeWhereInputSchema).optional()
}).strict();

export const CalendarEventAttendeeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  organizerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  organizerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  allDay: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  organizerId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumAttendeeStatusFilterSchema: z.ZodType<Prisma.EnumAttendeeStatusFilter> = z.object({
  equals: z.lazy(() => AttendeeStatusSchema).optional(),
  in: z.lazy(() => AttendeeStatusSchema).array().optional(),
  notIn: z.lazy(() => AttendeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => NestedEnumAttendeeStatusFilterSchema) ]).optional(),
}).strict();

export const CalendarEventRelationFilterSchema: z.ZodType<Prisma.CalendarEventRelationFilter> = z.object({
  is: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  isNot: z.lazy(() => CalendarEventWhereInputSchema).optional()
}).strict();

export const CalendarEventAttendeeEventIdUserIdCompoundUniqueInputSchema: z.ZodType<Prisma.CalendarEventAttendeeEventIdUserIdCompoundUniqueInput> = z.object({
  eventId: z.string(),
  userId: z.string()
}).strict();

export const CalendarEventAttendeeCountOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCountOrderByAggregateInput> = z.object({
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventAttendeeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeMaxOrderByAggregateInput> = z.object({
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CalendarEventAttendeeMinOrderByAggregateInputSchema: z.ZodType<Prisma.CalendarEventAttendeeMinOrderByAggregateInput> = z.object({
  eventId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumAttendeeStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAttendeeStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AttendeeStatusSchema).optional(),
  in: z.lazy(() => AttendeeStatusSchema).array().optional(),
  notIn: z.lazy(() => AttendeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => NestedEnumAttendeeStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAttendeeStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAttendeeStatusFilterSchema).optional()
}).strict();

export const EnumNotificationTypeFilterSchema: z.ZodType<Prisma.EnumNotificationTypeFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeFilterSchema) ]).optional(),
}).strict();

export const NotificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  actionUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  actionUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  actionUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumNotificationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumNotificationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional()
}).strict();

export const EnumInvitationStatusFilterSchema: z.ZodType<Prisma.EnumInvitationStatusFilter> = z.object({
  equals: z.lazy(() => InvitationStatusSchema).optional(),
  in: z.lazy(() => InvitationStatusSchema).array().optional(),
  notIn: z.lazy(() => InvitationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => NestedEnumInvitationStatusFilterSchema) ]).optional(),
}).strict();

export const InvitationOrganizationIdEmailCompoundUniqueInputSchema: z.ZodType<Prisma.InvitationOrganizationIdEmailCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  email: z.string()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  acceptedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  acceptedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  acceptedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumInvitationStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumInvitationStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InvitationStatusSchema).optional(),
  in: z.lazy(() => InvitationStatusSchema).array().optional(),
  notIn: z.lazy(() => InvitationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => NestedEnumInvitationStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvitationStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvitationStatusFilterSchema).optional()
}).strict();

export const EnumEmployeeStatusFilterSchema: z.ZodType<Prisma.EnumEmployeeStatusFilter> = z.object({
  equals: z.lazy(() => EmployeeStatusSchema).optional(),
  in: z.lazy(() => EmployeeStatusSchema).array().optional(),
  notIn: z.lazy(() => EmployeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => NestedEnumEmployeeStatusFilterSchema) ]).optional(),
}).strict();

export const PayrollListRelationFilterSchema: z.ZodType<Prisma.PayrollListRelationFilter> = z.object({
  every: z.lazy(() => PayrollWhereInputSchema).optional(),
  some: z.lazy(() => PayrollWhereInputSchema).optional(),
  none: z.lazy(() => PayrollWhereInputSchema).optional()
}).strict();

export const TimeOffListRelationFilterSchema: z.ZodType<Prisma.TimeOffListRelationFilter> = z.object({
  every: z.lazy(() => TimeOffWhereInputSchema).optional(),
  some: z.lazy(() => TimeOffWhereInputSchema).optional(),
  none: z.lazy(() => TimeOffWhereInputSchema).optional()
}).strict();

export const PerformanceReviewListRelationFilterSchema: z.ZodType<Prisma.PerformanceReviewListRelationFilter> = z.object({
  every: z.lazy(() => PerformanceReviewWhereInputSchema).optional(),
  some: z.lazy(() => PerformanceReviewWhereInputSchema).optional(),
  none: z.lazy(() => PerformanceReviewWhereInputSchema).optional()
}).strict();

export const PayrollOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PayrollOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeOffOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TimeOffOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceReviewOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmployeeCountOrderByAggregateInputSchema: z.ZodType<Prisma.EmployeeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => SortOrderSchema).optional(),
  hireDate: z.lazy(() => SortOrderSchema).optional(),
  terminationDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  managerId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  birthDate: z.lazy(() => SortOrderSchema).optional(),
  taxId: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactName: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactPhone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmployeeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EmployeeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => SortOrderSchema).optional(),
  hireDate: z.lazy(() => SortOrderSchema).optional(),
  terminationDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  managerId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  birthDate: z.lazy(() => SortOrderSchema).optional(),
  taxId: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactName: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactPhone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmployeeMinOrderByAggregateInputSchema: z.ZodType<Prisma.EmployeeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  position: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => SortOrderSchema).optional(),
  hireDate: z.lazy(() => SortOrderSchema).optional(),
  terminationDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  managerId: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  birthDate: z.lazy(() => SortOrderSchema).optional(),
  taxId: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactName: z.lazy(() => SortOrderSchema).optional(),
  emergencyContactPhone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEmployeeStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEmployeeStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EmployeeStatusSchema).optional(),
  in: z.lazy(() => EmployeeStatusSchema).array().optional(),
  notIn: z.lazy(() => EmployeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => NestedEnumEmployeeStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEmployeeStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEmployeeStatusFilterSchema).optional()
}).strict();

export const EnumPayrollStatusFilterSchema: z.ZodType<Prisma.EnumPayrollStatusFilter> = z.object({
  equals: z.lazy(() => PayrollStatusSchema).optional(),
  in: z.lazy(() => PayrollStatusSchema).array().optional(),
  notIn: z.lazy(() => PayrollStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => NestedEnumPayrollStatusFilterSchema) ]).optional(),
}).strict();

export const EmployeeRelationFilterSchema: z.ZodType<Prisma.EmployeeRelationFilter> = z.object({
  is: z.lazy(() => EmployeeWhereInputSchema).optional(),
  isNot: z.lazy(() => EmployeeWhereInputSchema).optional()
}).strict();

export const PayrollCountOrderByAggregateInputSchema: z.ZodType<Prisma.PayrollCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  payPeriodStart: z.lazy(() => SortOrderSchema).optional(),
  payPeriodEnd: z.lazy(() => SortOrderSchema).optional(),
  payDate: z.lazy(() => SortOrderSchema).optional(),
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayrollAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PayrollAvgOrderByAggregateInput> = z.object({
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayrollMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PayrollMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  payPeriodStart: z.lazy(() => SortOrderSchema).optional(),
  payPeriodEnd: z.lazy(() => SortOrderSchema).optional(),
  payDate: z.lazy(() => SortOrderSchema).optional(),
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayrollMinOrderByAggregateInputSchema: z.ZodType<Prisma.PayrollMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  payPeriodStart: z.lazy(() => SortOrderSchema).optional(),
  payPeriodEnd: z.lazy(() => SortOrderSchema).optional(),
  payDate: z.lazy(() => SortOrderSchema).optional(),
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PayrollSumOrderByAggregateInputSchema: z.ZodType<Prisma.PayrollSumOrderByAggregateInput> = z.object({
  basicSalary: z.lazy(() => SortOrderSchema).optional(),
  overtime: z.lazy(() => SortOrderSchema).optional(),
  bonus: z.lazy(() => SortOrderSchema).optional(),
  tax: z.lazy(() => SortOrderSchema).optional(),
  deductions: z.lazy(() => SortOrderSchema).optional(),
  netAmount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPayrollStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPayrollStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PayrollStatusSchema).optional(),
  in: z.lazy(() => PayrollStatusSchema).array().optional(),
  notIn: z.lazy(() => PayrollStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => NestedEnumPayrollStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPayrollStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPayrollStatusFilterSchema).optional()
}).strict();

export const EnumTimeOffTypeFilterSchema: z.ZodType<Prisma.EnumTimeOffTypeFilter> = z.object({
  equals: z.lazy(() => TimeOffTypeSchema).optional(),
  in: z.lazy(() => TimeOffTypeSchema).array().optional(),
  notIn: z.lazy(() => TimeOffTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => NestedEnumTimeOffTypeFilterSchema) ]).optional(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EnumTimeOffStatusFilterSchema: z.ZodType<Prisma.EnumTimeOffStatusFilter> = z.object({
  equals: z.lazy(() => TimeOffStatusSchema).optional(),
  in: z.lazy(() => TimeOffStatusSchema).array().optional(),
  notIn: z.lazy(() => TimeOffStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => NestedEnumTimeOffStatusFilterSchema) ]).optional(),
}).strict();

export const TimeOffCountOrderByAggregateInputSchema: z.ZodType<Prisma.TimeOffCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeOffAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TimeOffAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeOffMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TimeOffMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeOffMinOrderByAggregateInputSchema: z.ZodType<Prisma.TimeOffMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimeOffSumOrderByAggregateInputSchema: z.ZodType<Prisma.TimeOffSumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTimeOffTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTimeOffTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TimeOffTypeSchema).optional(),
  in: z.lazy(() => TimeOffTypeSchema).array().optional(),
  notIn: z.lazy(() => TimeOffTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => NestedEnumTimeOffTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTimeOffTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTimeOffTypeFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const EnumTimeOffStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTimeOffStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TimeOffStatusSchema).optional(),
  in: z.lazy(() => TimeOffStatusSchema).array().optional(),
  notIn: z.lazy(() => TimeOffStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => NestedEnumTimeOffStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTimeOffStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTimeOffStatusFilterSchema).optional()
}).strict();

export const EnumReviewStatusFilterSchema: z.ZodType<Prisma.EnumReviewStatusFilter> = z.object({
  equals: z.lazy(() => ReviewStatusSchema).optional(),
  in: z.lazy(() => ReviewStatusSchema).array().optional(),
  notIn: z.lazy(() => ReviewStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => NestedEnumReviewStatusFilterSchema) ]).optional(),
}).strict();

export const PerformanceReviewCountOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewPeriod: z.lazy(() => SortOrderSchema).optional(),
  performanceScore: z.lazy(() => SortOrderSchema).optional(),
  strengths: z.lazy(() => SortOrderSchema).optional(),
  improvements: z.lazy(() => SortOrderSchema).optional(),
  goals: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  reviewDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceReviewAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewAvgOrderByAggregateInput> = z.object({
  performanceScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceReviewMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewPeriod: z.lazy(() => SortOrderSchema).optional(),
  performanceScore: z.lazy(() => SortOrderSchema).optional(),
  strengths: z.lazy(() => SortOrderSchema).optional(),
  improvements: z.lazy(() => SortOrderSchema).optional(),
  goals: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  reviewDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceReviewMinOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  employeeId: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewPeriod: z.lazy(() => SortOrderSchema).optional(),
  performanceScore: z.lazy(() => SortOrderSchema).optional(),
  strengths: z.lazy(() => SortOrderSchema).optional(),
  improvements: z.lazy(() => SortOrderSchema).optional(),
  goals: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  reviewDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceReviewSumOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceReviewSumOrderByAggregateInput> = z.object({
  performanceScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumReviewStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumReviewStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ReviewStatusSchema).optional(),
  in: z.lazy(() => ReviewStatusSchema).array().optional(),
  notIn: z.lazy(() => ReviewStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => NestedEnumReviewStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumReviewStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumReviewStatusFilterSchema).optional()
}).strict();

export const EnumCampaignTypeFilterSchema: z.ZodType<Prisma.EnumCampaignTypeFilter> = z.object({
  equals: z.lazy(() => CampaignTypeSchema).optional(),
  in: z.lazy(() => CampaignTypeSchema).array().optional(),
  notIn: z.lazy(() => CampaignTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => NestedEnumCampaignTypeFilterSchema) ]).optional(),
}).strict();

export const EnumCampaignStatusFilterSchema: z.ZodType<Prisma.EnumCampaignStatusFilter> = z.object({
  equals: z.lazy(() => CampaignStatusSchema).optional(),
  in: z.lazy(() => CampaignStatusSchema).array().optional(),
  notIn: z.lazy(() => CampaignStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => NestedEnumCampaignStatusFilterSchema) ]).optional(),
}).strict();

export const EmailCampaignListRelationFilterSchema: z.ZodType<Prisma.EmailCampaignListRelationFilter> = z.object({
  every: z.lazy(() => EmailCampaignWhereInputSchema).optional(),
  some: z.lazy(() => EmailCampaignWhereInputSchema).optional(),
  none: z.lazy(() => EmailCampaignWhereInputSchema).optional()
}).strict();

export const SocialMediaPostListRelationFilterSchema: z.ZodType<Prisma.SocialMediaPostListRelationFilter> = z.object({
  every: z.lazy(() => SocialMediaPostWhereInputSchema).optional(),
  some: z.lazy(() => SocialMediaPostWhereInputSchema).optional(),
  none: z.lazy(() => SocialMediaPostWhereInputSchema).optional()
}).strict();

export const EmailCampaignOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EmailCampaignOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SocialMediaPostOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignCountOrderByAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  targetAudience: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignAvgOrderByAggregateInput> = z.object({
  budget: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  targetAudience: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignMinOrderByAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  budget: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  targetAudience: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MarketingCampaignSumOrderByAggregateInputSchema: z.ZodType<Prisma.MarketingCampaignSumOrderByAggregateInput> = z.object({
  budget: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumCampaignTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCampaignTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CampaignTypeSchema).optional(),
  in: z.lazy(() => CampaignTypeSchema).array().optional(),
  notIn: z.lazy(() => CampaignTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => NestedEnumCampaignTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCampaignTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCampaignTypeFilterSchema).optional()
}).strict();

export const EnumCampaignStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCampaignStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CampaignStatusSchema).optional(),
  in: z.lazy(() => CampaignStatusSchema).array().optional(),
  notIn: z.lazy(() => CampaignStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => NestedEnumCampaignStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCampaignStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCampaignStatusFilterSchema).optional()
}).strict();

export const MarketingCampaignRelationFilterSchema: z.ZodType<Prisma.MarketingCampaignRelationFilter> = z.object({
  is: z.lazy(() => MarketingCampaignWhereInputSchema).optional(),
  isNot: z.lazy(() => MarketingCampaignWhereInputSchema).optional()
}).strict();

export const EmailCampaignCountOrderByAggregateInputSchema: z.ZodType<Prisma.EmailCampaignCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmailCampaignAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EmailCampaignAvgOrderByAggregateInput> = z.object({
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmailCampaignMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EmailCampaignMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmailCampaignMinOrderByAggregateInputSchema: z.ZodType<Prisma.EmailCampaignMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  sentAt: z.lazy(() => SortOrderSchema).optional(),
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EmailCampaignSumOrderByAggregateInputSchema: z.ZodType<Prisma.EmailCampaignSumOrderByAggregateInput> = z.object({
  opens: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  bounces: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSocialPlatformFilterSchema: z.ZodType<Prisma.EnumSocialPlatformFilter> = z.object({
  equals: z.lazy(() => SocialPlatformSchema).optional(),
  in: z.lazy(() => SocialPlatformSchema).array().optional(),
  notIn: z.lazy(() => SocialPlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => NestedEnumSocialPlatformFilterSchema) ]).optional(),
}).strict();

export const SocialMediaPostCountOrderByAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  mediaUrl: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SocialMediaPostAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostAvgOrderByAggregateInput> = z.object({
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SocialMediaPostMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  mediaUrl: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SocialMediaPostMinOrderByAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  campaignId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  mediaUrl: z.lazy(() => SortOrderSchema).optional(),
  scheduledAt: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SocialMediaPostSumOrderByAggregateInputSchema: z.ZodType<Prisma.SocialMediaPostSumOrderByAggregateInput> = z.object({
  likes: z.lazy(() => SortOrderSchema).optional(),
  shares: z.lazy(() => SortOrderSchema).optional(),
  comments: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSocialPlatformWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSocialPlatformWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SocialPlatformSchema).optional(),
  in: z.lazy(() => SocialPlatformSchema).array().optional(),
  notIn: z.lazy(() => SocialPlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => NestedEnumSocialPlatformWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSocialPlatformFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSocialPlatformFilterSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFinancialReportTypeFilterSchema: z.ZodType<Prisma.EnumFinancialReportTypeFilter> = z.object({
  equals: z.lazy(() => FinancialReportTypeSchema).optional(),
  in: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => NestedEnumFinancialReportTypeFilterSchema) ]).optional(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const EnumFinancialReportStatusFilterSchema: z.ZodType<Prisma.EnumFinancialReportStatusFilter> = z.object({
  equals: z.lazy(() => FinancialReportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => NestedEnumFinancialReportStatusFilterSchema) ]).optional(),
}).strict();

export const FinancialReportDataListRelationFilterSchema: z.ZodType<Prisma.FinancialReportDataListRelationFilter> = z.object({
  every: z.lazy(() => FinancialReportDataWhereInputSchema).optional(),
  some: z.lazy(() => FinancialReportDataWhereInputSchema).optional(),
  none: z.lazy(() => FinancialReportDataWhereInputSchema).optional()
}).strict();

export const FinancialReportExportListRelationFilterSchema: z.ZodType<Prisma.FinancialReportExportListRelationFilter> = z.object({
  every: z.lazy(() => FinancialReportExportWhereInputSchema).optional(),
  some: z.lazy(() => FinancialReportExportWhereInputSchema).optional(),
  none: z.lazy(() => FinancialReportExportWhereInputSchema).optional()
}).strict();

export const FinancialReportScheduleListRelationFilterSchema: z.ZodType<Prisma.FinancialReportScheduleListRelationFilter> = z.object({
  every: z.lazy(() => FinancialReportScheduleWhereInputSchema).optional(),
  some: z.lazy(() => FinancialReportScheduleWhereInputSchema).optional(),
  none: z.lazy(() => FinancialReportScheduleWhereInputSchema).optional()
}).strict();

export const FinancialReportDataOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FinancialReportDataOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportExportOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportScheduleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportCountOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  template: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  dateRange: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  isTemplate: z.lazy(() => SortOrderSchema).optional(),
  isScheduled: z.lazy(() => SortOrderSchema).optional(),
  scheduleConfig: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  isTemplate: z.lazy(() => SortOrderSchema).optional(),
  isScheduled: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportMinOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  generatedBy: z.lazy(() => SortOrderSchema).optional(),
  isTemplate: z.lazy(() => SortOrderSchema).optional(),
  isScheduled: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFinancialReportTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFinancialReportTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportTypeSchema).optional(),
  in: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => NestedEnumFinancialReportTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportTypeFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const EnumFinancialReportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFinancialReportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => NestedEnumFinancialReportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportStatusFilterSchema).optional()
}).strict();

export const FinancialReportRelationFilterSchema: z.ZodType<Prisma.FinancialReportRelationFilter> = z.object({
  is: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  isNot: z.lazy(() => FinancialReportWhereInputSchema).optional()
}).strict();

export const FinancialReportDataCountOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportDataCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportDataMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportDataMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportDataMinOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportDataMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFinancialReportExportFormatFilterSchema: z.ZodType<Prisma.EnumFinancialReportExportFormatFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportFormatSchema).optional(),
  in: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema) ]).optional(),
}).strict();

export const EnumFinancialReportExportStatusFilterSchema: z.ZodType<Prisma.EnumFinancialReportExportStatusFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema) ]).optional(),
}).strict();

export const FinancialReportExportCountOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportExportAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportAvgOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportExportMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportExportMinOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  format: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  fileUrl: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportExportSumOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportExportSumOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFinancialReportExportFormatWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFinancialReportExportFormatWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportFormatSchema).optional(),
  in: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => NestedEnumFinancialReportExportFormatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema).optional()
}).strict();

export const EnumFinancialReportExportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFinancialReportExportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => NestedEnumFinancialReportExportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema).optional()
}).strict();

export const EnumFinancialReportScheduleFrequencyFilterSchema: z.ZodType<Prisma.EnumFinancialReportScheduleFrequencyFilter> = z.object({
  equals: z.lazy(() => FinancialReportScheduleFrequencySchema).optional(),
  in: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  notIn: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleCountOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  dayOfMonth: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  timezone: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  lastRunAt: z.lazy(() => SortOrderSchema).optional(),
  nextRunAt: z.lazy(() => SortOrderSchema).optional(),
  recipients: z.lazy(() => SortOrderSchema).optional(),
  emailSubject: z.lazy(() => SortOrderSchema).optional(),
  emailBody: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportScheduleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleAvgOrderByAggregateInput> = z.object({
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  dayOfMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportScheduleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  dayOfMonth: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  timezone: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  lastRunAt: z.lazy(() => SortOrderSchema).optional(),
  nextRunAt: z.lazy(() => SortOrderSchema).optional(),
  emailSubject: z.lazy(() => SortOrderSchema).optional(),
  emailBody: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportScheduleMinOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  reportId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  dayOfMonth: z.lazy(() => SortOrderSchema).optional(),
  time: z.lazy(() => SortOrderSchema).optional(),
  timezone: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  lastRunAt: z.lazy(() => SortOrderSchema).optional(),
  nextRunAt: z.lazy(() => SortOrderSchema).optional(),
  emailSubject: z.lazy(() => SortOrderSchema).optional(),
  emailBody: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FinancialReportScheduleSumOrderByAggregateInputSchema: z.ZodType<Prisma.FinancialReportScheduleSumOrderByAggregateInput> = z.object({
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  dayOfMonth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFinancialReportScheduleFrequencyWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFinancialReportScheduleFrequencyWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportScheduleFrequencySchema).optional(),
  in: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  notIn: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => NestedEnumFinancialReportScheduleFrequencyWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema).optional()
}).strict();

export const RolePermissionCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionCreateNestedOneWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateNestedOneWithoutRolePermissionsInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional()
}).strict();

export const EnumUserRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRoleSchema).optional()
}).strict();

export const PermissionUpdateOneRequiredWithoutRolePermissionsNestedInputSchema: z.ZodType<Prisma.PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolePermissionsInputSchema).optional(),
  upsert: z.lazy(() => PermissionUpsertWithoutRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateToOneWithWhereWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCustomRolesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomRolePermissionCreateNestedManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateNestedManyWithoutCustomRoleInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationCreateNestedManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationCreateNestedManyWithoutCustomRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyCustomRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedCreateNestedManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedCreateNestedManyWithoutCustomRoleInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUncheckedCreateNestedManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedCreateNestedManyWithoutCustomRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyCustomRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutCustomRolesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutCustomRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomRolesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCustomRolesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUpdateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomRolesInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionUpdateManyWithoutCustomRoleNestedInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyWithoutCustomRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUpdateManyWithoutCustomRoleNestedInputSchema: z.ZodType<Prisma.UserOrganizationUpdateManyWithoutCustomRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyCustomRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutCustomRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleNestedInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),z.lazy(() => CustomRolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUncheckedUpdateManyWithoutCustomRoleNestedInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateManyWithoutCustomRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyCustomRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutCustomRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRoleCreateNestedOneWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleCreateNestedOneWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomRoleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => CustomRoleWhereUniqueInputSchema).optional()
}).strict();

export const PermissionCreateNestedOneWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateNestedOneWithoutCustomRolePermissionsInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCustomRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutCustomRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional()
}).strict();

export const CustomRoleUpdateOneRequiredWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.CustomRoleUpdateOneRequiredWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomRoleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  upsert: z.lazy(() => CustomRoleUpsertWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => CustomRoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomRoleUpdateToOneWithWhereWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUpdateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutPermissionsInputSchema) ]).optional(),
}).strict();

export const PermissionUpdateOneRequiredWithoutCustomRolePermissionsNestedInputSchema: z.ZodType<Prisma.PermissionUpdateOneRequiredWithoutCustomRolePermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCustomRolePermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutCustomRolePermissionsInputSchema).optional(),
  upsert: z.lazy(() => PermissionUpsertWithoutCustomRolePermissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateToOneWithWhereWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUpdateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutCustomRolePermissionsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvoiceCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCategoryCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseTagCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseTagCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EmployeeCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmployeeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MarketingCampaignCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomRoleCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCategoryCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseTagCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmployeeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MarketingCampaignCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserOrganizationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvoiceUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCategoryCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseCategoryScalarWhereInputSchema),z.lazy(() => ExpenseCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseTagUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseTagCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseTagUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseTagScalarWhereInputSchema),z.lazy(() => ExpenseTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EmployeeUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EmployeeUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EmployeeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmployeeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EmployeeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EmployeeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EmployeeScalarWhereInputSchema),z.lazy(() => EmployeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MarketingCampaignCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MarketingCampaignUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MarketingCampaignScalarWhereInputSchema),z.lazy(() => MarketingCampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRoleUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomRoleUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRoleScalarWhereInputSchema),z.lazy(() => CustomRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FinancialReportUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportScalarWhereInputSchema),z.lazy(() => FinancialReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOrganizationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOrganizationWhereUniqueInputSchema),z.lazy(() => UserOrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProjectCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectWhereUniqueInputSchema),z.lazy(() => ProjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProjectUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TaskCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvoiceUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCategoryCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseCategoryScalarWhereInputSchema),z.lazy(() => ExpenseCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseTagCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseTagWhereUniqueInputSchema),z.lazy(() => ExpenseTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseTagUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseTagScalarWhereInputSchema),z.lazy(() => ExpenseTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => EmployeeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EmployeeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmployeeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EmployeeWhereUniqueInputSchema),z.lazy(() => EmployeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EmployeeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EmployeeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => EmployeeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EmployeeScalarWhereInputSchema),z.lazy(() => EmployeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MarketingCampaignCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MarketingCampaignWhereUniqueInputSchema),z.lazy(() => MarketingCampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MarketingCampaignUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MarketingCampaignScalarWhereInputSchema),z.lazy(() => MarketingCampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomRoleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomRoleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomRoleWhereUniqueInputSchema),z.lazy(() => CustomRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomRoleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomRoleScalarWhereInputSchema),z.lazy(() => CustomRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FinancialReportCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportWhereUniqueInputSchema),z.lazy(() => FinancialReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportScalarWhereInputSchema),z.lazy(() => FinancialReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomRoleCreateNestedOneWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleCreateNestedOneWithoutUserAssignmentsInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutUserAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomRoleCreateOrConnectWithoutUserAssignmentsInputSchema).optional(),
  connect: z.lazy(() => CustomRoleWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumUserRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumUserRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRoleSchema).optional().nullable()
}).strict();

export const OrganizationUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const CustomRoleUpdateOneWithoutUserAssignmentsNestedInputSchema: z.ZodType<Prisma.CustomRoleUpdateOneWithoutUserAssignmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutUserAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomRoleCreateOrConnectWithoutUserAssignmentsInputSchema).optional(),
  upsert: z.lazy(() => CustomRoleUpsertWithoutUserAssignmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CustomRoleWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CustomRoleWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CustomRoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomRoleUpdateToOneWithWhereWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUpdateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutUserAssignmentsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomerInteractionCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema).array(),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerInteractionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DealCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.DealCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealCreateWithoutCustomerInputSchema).array(),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DealCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvoiceCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateWithoutCustomerInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema).array(),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerInteractionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DealUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.DealUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealCreateWithoutCustomerInputSchema).array(),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DealCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateWithoutCustomerInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumCustomerTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCustomerTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CustomerTypeSchema).optional()
}).strict();

export const NullableEnumLeadStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumLeadStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LeadStatusSchema).optional().nullable()
}).strict();

export const NullableEnumLeadSourceFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumLeadSourceFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LeadSourceSchema).optional().nullable()
}).strict();

export const OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema),z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]).optional(),
}).strict();

export const CustomerInteractionUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema).array(),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerInteractionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerInteractionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerInteractionScalarWhereInputSchema),z.lazy(() => CustomerInteractionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DealUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.DealUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealCreateWithoutCustomerInputSchema).array(),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DealUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => DealUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DealCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DealUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => DealUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DealUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => DealUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DealScalarWhereInputSchema),z.lazy(() => DealScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.InvoiceUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateWithoutCustomerInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => InvoiceUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema).array(),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerInteractionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerInteractionWhereUniqueInputSchema),z.lazy(() => CustomerInteractionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerInteractionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerInteractionScalarWhereInputSchema),z.lazy(() => CustomerInteractionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DealUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.DealUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealCreateWithoutCustomerInputSchema).array(),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => DealCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DealUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => DealUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DealCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DealWhereUniqueInputSchema),z.lazy(() => DealWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DealUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => DealUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DealUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => DealUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DealScalarWhereInputSchema),z.lazy(() => DealScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateWithoutCustomerInputSchema).array(),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => InvoiceCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => InvoiceUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceWhereUniqueInputSchema),z.lazy(() => InvoiceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => InvoiceUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => InvoiceUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutInteractionsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInteractionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutInteractionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedManyWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutCustomerInteractionInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyCustomerInteractionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutCustomerInteractionInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyCustomerInteractionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumInteractionTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumInteractionTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => InteractionTypeSchema).optional()
}).strict();

export const EnumInteractionMediumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumInteractionMediumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => InteractionMediumSchema).optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const CustomerUpdateOneRequiredWithoutInteractionsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutInteractionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInteractionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutInteractionsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutInteractionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutInteractionsInputSchema),z.lazy(() => CustomerUpdateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInteractionsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateManyWithoutCustomerInteractionNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutCustomerInteractionNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutCustomerInteractionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyCustomerInteractionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutCustomerInteractionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutCustomerInteractionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutCustomerInteractionNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutCustomerInteractionNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema),z.lazy(() => TaskCreateOrConnectWithoutCustomerInteractionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutCustomerInteractionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyCustomerInteractionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutCustomerInteractionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutCustomerInteractionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutDealsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutDealsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutDealsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutDealsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const EnumLeadStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumLeadStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LeadStatusSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const CustomerUpdateOneRequiredWithoutDealsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutDealsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutDealsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutDealsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutDealsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutDealsInputSchema),z.lazy(() => CustomerUpdateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutDealsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectResourceCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectResourceCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateWithoutProjectInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseCreateWithoutProjectInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectResourceCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateWithoutProjectInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutProjectInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseCreateWithoutProjectInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyProjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumProjectStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumProjectStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ProjectStatusSchema).optional()
}).strict();

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  increment: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProjectsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProjectsInputSchema),z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectResourceUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProjectResourceUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectResourceUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectResourceCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectResourceUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectResourceUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectResourceScalarWhereInputSchema),z.lazy(() => ProjectResourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TimeEntryUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateWithoutProjectInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeEntryUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TimeEntryUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseCreateWithoutProjectInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskCreateWithoutProjectInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TaskCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema).array(),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ProjectResourceCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectResourceUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectResourceCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectResourceWhereUniqueInputSchema),z.lazy(() => ProjectResourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectResourceUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectResourceUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ProjectResourceUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectResourceScalarWhereInputSchema),z.lazy(() => ProjectResourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateWithoutProjectInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeEntryUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => TimeEntryUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutProjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseCreateWithoutProjectInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutProjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyProjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutProjectInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutProjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutProjectInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutProjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProjectCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutSubtasksInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedCreateWithoutSubtasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutSubtasksInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedManyWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutParentTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskCreateWithoutParentTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyParentTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateWithoutTaskInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.CommentCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentCreateWithoutTaskInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AttachmentCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentCreateWithoutTaskInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerInteractionCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerInteractionCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => CustomerInteractionWhereUniqueInputSchema).optional()
}).strict();

export const TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutParentTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskCreateWithoutParentTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyParentTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateWithoutTaskInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.CommentUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentCreateWithoutTaskInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentCreateWithoutTaskInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumTaskStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTaskStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TaskStatusSchema).optional()
}).strict();

export const EnumPriorityFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPriorityFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PrioritySchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => OrganizationUpdateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateOneWithoutTasksNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutTasksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => ProjectUpdateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneWithoutSubtasksNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneWithoutSubtasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedCreateWithoutSubtasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutSubtasksInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutSubtasksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutSubtasksInputSchema),z.lazy(() => TaskUpdateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutSubtasksInputSchema) ]).optional(),
}).strict();

export const TaskUpdateManyWithoutParentTaskNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutParentTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskCreateWithoutParentTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutParentTaskInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutParentTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyParentTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutParentTaskInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutParentTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutParentTaskInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutParentTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TimeEntryUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateWithoutTaskInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeEntryUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TimeEntryUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.CommentUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentCreateWithoutTaskInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AttachmentUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.AttachmentUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentCreateWithoutTaskInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AttachmentUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => AttachmentUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerInteractionUpdateOneWithoutTasksNestedInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateOneWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerInteractionCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => CustomerInteractionUpsertWithoutTasksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CustomerInteractionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CustomerInteractionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CustomerInteractionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerInteractionUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUpdateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutParentTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskCreateWithoutParentTaskInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema),z.lazy(() => TaskCreateOrConnectWithoutParentTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutParentTaskInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutParentTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyParentTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutParentTaskInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutParentTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutParentTaskInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutParentTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateWithoutTaskInputSchema).array(),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TimeEntryCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TimeEntryUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeEntryCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeEntryWhereUniqueInputSchema),z.lazy(() => TimeEntryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TimeEntryUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeEntryUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TimeEntryUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentCreateWithoutTaskInputSchema).array(),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => CommentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CommentUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => CommentUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CommentCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CommentWhereUniqueInputSchema),z.lazy(() => CommentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CommentUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => CommentUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CommentUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => CommentUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentCreateWithoutTaskInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AttachmentUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => AttachmentUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutResourcesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutResourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutResourcesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const ProjectUpdateOneRequiredWithoutResourcesNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneRequiredWithoutResourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutResourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutResourcesInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutResourcesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutResourcesInputSchema),z.lazy(() => ProjectUpdateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutResourcesInputSchema) ]).optional(),
}).strict();

export const ProjectCreateNestedOneWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutTimeEntriesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTimeEntriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTimeEntriesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutTimeEntriesInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTimeEntriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTimeEntriesInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const ProjectUpdateOneWithoutTimeEntriesNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneWithoutTimeEntriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTimeEntriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutTimeEntriesInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutTimeEntriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUpdateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTimeEntriesInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneWithoutTimeEntriesNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneWithoutTimeEntriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTimeEntriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTimeEntriesInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutTimeEntriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutTimeEntriesInputSchema),z.lazy(() => TaskUpdateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTimeEntriesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvoicesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvoicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvoicesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomerCreateNestedOneWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutInvoicesInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInvoicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutInvoicesInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const InvoiceItemCreateNestedManyWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemCreateNestedManyWithoutInvoiceInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema).array(),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceItemCreateManyInvoiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentCreateNestedManyWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentCreateNestedManyWithoutInvoiceInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateWithoutInvoiceInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyInvoiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema).array(),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceItemCreateManyInvoiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentUncheckedCreateNestedManyWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateNestedManyWithoutInvoiceInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateWithoutInvoiceInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyInvoiceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumInvoiceStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumInvoiceStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => InvoiceStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvoicesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvoicesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvoicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvoicesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvoicesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvoicesInputSchema),z.lazy(() => OrganizationUpdateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvoicesInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateOneRequiredWithoutInvoicesNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutInvoicesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInvoicesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutInvoicesInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutInvoicesInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutInvoicesInputSchema),z.lazy(() => CustomerUpdateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInvoicesInputSchema) ]).optional(),
}).strict();

export const InvoiceItemUpdateManyWithoutInvoiceNestedInputSchema: z.ZodType<Prisma.InvoiceItemUpdateManyWithoutInvoiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema).array(),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceItemCreateManyInvoiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceItemUpdateManyWithWhereWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpdateManyWithWhereWithoutInvoiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceItemScalarWhereInputSchema),z.lazy(() => InvoiceItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentUpdateManyWithoutInvoiceNestedInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithoutInvoiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateWithoutInvoiceInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyInvoiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutInvoiceInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutInvoiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema).array(),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvoiceItemCreateManyInvoiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvoiceItemWhereUniqueInputSchema),z.lazy(() => InvoiceItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvoiceItemUpdateManyWithWhereWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUpdateManyWithWhereWithoutInvoiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvoiceItemScalarWhereInputSchema),z.lazy(() => InvoiceItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutInvoiceNestedInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutInvoiceNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateWithoutInvoiceInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutInvoiceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyInvoiceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutInvoiceInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutInvoiceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutInvoiceInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutInvoiceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvoiceCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvoiceCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => InvoiceWhereUniqueInputSchema).optional()
}).strict();

export const InvoiceUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.InvoiceUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvoiceCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => InvoiceUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => InvoiceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => InvoiceUpdateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const InvoiceCreateNestedOneWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceCreateNestedOneWithoutPaymentsInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvoiceCreateOrConnectWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => InvoiceWhereUniqueInputSchema).optional()
}).strict();

export const EnumPaymentMethodFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPaymentMethodFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentMethodSchema).optional()
}).strict();

export const EnumPaymentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPaymentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentStatusSchema).optional()
}).strict();

export const InvoiceUpdateOneRequiredWithoutPaymentsNestedInputSchema: z.ZodType<Prisma.InvoiceUpdateOneRequiredWithoutPaymentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvoiceCreateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InvoiceCreateOrConnectWithoutPaymentsInputSchema).optional(),
  upsert: z.lazy(() => InvoiceUpsertWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => InvoiceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InvoiceUpdateToOneWithWhereWithoutPaymentsInputSchema),z.lazy(() => InvoiceUpdateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutPaymentsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseCategoryCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCategoryCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).optional()
}).strict();

export const ProjectCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseToTagCreateNestedManyWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagCreateNestedManyWithoutExpenseInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyExpenseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyExpenseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumExpenseStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumExpenseStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ExpenseStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const ExpenseCategoryUpdateOneWithoutExpensesNestedInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateOneWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCategoryCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => ExpenseCategoryUpsertWithoutExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExpenseCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExpenseCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseCategoryUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateOneWithoutExpensesNestedInputSchema: z.ZodType<Prisma.ProjectUpdateOneWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectCreateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => ProjectUpsertWithoutExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ProjectWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ProjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => ProjectUpdateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagUpdateManyWithoutExpenseNestedInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyWithoutExpenseNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyExpenseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutExpenseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutExpenseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyExpenseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutExpenseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutExpenseCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpenseCategoriesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateWithoutCategoryInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateWithoutCategoryInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutExpenseCategoriesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutExpenseCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpenseCategoriesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutExpenseCategoriesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUpdateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseCategoriesInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateWithoutCategoryInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateWithoutCategoryInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutExpenseTagsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpenseTagsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseToTagCreateNestedManyWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagCreateNestedManyWithoutTagInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseToTagUncheckedCreateNestedManyWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedCreateNestedManyWithoutTagInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutExpenseTagsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutExpenseTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpenseTagsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutExpenseTagsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUpdateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseTagsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagUpdateManyWithoutTagNestedInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyWithoutTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseToTagUncheckedUpdateManyWithoutTagNestedInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateManyWithoutTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema).array(),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => ExpenseToTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpsertWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseToTagCreateManyTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseToTagWhereUniqueInputSchema),z.lazy(() => ExpenseToTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpdateWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutTagInputSchema),z.lazy(() => ExpenseToTagUpdateManyWithWhereWithoutTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedOneWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseCreateNestedOneWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseTagCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseTagCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => ExpenseTagWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseUpdateOneRequiredWithoutTagsNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateOneRequiredWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseCreateOrConnectWithoutTagsInputSchema).optional(),
  upsert: z.lazy(() => ExpenseUpsertWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => ExpenseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateToOneWithWhereWithoutTagsInputSchema),z.lazy(() => ExpenseUpdateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutTagsInputSchema) ]).optional(),
}).strict();

export const ExpenseTagUpdateOneRequiredWithoutExpensesNestedInputSchema: z.ZodType<Prisma.ExpenseTagUpdateOneRequiredWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExpenseTagCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => ExpenseTagUpsertWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => ExpenseTagWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExpenseTagUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const TaskCreateNestedOneWithoutCommentsInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutCommentsInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TaskUpdateOneRequiredWithoutCommentsNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneRequiredWithoutCommentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCommentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutCommentsInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutCommentsInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutCommentsInputSchema),z.lazy(() => TaskUpdateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutCommentsInputSchema) ]).optional(),
}).strict();

export const TaskCreateNestedOneWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutAttachmentsInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const TaskUpdateOneRequiredWithoutAttachmentsNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneRequiredWithoutAttachmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutAttachmentsInputSchema),z.lazy(() => TaskUpdateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAttachmentsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema).array(),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventAttendeeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CalendarEventAttendeeUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema).array(),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventAttendeeCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CalendarEventAttendeeUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema).array(),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventAttendeeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CalendarEventAttendeeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CalendarEventAttendeeUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema).array(),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CalendarEventAttendeeCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CalendarEventAttendeeUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CalendarEventCreateNestedOneWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventCreateNestedOneWithoutAttendeesInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutAttendeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CalendarEventCreateOrConnectWithoutAttendeesInputSchema).optional(),
  connect: z.lazy(() => CalendarEventWhereUniqueInputSchema).optional()
}).strict();

export const EnumAttendeeStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAttendeeStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AttendeeStatusSchema).optional()
}).strict();

export const CalendarEventUpdateOneRequiredWithoutAttendeesNestedInputSchema: z.ZodType<Prisma.CalendarEventUpdateOneRequiredWithoutAttendeesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutAttendeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CalendarEventCreateOrConnectWithoutAttendeesInputSchema).optional(),
  upsert: z.lazy(() => CalendarEventUpsertWithoutAttendeesInputSchema).optional(),
  connect: z.lazy(() => CalendarEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CalendarEventUpdateToOneWithWhereWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUpdateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutAttendeesInputSchema) ]).optional(),
}).strict();

export const EnumNotificationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumNotificationTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => NotificationTypeSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const EnumInvitationStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumInvitationStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => InvitationStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutEmployeesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEmployeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEmployeesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const PayrollCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PayrollCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeOffCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema).array(),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeOffCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PerformanceReviewCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PerformanceReviewCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PayrollUncheckedCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUncheckedCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PayrollCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimeOffUncheckedCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUncheckedCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema).array(),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeOffCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInput> = z.object({
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PerformanceReviewCreateManyEmployeeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumEmployeeStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEmployeeStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EmployeeStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutEmployeesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutEmployeesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEmployeesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutEmployeesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutEmployeesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutEmployeesInputSchema),z.lazy(() => OrganizationUpdateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEmployeesInputSchema) ]).optional(),
}).strict();

export const PayrollUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.PayrollUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PayrollUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PayrollUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PayrollCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PayrollUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PayrollUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PayrollUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => PayrollUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PayrollScalarWhereInputSchema),z.lazy(() => PayrollScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeOffUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.TimeOffUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema).array(),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeOffUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeOffCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeOffUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeOffUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeOffScalarWhereInputSchema),z.lazy(() => TimeOffScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PerformanceReviewUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PerformanceReviewCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PerformanceReviewUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PerformanceReviewScalarWhereInputSchema),z.lazy(() => PerformanceReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PayrollUncheckedUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.PayrollUncheckedUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PayrollCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PayrollUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PayrollUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PayrollCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PayrollWhereUniqueInputSchema),z.lazy(() => PayrollWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PayrollUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PayrollUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PayrollUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => PayrollUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PayrollScalarWhereInputSchema),z.lazy(() => PayrollScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimeOffUncheckedUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.TimeOffUncheckedUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema).array(),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => TimeOffCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimeOffUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimeOffCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimeOffWhereUniqueInputSchema),z.lazy(() => TimeOffWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimeOffUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimeOffUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => TimeOffUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimeOffScalarWhereInputSchema),z.lazy(() => TimeOffScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema).array(),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PerformanceReviewCreateManyEmployeeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PerformanceReviewWhereUniqueInputSchema),z.lazy(() => PerformanceReviewWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PerformanceReviewUpdateManyWithWhereWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUpdateManyWithWhereWithoutEmployeeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PerformanceReviewScalarWhereInputSchema),z.lazy(() => PerformanceReviewScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EmployeeCreateNestedOneWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeCreateNestedOneWithoutPayrollsInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPayrollsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutPayrollsInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional()
}).strict();

export const EnumPayrollStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPayrollStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PayrollStatusSchema).optional()
}).strict();

export const EmployeeUpdateOneRequiredWithoutPayrollsNestedInputSchema: z.ZodType<Prisma.EmployeeUpdateOneRequiredWithoutPayrollsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPayrollsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutPayrollsInputSchema).optional(),
  upsert: z.lazy(() => EmployeeUpsertWithoutPayrollsInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EmployeeUpdateToOneWithWhereWithoutPayrollsInputSchema),z.lazy(() => EmployeeUpdateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPayrollsInputSchema) ]).optional(),
}).strict();

export const EmployeeCreateNestedOneWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeCreateNestedOneWithoutTimeOffInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutTimeOffInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutTimeOffInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional()
}).strict();

export const EnumTimeOffTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTimeOffTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TimeOffTypeSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumTimeOffStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTimeOffStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TimeOffStatusSchema).optional()
}).strict();

export const EmployeeUpdateOneRequiredWithoutTimeOffNestedInputSchema: z.ZodType<Prisma.EmployeeUpdateOneRequiredWithoutTimeOffNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutTimeOffInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutTimeOffInputSchema).optional(),
  upsert: z.lazy(() => EmployeeUpsertWithoutTimeOffInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EmployeeUpdateToOneWithWhereWithoutTimeOffInputSchema),z.lazy(() => EmployeeUpdateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutTimeOffInputSchema) ]).optional(),
}).strict();

export const EmployeeCreateNestedOneWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeCreateNestedOneWithoutPerformanceReviewsInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPerformanceReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutPerformanceReviewsInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional()
}).strict();

export const EnumReviewStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumReviewStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ReviewStatusSchema).optional()
}).strict();

export const EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInputSchema: z.ZodType<Prisma.EmployeeUpdateOneRequiredWithoutPerformanceReviewsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPerformanceReviewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EmployeeCreateOrConnectWithoutPerformanceReviewsInputSchema).optional(),
  upsert: z.lazy(() => EmployeeUpsertWithoutPerformanceReviewsInputSchema).optional(),
  connect: z.lazy(() => EmployeeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EmployeeUpdateToOneWithWhereWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUpdateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPerformanceReviewsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCampaignsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCampaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCampaignsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const EmailCampaignCreateNestedManyWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignCreateNestedManyWithoutCampaignInput> = z.object({
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema).array(),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmailCampaignCreateManyCampaignInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SocialMediaPostCreateNestedManyWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostCreateNestedManyWithoutCampaignInput> = z.object({
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema).array(),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SocialMediaPostCreateManyCampaignInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EmailCampaignUncheckedCreateNestedManyWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedCreateNestedManyWithoutCampaignInput> = z.object({
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema).array(),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmailCampaignCreateManyCampaignInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SocialMediaPostUncheckedCreateNestedManyWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedCreateNestedManyWithoutCampaignInput> = z.object({
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema).array(),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SocialMediaPostCreateManyCampaignInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumCampaignTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCampaignTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CampaignTypeSchema).optional()
}).strict();

export const EnumCampaignStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCampaignStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CampaignStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutCampaignsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutCampaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCampaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCampaignsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCampaignsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCampaignsInputSchema),z.lazy(() => OrganizationUpdateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCampaignsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignUpdateManyWithoutCampaignNestedInputSchema: z.ZodType<Prisma.EmailCampaignUpdateManyWithoutCampaignNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema).array(),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EmailCampaignUpsertWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpsertWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmailCampaignCreateManyCampaignInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EmailCampaignUpdateWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpdateWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EmailCampaignUpdateManyWithWhereWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpdateManyWithWhereWithoutCampaignInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EmailCampaignScalarWhereInputSchema),z.lazy(() => EmailCampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SocialMediaPostUpdateManyWithoutCampaignNestedInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateManyWithoutCampaignNestedInput> = z.object({
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema).array(),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SocialMediaPostCreateManyCampaignInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SocialMediaPostUpdateManyWithWhereWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpdateManyWithWhereWithoutCampaignInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SocialMediaPostScalarWhereInputSchema),z.lazy(() => SocialMediaPostScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EmailCampaignUncheckedUpdateManyWithoutCampaignNestedInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedUpdateManyWithoutCampaignNestedInput> = z.object({
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema).array(),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => EmailCampaignCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EmailCampaignUpsertWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpsertWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EmailCampaignCreateManyCampaignInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EmailCampaignWhereUniqueInputSchema),z.lazy(() => EmailCampaignWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EmailCampaignUpdateWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpdateWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EmailCampaignUpdateManyWithWhereWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUpdateManyWithWhereWithoutCampaignInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EmailCampaignScalarWhereInputSchema),z.lazy(() => EmailCampaignScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SocialMediaPostUncheckedUpdateManyWithoutCampaignNestedInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedUpdateManyWithoutCampaignNestedInput> = z.object({
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema).array(),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostCreateOrConnectWithoutCampaignInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SocialMediaPostCreateManyCampaignInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SocialMediaPostWhereUniqueInputSchema),z.lazy(() => SocialMediaPostWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SocialMediaPostUpdateManyWithWhereWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUpdateManyWithWhereWithoutCampaignInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SocialMediaPostScalarWhereInputSchema),z.lazy(() => SocialMediaPostScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MarketingCampaignCreateNestedOneWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateNestedOneWithoutEmailCampaignsInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutEmailCampaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MarketingCampaignCreateOrConnectWithoutEmailCampaignsInputSchema).optional(),
  connect: z.lazy(() => MarketingCampaignWhereUniqueInputSchema).optional()
}).strict();

export const MarketingCampaignUpdateOneRequiredWithoutEmailCampaignsNestedInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateOneRequiredWithoutEmailCampaignsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutEmailCampaignsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MarketingCampaignCreateOrConnectWithoutEmailCampaignsInputSchema).optional(),
  upsert: z.lazy(() => MarketingCampaignUpsertWithoutEmailCampaignsInputSchema).optional(),
  connect: z.lazy(() => MarketingCampaignWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MarketingCampaignUpdateToOneWithWhereWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUpdateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutEmailCampaignsInputSchema) ]).optional(),
}).strict();

export const MarketingCampaignCreateNestedOneWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateNestedOneWithoutSocialPostsInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutSocialPostsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MarketingCampaignCreateOrConnectWithoutSocialPostsInputSchema).optional(),
  connect: z.lazy(() => MarketingCampaignWhereUniqueInputSchema).optional()
}).strict();

export const EnumSocialPlatformFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSocialPlatformFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SocialPlatformSchema).optional()
}).strict();

export const MarketingCampaignUpdateOneRequiredWithoutSocialPostsNestedInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateOneRequiredWithoutSocialPostsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutSocialPostsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MarketingCampaignCreateOrConnectWithoutSocialPostsInputSchema).optional(),
  upsert: z.lazy(() => MarketingCampaignUpsertWithoutSocialPostsInputSchema).optional(),
  connect: z.lazy(() => MarketingCampaignWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MarketingCampaignUpdateToOneWithWhereWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUpdateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutSocialPostsInputSchema) ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFinancialReportsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFinancialReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFinancialReportsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const FinancialReportDataCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportDataCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportExportCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportExportCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportScheduleCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportScheduleCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportDataUncheckedCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportDataCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportExportUncheckedCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportExportCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportScheduleCreateManyReportInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumFinancialReportTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFinancialReportTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FinancialReportTypeSchema).optional()
}).strict();

export const EnumFinancialReportStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFinancialReportStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FinancialReportStatusSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFinancialReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFinancialReportsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFinancialReportsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUpdateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFinancialReportsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportDataUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportDataCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportDataUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportDataUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportDataScalarWhereInputSchema),z.lazy(() => FinancialReportDataScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportExportUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportExportUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportExportCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportExportUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportExportUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportExportScalarWhereInputSchema),z.lazy(() => FinancialReportExportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportScheduleUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportScheduleCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportScheduleUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportDataUncheckedUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportDataCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportDataUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportDataCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportDataWhereUniqueInputSchema),z.lazy(() => FinancialReportDataWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportDataUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportDataUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportDataUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportDataScalarWhereInputSchema),z.lazy(() => FinancialReportDataScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportExportUncheckedUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportExportCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportExportUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportExportCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportExportWhereUniqueInputSchema),z.lazy(() => FinancialReportExportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportExportUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportExportUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportExportUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportExportScalarWhereInputSchema),z.lazy(() => FinancialReportExportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema).array(),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleCreateOrConnectWithoutReportInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FinancialReportScheduleCreateManyReportInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FinancialReportScheduleUpdateManyWithWhereWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUpdateManyWithWhereWithoutReportInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FinancialReportCreateNestedOneWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportCreateNestedOneWithoutReportDataInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutReportDataInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutReportDataInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional()
}).strict();

export const FinancialReportUpdateOneRequiredWithoutReportDataNestedInputSchema: z.ZodType<Prisma.FinancialReportUpdateOneRequiredWithoutReportDataNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutReportDataInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutReportDataInputSchema).optional(),
  upsert: z.lazy(() => FinancialReportUpsertWithoutReportDataInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FinancialReportUpdateToOneWithWhereWithoutReportDataInputSchema),z.lazy(() => FinancialReportUpdateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutReportDataInputSchema) ]).optional(),
}).strict();

export const FinancialReportCreateNestedOneWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportCreateNestedOneWithoutExportsInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutExportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutExportsInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional()
}).strict();

export const EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFinancialReportExportFormatFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FinancialReportExportFormatSchema).optional()
}).strict();

export const EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFinancialReportExportStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FinancialReportExportStatusSchema).optional()
}).strict();

export const FinancialReportUpdateOneRequiredWithoutExportsNestedInputSchema: z.ZodType<Prisma.FinancialReportUpdateOneRequiredWithoutExportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutExportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutExportsInputSchema).optional(),
  upsert: z.lazy(() => FinancialReportUpsertWithoutExportsInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FinancialReportUpdateToOneWithWhereWithoutExportsInputSchema),z.lazy(() => FinancialReportUpdateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutExportsInputSchema) ]).optional(),
}).strict();

export const FinancialReportCreateNestedOneWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportCreateNestedOneWithoutSchedulesInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutSchedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutSchedulesInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional()
}).strict();

export const EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FinancialReportScheduleFrequencySchema).optional()
}).strict();

export const FinancialReportUpdateOneRequiredWithoutSchedulesNestedInputSchema: z.ZodType<Prisma.FinancialReportUpdateOneRequiredWithoutSchedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutSchedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FinancialReportCreateOrConnectWithoutSchedulesInputSchema).optional(),
  upsert: z.lazy(() => FinancialReportUpsertWithoutSchedulesInputSchema).optional(),
  connect: z.lazy(() => FinancialReportWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FinancialReportUpdateToOneWithWhereWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUpdateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutSchedulesInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedEnumUserRoleFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumUserRoleNullableFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleNullableFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional().nullable(),
  in: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumUserRoleNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional().nullable(),
  in: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRoleSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleNullableFilterSchema).optional()
}).strict();

export const NestedEnumCustomerTypeFilterSchema: z.ZodType<Prisma.NestedEnumCustomerTypeFilter> = z.object({
  equals: z.lazy(() => CustomerTypeSchema).optional(),
  in: z.lazy(() => CustomerTypeSchema).array().optional(),
  notIn: z.lazy(() => CustomerTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => NestedEnumCustomerTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumLeadStatusNullableFilterSchema: z.ZodType<Prisma.NestedEnumLeadStatusNullableFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional().nullable(),
  in: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumLeadSourceNullableFilterSchema: z.ZodType<Prisma.NestedEnumLeadSourceNullableFilter> = z.object({
  equals: z.lazy(() => LeadSourceSchema).optional().nullable(),
  in: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NestedEnumLeadSourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumCustomerTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCustomerTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CustomerTypeSchema).optional(),
  in: z.lazy(() => CustomerTypeSchema).array().optional(),
  notIn: z.lazy(() => CustomerTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => NestedEnumCustomerTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCustomerTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCustomerTypeFilterSchema).optional()
}).strict();

export const NestedEnumLeadStatusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLeadStatusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional().nullable(),
  in: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadStatusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadStatusNullableFilterSchema).optional()
}).strict();

export const NestedEnumLeadSourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLeadSourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadSourceSchema).optional().nullable(),
  in: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => LeadSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NestedEnumLeadSourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadSourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadSourceNullableFilterSchema).optional()
}).strict();

export const NestedEnumInteractionTypeFilterSchema: z.ZodType<Prisma.NestedEnumInteractionTypeFilter> = z.object({
  equals: z.lazy(() => InteractionTypeSchema).optional(),
  in: z.lazy(() => InteractionTypeSchema).array().optional(),
  notIn: z.lazy(() => InteractionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => NestedEnumInteractionTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumInteractionMediumFilterSchema: z.ZodType<Prisma.NestedEnumInteractionMediumFilter> = z.object({
  equals: z.lazy(() => InteractionMediumSchema).optional(),
  in: z.lazy(() => InteractionMediumSchema).array().optional(),
  notIn: z.lazy(() => InteractionMediumSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => NestedEnumInteractionMediumFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumInteractionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumInteractionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InteractionTypeSchema).optional(),
  in: z.lazy(() => InteractionTypeSchema).array().optional(),
  notIn: z.lazy(() => InteractionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => NestedEnumInteractionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInteractionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInteractionTypeFilterSchema).optional()
}).strict();

export const NestedEnumInteractionMediumWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumInteractionMediumWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InteractionMediumSchema).optional(),
  in: z.lazy(() => InteractionMediumSchema).array().optional(),
  notIn: z.lazy(() => InteractionMediumSchema).array().optional(),
  not: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => NestedEnumInteractionMediumWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInteractionMediumFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInteractionMediumFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedEnumLeadStatusFilterSchema: z.ZodType<Prisma.NestedEnumLeadStatusFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional(),
  in: z.lazy(() => LeadStatusSchema).array().optional(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusFilterSchema) ]).optional(),
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const NestedEnumLeadStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLeadStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LeadStatusSchema).optional(),
  in: z.lazy(() => LeadStatusSchema).array().optional(),
  notIn: z.lazy(() => LeadStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NestedEnumLeadStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLeadStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLeadStatusFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedEnumProjectStatusFilterSchema: z.ZodType<Prisma.NestedEnumProjectStatusFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalNullableFilterSchema: z.ZodType<Prisma.NestedDecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumProjectStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumProjectStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProjectStatusSchema).optional(),
  in: z.lazy(() => ProjectStatusSchema).array().optional(),
  notIn: z.lazy(() => ProjectStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => NestedEnumProjectStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProjectStatusFilterSchema).optional()
}).strict();

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const NestedEnumTaskStatusFilterSchema: z.ZodType<Prisma.NestedEnumTaskStatusFilter> = z.object({
  equals: z.lazy(() => TaskStatusSchema).optional(),
  in: z.lazy(() => TaskStatusSchema).array().optional(),
  notIn: z.lazy(() => TaskStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => NestedEnumTaskStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPriorityFilterSchema: z.ZodType<Prisma.NestedEnumPriorityFilter> = z.object({
  equals: z.lazy(() => PrioritySchema).optional(),
  in: z.lazy(() => PrioritySchema).array().optional(),
  notIn: z.lazy(() => PrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => NestedEnumPriorityFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTaskStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTaskStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TaskStatusSchema).optional(),
  in: z.lazy(() => TaskStatusSchema).array().optional(),
  notIn: z.lazy(() => TaskStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => NestedEnumTaskStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTaskStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTaskStatusFilterSchema).optional()
}).strict();

export const NestedEnumPriorityWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PrioritySchema).optional(),
  in: z.lazy(() => PrioritySchema).array().optional(),
  notIn: z.lazy(() => PrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => NestedEnumPriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPriorityFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedEnumInvoiceStatusFilterSchema: z.ZodType<Prisma.NestedEnumInvoiceStatusFilter> = z.object({
  equals: z.lazy(() => InvoiceStatusSchema).optional(),
  in: z.lazy(() => InvoiceStatusSchema).array().optional(),
  notIn: z.lazy(() => InvoiceStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => NestedEnumInvoiceStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumInvoiceStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumInvoiceStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InvoiceStatusSchema).optional(),
  in: z.lazy(() => InvoiceStatusSchema).array().optional(),
  notIn: z.lazy(() => InvoiceStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => NestedEnumInvoiceStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvoiceStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvoiceStatusFilterSchema).optional()
}).strict();

export const NestedEnumPaymentMethodFilterSchema: z.ZodType<Prisma.NestedEnumPaymentMethodFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional(),
  in: z.lazy(() => PaymentMethodSchema).array().optional(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPaymentStatusFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPaymentMethodWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentMethodWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentMethodSchema).optional(),
  in: z.lazy(() => PaymentMethodSchema).array().optional(),
  notIn: z.lazy(() => PaymentMethodSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => NestedEnumPaymentMethodWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentMethodFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentMethodFilterSchema).optional()
}).strict();

export const NestedEnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const NestedEnumExpenseStatusFilterSchema: z.ZodType<Prisma.NestedEnumExpenseStatusFilter> = z.object({
  equals: z.lazy(() => ExpenseStatusSchema).optional(),
  in: z.lazy(() => ExpenseStatusSchema).array().optional(),
  notIn: z.lazy(() => ExpenseStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => NestedEnumExpenseStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumExpenseStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumExpenseStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExpenseStatusSchema).optional(),
  in: z.lazy(() => ExpenseStatusSchema).array().optional(),
  notIn: z.lazy(() => ExpenseStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => NestedEnumExpenseStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExpenseStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExpenseStatusFilterSchema).optional()
}).strict();

export const NestedEnumAttendeeStatusFilterSchema: z.ZodType<Prisma.NestedEnumAttendeeStatusFilter> = z.object({
  equals: z.lazy(() => AttendeeStatusSchema).optional(),
  in: z.lazy(() => AttendeeStatusSchema).array().optional(),
  notIn: z.lazy(() => AttendeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => NestedEnumAttendeeStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumAttendeeStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAttendeeStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AttendeeStatusSchema).optional(),
  in: z.lazy(() => AttendeeStatusSchema).array().optional(),
  notIn: z.lazy(() => AttendeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => NestedEnumAttendeeStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAttendeeStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAttendeeStatusFilterSchema).optional()
}).strict();

export const NestedEnumNotificationTypeFilterSchema: z.ZodType<Prisma.NestedEnumNotificationTypeFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumNotificationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumNotificationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional()
}).strict();

export const NestedEnumInvitationStatusFilterSchema: z.ZodType<Prisma.NestedEnumInvitationStatusFilter> = z.object({
  equals: z.lazy(() => InvitationStatusSchema).optional(),
  in: z.lazy(() => InvitationStatusSchema).array().optional(),
  notIn: z.lazy(() => InvitationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => NestedEnumInvitationStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumInvitationStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumInvitationStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InvitationStatusSchema).optional(),
  in: z.lazy(() => InvitationStatusSchema).array().optional(),
  notIn: z.lazy(() => InvitationStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => NestedEnumInvitationStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInvitationStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInvitationStatusFilterSchema).optional()
}).strict();

export const NestedEnumEmployeeStatusFilterSchema: z.ZodType<Prisma.NestedEnumEmployeeStatusFilter> = z.object({
  equals: z.lazy(() => EmployeeStatusSchema).optional(),
  in: z.lazy(() => EmployeeStatusSchema).array().optional(),
  notIn: z.lazy(() => EmployeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => NestedEnumEmployeeStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEmployeeStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEmployeeStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EmployeeStatusSchema).optional(),
  in: z.lazy(() => EmployeeStatusSchema).array().optional(),
  notIn: z.lazy(() => EmployeeStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => NestedEnumEmployeeStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEmployeeStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEmployeeStatusFilterSchema).optional()
}).strict();

export const NestedEnumPayrollStatusFilterSchema: z.ZodType<Prisma.NestedEnumPayrollStatusFilter> = z.object({
  equals: z.lazy(() => PayrollStatusSchema).optional(),
  in: z.lazy(() => PayrollStatusSchema).array().optional(),
  notIn: z.lazy(() => PayrollStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => NestedEnumPayrollStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPayrollStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPayrollStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PayrollStatusSchema).optional(),
  in: z.lazy(() => PayrollStatusSchema).array().optional(),
  notIn: z.lazy(() => PayrollStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => NestedEnumPayrollStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPayrollStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPayrollStatusFilterSchema).optional()
}).strict();

export const NestedEnumTimeOffTypeFilterSchema: z.ZodType<Prisma.NestedEnumTimeOffTypeFilter> = z.object({
  equals: z.lazy(() => TimeOffTypeSchema).optional(),
  in: z.lazy(() => TimeOffTypeSchema).array().optional(),
  notIn: z.lazy(() => TimeOffTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => NestedEnumTimeOffTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTimeOffStatusFilterSchema: z.ZodType<Prisma.NestedEnumTimeOffStatusFilter> = z.object({
  equals: z.lazy(() => TimeOffStatusSchema).optional(),
  in: z.lazy(() => TimeOffStatusSchema).array().optional(),
  notIn: z.lazy(() => TimeOffStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => NestedEnumTimeOffStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTimeOffTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTimeOffTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TimeOffTypeSchema).optional(),
  in: z.lazy(() => TimeOffTypeSchema).array().optional(),
  notIn: z.lazy(() => TimeOffTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => NestedEnumTimeOffTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTimeOffTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTimeOffTypeFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumTimeOffStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTimeOffStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TimeOffStatusSchema).optional(),
  in: z.lazy(() => TimeOffStatusSchema).array().optional(),
  notIn: z.lazy(() => TimeOffStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => NestedEnumTimeOffStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTimeOffStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTimeOffStatusFilterSchema).optional()
}).strict();

export const NestedEnumReviewStatusFilterSchema: z.ZodType<Prisma.NestedEnumReviewStatusFilter> = z.object({
  equals: z.lazy(() => ReviewStatusSchema).optional(),
  in: z.lazy(() => ReviewStatusSchema).array().optional(),
  notIn: z.lazy(() => ReviewStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => NestedEnumReviewStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumReviewStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumReviewStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ReviewStatusSchema).optional(),
  in: z.lazy(() => ReviewStatusSchema).array().optional(),
  notIn: z.lazy(() => ReviewStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => NestedEnumReviewStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumReviewStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumReviewStatusFilterSchema).optional()
}).strict();

export const NestedEnumCampaignTypeFilterSchema: z.ZodType<Prisma.NestedEnumCampaignTypeFilter> = z.object({
  equals: z.lazy(() => CampaignTypeSchema).optional(),
  in: z.lazy(() => CampaignTypeSchema).array().optional(),
  notIn: z.lazy(() => CampaignTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => NestedEnumCampaignTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumCampaignStatusFilterSchema: z.ZodType<Prisma.NestedEnumCampaignStatusFilter> = z.object({
  equals: z.lazy(() => CampaignStatusSchema).optional(),
  in: z.lazy(() => CampaignStatusSchema).array().optional(),
  notIn: z.lazy(() => CampaignStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => NestedEnumCampaignStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumCampaignTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCampaignTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CampaignTypeSchema).optional(),
  in: z.lazy(() => CampaignTypeSchema).array().optional(),
  notIn: z.lazy(() => CampaignTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => NestedEnumCampaignTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCampaignTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCampaignTypeFilterSchema).optional()
}).strict();

export const NestedEnumCampaignStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCampaignStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CampaignStatusSchema).optional(),
  in: z.lazy(() => CampaignStatusSchema).array().optional(),
  notIn: z.lazy(() => CampaignStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => NestedEnumCampaignStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCampaignStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCampaignStatusFilterSchema).optional()
}).strict();

export const NestedEnumSocialPlatformFilterSchema: z.ZodType<Prisma.NestedEnumSocialPlatformFilter> = z.object({
  equals: z.lazy(() => SocialPlatformSchema).optional(),
  in: z.lazy(() => SocialPlatformSchema).array().optional(),
  notIn: z.lazy(() => SocialPlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => NestedEnumSocialPlatformFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSocialPlatformWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSocialPlatformWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SocialPlatformSchema).optional(),
  in: z.lazy(() => SocialPlatformSchema).array().optional(),
  notIn: z.lazy(() => SocialPlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => NestedEnumSocialPlatformWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSocialPlatformFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSocialPlatformFilterSchema).optional()
}).strict();

export const NestedEnumFinancialReportTypeFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportTypeFilter> = z.object({
  equals: z.lazy(() => FinancialReportTypeSchema).optional(),
  in: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => NestedEnumFinancialReportTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFinancialReportStatusFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportStatusFilter> = z.object({
  equals: z.lazy(() => FinancialReportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => NestedEnumFinancialReportStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFinancialReportTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportTypeSchema).optional(),
  in: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => NestedEnumFinancialReportTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportTypeFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumFinancialReportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => NestedEnumFinancialReportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportStatusFilterSchema).optional()
}).strict();

export const NestedEnumFinancialReportExportFormatFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportExportFormatFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportFormatSchema).optional(),
  in: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFinancialReportExportStatusFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportExportStatusFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFinancialReportExportFormatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportExportFormatWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportFormatSchema).optional(),
  in: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportFormatSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => NestedEnumFinancialReportExportFormatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportExportFormatFilterSchema).optional()
}).strict();

export const NestedEnumFinancialReportExportStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportExportStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  in: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  notIn: z.lazy(() => FinancialReportExportStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => NestedEnumFinancialReportExportStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportExportStatusFilterSchema).optional()
}).strict();

export const NestedEnumFinancialReportScheduleFrequencyFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportScheduleFrequencyFilter> = z.object({
  equals: z.lazy(() => FinancialReportScheduleFrequencySchema).optional(),
  in: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  notIn: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFinancialReportScheduleFrequencyWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFinancialReportScheduleFrequencyWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FinancialReportScheduleFrequencySchema).optional(),
  in: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  notIn: z.lazy(() => FinancialReportScheduleFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => NestedEnumFinancialReportScheduleFrequencyWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFinancialReportScheduleFrequencyFilterSchema).optional()
}).strict();

export const RolePermissionCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateWithoutPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUncheckedCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateWithoutPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional()
}).strict();

export const RolePermissionCreateOrConnectWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateOrConnectWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionCreateManyPermissionInputEnvelopeSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolePermissionCreateManyPermissionInputSchema),z.lazy(() => RolePermissionCreateManyPermissionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomRolePermissionCreateWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateWithoutPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  customRole: z.lazy(() => CustomRoleCreateNestedOneWithoutPermissionsInputSchema)
}).strict();

export const CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedCreateWithoutPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  customRoleId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionCreateOrConnectWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateOrConnectWithoutPermissionInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const CustomRolePermissionCreateManyPermissionInputEnvelopeSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomRolePermissionCreateManyPermissionInputSchema),z.lazy(() => CustomRolePermissionCreateManyPermissionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateManyMutationInputSchema),z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionScalarWhereInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUpsertWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomRolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
}).strict();

export const CustomRolePermissionUpdateManyWithWhereWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyWithWhereWithoutPermissionInput> = z.object({
  where: z.lazy(() => CustomRolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomRolePermissionUpdateManyMutationInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutPermissionInputSchema) ]),
}).strict();

export const CustomRolePermissionScalarWhereInputSchema: z.ZodType<Prisma.CustomRolePermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRolePermissionScalarWhereInputSchema),z.lazy(() => CustomRolePermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customRoleId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  permissionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PermissionCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateWithoutRolePermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutRolePermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const PermissionUpsertWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpsertWithoutRolePermissionsInput> = z.object({
  update: z.union([ z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolePermissionsInputSchema) ]),
  where: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const PermissionUpdateToOneWithWhereWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateToOneWithWhereWithoutRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolePermissionsInputSchema) ]),
}).strict();

export const PermissionUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutRolePermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutRolePermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customRolePermissions: z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCustomRolesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCustomRolesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCustomRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomRolesInputSchema) ]),
}).strict();

export const CustomRolePermissionCreateWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateWithoutCustomRoleInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutCustomRolePermissionsInputSchema)
}).strict();

export const CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedCreateWithoutCustomRoleInput> = z.object({
  id: z.string().cuid().optional(),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionCreateOrConnectWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateOrConnectWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema) ]),
}).strict();

export const CustomRolePermissionCreateManyCustomRoleInputEnvelopeSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyCustomRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputSchema),z.lazy(() => CustomRolePermissionCreateManyCustomRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserOrganizationCreateWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationCreateWithoutCustomRoleInput> = z.object({
  userId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  joinedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema)
}).strict();

export const UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedCreateWithoutCustomRoleInput> = z.object({
  userId: z.string(),
  organizationId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationCreateOrConnectWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationCreateOrConnectWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema) ]),
}).strict();

export const UserOrganizationCreateManyCustomRoleInputEnvelopeSchema: z.ZodType<Prisma.UserOrganizationCreateManyCustomRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserOrganizationCreateManyCustomRoleInputSchema),z.lazy(() => UserOrganizationCreateManyCustomRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCustomRolesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomRolesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomRolesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCustomRolesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomRolesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomRolesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCustomRolesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCustomRolesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCustomRolesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUpsertWithWhereUniqueWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomRolePermissionUpdateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateWithoutCustomRoleInputSchema) ]),
  create: z.union([ z.lazy(() => CustomRolePermissionCreateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedCreateWithoutCustomRoleInputSchema) ]),
}).strict();

export const CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateWithWhereUniqueWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => CustomRolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomRolePermissionUpdateWithoutCustomRoleInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateWithoutCustomRoleInputSchema) ]),
}).strict();

export const CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyWithWhereWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => CustomRolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomRolePermissionUpdateManyMutationInputSchema),z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleInputSchema) ]),
}).strict();

export const UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUpsertWithWhereUniqueWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateWithoutCustomRoleInputSchema) ]),
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutCustomRoleInputSchema) ]),
}).strict();

export const UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUpdateWithWhereUniqueWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserOrganizationUpdateWithoutCustomRoleInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateWithoutCustomRoleInputSchema) ]),
}).strict();

export const UserOrganizationUpdateManyWithWhereWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUpdateManyWithWhereWithoutCustomRoleInput> = z.object({
  where: z.lazy(() => UserOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserOrganizationUpdateManyMutationInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutCustomRoleInputSchema) ]),
}).strict();

export const UserOrganizationScalarWhereInputSchema: z.ZodType<Prisma.UserOrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOrganizationScalarWhereInputSchema),z.lazy(() => UserOrganizationScalarWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleNullableFilterSchema),z.lazy(() => UserRoleSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  joinedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomRoleCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleCreateWithoutPermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomRolesInputSchema),
  userAssignments: z.lazy(() => UserOrganizationCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleUncheckedCreateWithoutPermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => CustomRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const PermissionCreateWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateWithoutCustomRolePermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  rolePermissions: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUncheckedCreateWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutCustomRolePermissionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  module: z.string(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutCustomRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCustomRolePermissionsInputSchema) ]),
}).strict();

export const CustomRoleUpsertWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleUpsertWithoutPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => CustomRoleUpdateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutPermissionsInputSchema) ]),
  where: z.lazy(() => CustomRoleWhereInputSchema).optional()
}).strict();

export const CustomRoleUpdateToOneWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleUpdateToOneWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => CustomRoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomRoleUpdateWithoutPermissionsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const CustomRoleUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomRolesNestedInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const PermissionUpsertWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpsertWithoutCustomRolePermissionsInput> = z.object({
  update: z.union([ z.lazy(() => PermissionUpdateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutCustomRolePermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCustomRolePermissionsInputSchema) ]),
  where: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const PermissionUpdateToOneWithWhereWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateToOneWithWhereWithoutCustomRolePermissionsInput> = z.object({
  where: z.lazy(() => PermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutCustomRolePermissionsInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutCustomRolePermissionsInputSchema) ]),
}).strict();

export const PermissionUpdateWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutCustomRolePermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutCustomRolePermissionsInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutCustomRolePermissionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  rolePermissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const UserOrganizationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationCreateWithoutOrganizationInput> = z.object({
  userId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  joinedAt: z.coerce.date().optional(),
  customRole: z.lazy(() => CustomRoleCreateNestedOneWithoutUserAssignmentsInputSchema).optional()
}).strict();

export const UserOrganizationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedCreateWithoutOrganizationInput> = z.object({
  userId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  customRoleId: z.string().optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserOrganizationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.UserOrganizationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserOrganizationCreateManyOrganizationInputSchema),z.lazy(() => UserOrganizationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  interactions: z.lazy(() => CustomerInteractionCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyOrganizationInputSchema),z.lazy(() => CustomerCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProjectCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProjectCreateManyOrganizationInputSchema),z.lazy(() => ProjectCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TaskCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyOrganizationInputSchema),z.lazy(() => TaskCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvoiceCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInvoicesInputSchema),
  items: z.lazy(() => InvoiceItemCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvoiceCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvoiceCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvoiceCreateManyOrganizationInputSchema),z.lazy(() => InvoiceCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => ExpenseCategoryCreateNestedOneWithoutExpensesInputSchema).optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutExpensesInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyOrganizationInputSchema),z.lazy(() => ExpenseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCategoryCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const ExpenseCategoryCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCategoryCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCategoryCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCategoryCreateManyOrganizationInputSchema),z.lazy(() => ExpenseCategoryCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseTagCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseToTagCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  expenses: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const ExpenseTagCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseTagCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ExpenseTagCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseTagCreateManyOrganizationInputSchema),z.lazy(() => ExpenseTagCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EmployeeCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payrolls: z.lazy(() => PayrollCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payrolls: z.lazy(() => PayrollUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EmployeeCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.EmployeeCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EmployeeCreateManyOrganizationInputSchema),z.lazy(() => EmployeeCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MarketingCampaignCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  emailCampaigns: z.lazy(() => EmailCampaignCreateNestedManyWithoutCampaignInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedCreateNestedManyWithoutCampaignInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MarketingCampaignCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MarketingCampaignCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MarketingCampaignCreateManyOrganizationInputSchema),z.lazy(() => MarketingCampaignCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyOrganizationInputSchema),z.lazy(() => InvitationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomRoleCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => CustomRolePermissionCreateNestedManyWithoutCustomRoleInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomRoleCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.CustomRoleCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomRoleCreateManyOrganizationInputSchema),z.lazy(() => CustomRoleCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FinancialReportCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reportData: z.lazy(() => FinancialReportDataCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FinancialReportCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.FinancialReportCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FinancialReportCreateManyOrganizationInputSchema),z.lazy(() => FinancialReportCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserOrganizationCreateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserOrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserOrganizationUpdateWithoutOrganizationInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserOrganizationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserOrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserOrganizationUpdateManyMutationInputSchema),z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerScalarWhereInputSchema: z.ZodType<Prisma.CustomerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumCustomerTypeFilterSchema),z.lazy(() => CustomerTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusNullableFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional().nullable(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  company: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumLeadSourceNullableFilterSchema),z.lazy(() => LeadSourceSchema) ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProjectUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectUpdateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutOrganizationInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectUpdateManyMutationInputSchema),z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProjectScalarWhereInputSchema: z.ZodType<Prisma.ProjectScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectScalarWhereInputSchema),z.lazy(() => ProjectScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumProjectStatusFilterSchema),z.lazy(() => ProjectStatusSchema) ]).optional(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutOrganizationInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const TaskScalarWhereInputSchema: z.ZodType<Prisma.TaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parentTaskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTaskStatusFilterSchema),z.lazy(() => TaskStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumPriorityFilterSchema),z.lazy(() => PrioritySchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedToId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  estimatedHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  actualHours: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerInteractionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const InvoiceUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvoiceUpdateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvoiceUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvoiceUpdateWithoutOrganizationInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvoiceUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvoiceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvoiceUpdateManyMutationInputSchema),z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const InvoiceScalarWhereInputSchema: z.ZodType<Prisma.InvoiceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceScalarWhereInputSchema),z.lazy(() => InvoiceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerEmail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customerPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  invoiceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvoiceStatusFilterSchema),z.lazy(() => InvoiceStatusSchema) ]).optional(),
  issueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  paymentTerms: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  poNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shippingAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  totalAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  paidAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  internalNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  footer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logoUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  viewedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastReminder: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseScalarWhereInputSchema: z.ZodType<Prisma.ExpenseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customCategory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  receipt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vendor: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumExpenseStatusFilterSchema),z.lazy(() => ExpenseStatusSchema) ]).optional(),
  reimbursable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  reimbursedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  submittedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  rejectionReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseCategoryUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseCategoryUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseCategoryUpdateManyMutationInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCategoryScalarWhereInputSchema: z.ZodType<Prisma.ExpenseCategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseCategoryScalarWhereInputSchema),z.lazy(() => ExpenseCategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseCategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseCategoryScalarWhereInputSchema),z.lazy(() => ExpenseCategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseTagUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseTagUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseTagUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseTagUpdateManyMutationInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseTagScalarWhereInputSchema: z.ZodType<Prisma.ExpenseTagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseTagScalarWhereInputSchema),z.lazy(() => ExpenseTagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseTagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseTagScalarWhereInputSchema),z.lazy(() => ExpenseTagScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EmployeeUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EmployeeUpdateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const EmployeeUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EmployeeUpdateWithoutOrganizationInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const EmployeeUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => EmployeeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EmployeeUpdateManyMutationInputSchema),z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const EmployeeScalarWhereInputSchema: z.ZodType<Prisma.EmployeeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EmployeeScalarWhereInputSchema),z.lazy(() => EmployeeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmployeeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmployeeScalarWhereInputSchema),z.lazy(() => EmployeeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  position: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  department: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  hireDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  terminationDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEmployeeStatusFilterSchema),z.lazy(() => EmployeeStatusSchema) ]).optional(),
  managerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  taxId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutOrganizationInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MarketingCampaignUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MarketingCampaignScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MarketingCampaignUpdateManyMutationInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MarketingCampaignScalarWhereInputSchema: z.ZodType<Prisma.MarketingCampaignScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MarketingCampaignScalarWhereInputSchema),z.lazy(() => MarketingCampaignScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MarketingCampaignScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MarketingCampaignScalarWhereInputSchema),z.lazy(() => MarketingCampaignScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumCampaignTypeFilterSchema),z.lazy(() => CampaignTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumCampaignStatusFilterSchema),z.lazy(() => CampaignStatusSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  budget: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetAudience: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumInvitationStatusFilterSchema),z.lazy(() => InvitationStatusSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  acceptedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomRoleUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomRoleUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomRoleUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomRoleUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomRoleUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomRoleUpdateManyMutationInputSchema),z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomRoleScalarWhereInputSchema: z.ZodType<Prisma.CustomRoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomRoleScalarWhereInputSchema),z.lazy(() => CustomRoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomRoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomRoleScalarWhereInputSchema),z.lazy(() => CustomRoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FinancialReportUpdateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FinancialReportUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FinancialReportUpdateWithoutOrganizationInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const FinancialReportUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FinancialReportScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FinancialReportUpdateManyMutationInputSchema),z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const FinancialReportScalarWhereInputSchema: z.ZodType<Prisma.FinancialReportScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportScalarWhereInputSchema),z.lazy(() => FinancialReportScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScalarWhereInputSchema),z.lazy(() => FinancialReportScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumFinancialReportTypeFilterSchema),z.lazy(() => FinancialReportTypeSchema) ]).optional(),
  template: z.lazy(() => JsonFilterSchema).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  dateRange: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFinancialReportStatusFilterSchema),z.lazy(() => FinancialReportStatusSchema) ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  generatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isTemplate: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isScheduled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  scheduleConfig: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const CustomRoleCreateWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleCreateWithoutUserAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomRolesInputSchema),
  permissions: z.lazy(() => CustomRolePermissionCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleUncheckedCreateWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleUncheckedCreateWithoutUserAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedCreateNestedManyWithoutCustomRoleInputSchema).optional()
}).strict();

export const CustomRoleCreateOrConnectWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleCreateOrConnectWithoutUserAssignmentsInput> = z.object({
  where: z.lazy(() => CustomRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutUserAssignmentsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const CustomRoleUpsertWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleUpsertWithoutUserAssignmentsInput> = z.object({
  update: z.union([ z.lazy(() => CustomRoleUpdateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutUserAssignmentsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomRoleCreateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedCreateWithoutUserAssignmentsInputSchema) ]),
  where: z.lazy(() => CustomRoleWhereInputSchema).optional()
}).strict();

export const CustomRoleUpdateToOneWithWhereWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleUpdateToOneWithWhereWithoutUserAssignmentsInput> = z.object({
  where: z.lazy(() => CustomRoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomRoleUpdateWithoutUserAssignmentsInputSchema),z.lazy(() => CustomRoleUncheckedUpdateWithoutUserAssignmentsInputSchema) ]),
}).strict();

export const CustomRoleUpdateWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleUpdateWithoutUserAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomRolesNestedInputSchema).optional(),
  permissions: z.lazy(() => CustomRolePermissionUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleUncheckedUpdateWithoutUserAssignmentsInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateWithoutUserAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const CustomerInteractionCreateWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutCustomerInteractionInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutCustomerInteractionInputSchema).optional()
}).strict();

export const CustomerInteractionCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => CustomerInteractionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const CustomerInteractionCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.CustomerInteractionCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerInteractionCreateManyCustomerInputSchema),z.lazy(() => CustomerInteractionCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DealCreateWithoutCustomerInputSchema: z.ZodType<Prisma.DealCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DealUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.DealUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DealCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.DealCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => DealWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const DealCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.DealCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DealCreateManyCustomerInputSchema),z.lazy(() => DealCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvoiceCreateWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvoicesInputSchema),
  items: z.lazy(() => InvoiceItemCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const InvoiceCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.InvoiceCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvoiceCreateManyCustomerInputSchema),z.lazy(() => InvoiceCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCustomersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => CustomerInteractionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerInteractionUpdateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => CustomerInteractionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerInteractionUpdateWithoutCustomerInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const CustomerInteractionUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => CustomerInteractionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerInteractionUpdateManyMutationInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const CustomerInteractionScalarWhereInputSchema: z.ZodType<Prisma.CustomerInteractionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerInteractionScalarWhereInputSchema),z.lazy(() => CustomerInteractionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerInteractionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerInteractionScalarWhereInputSchema),z.lazy(() => CustomerInteractionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumInteractionTypeFilterSchema),z.lazy(() => InteractionTypeSchema) ]).optional(),
  medium: z.union([ z.lazy(() => EnumInteractionMediumFilterSchema),z.lazy(() => InteractionMediumSchema) ]).optional(),
  subject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  content: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DealUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.DealUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => DealWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DealUpdateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => DealCreateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const DealUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.DealUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => DealWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DealUpdateWithoutCustomerInputSchema),z.lazy(() => DealUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const DealUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.DealUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => DealScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DealUpdateManyMutationInputSchema),z.lazy(() => DealUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const DealScalarWhereInputSchema: z.ZodType<Prisma.DealScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DealScalarWhereInputSchema),z.lazy(() => DealScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DealScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DealScalarWhereInputSchema),z.lazy(() => DealScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumLeadStatusFilterSchema),z.lazy(() => LeadStatusSchema) ]).optional(),
  stage: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  probability: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  expectedCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  actualCloseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvoiceUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvoiceUpdateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const InvoiceUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvoiceUpdateWithoutCustomerInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const InvoiceUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => InvoiceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvoiceUpdateManyMutationInputSchema),z.lazy(() => InvoiceUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const CustomerCreateWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutInteractionsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  deals: z.lazy(() => DealCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutInteractionsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  deals: z.lazy(() => DealUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutInteractionsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInteractionsInputSchema) ]),
}).strict();

export const TaskCreateWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskCreateWithoutCustomerInteractionInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutCustomerInteractionInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutCustomerInteractionInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema) ]),
}).strict();

export const TaskCreateManyCustomerInteractionInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyCustomerInteractionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyCustomerInteractionInputSchema),z.lazy(() => TaskCreateManyCustomerInteractionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerUpsertWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutInteractionsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInteractionsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInteractionsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutInteractionsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutInteractionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInteractionsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutInteractionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  deals: z.lazy(() => DealUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutInteractionsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutInteractionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deals: z.lazy(() => DealUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithWhereUniqueWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutCustomerInteractionInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutCustomerInteractionInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCustomerInteractionInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutCustomerInteractionInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutCustomerInteractionInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutCustomerInteractionInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutCustomerInteractionInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutCustomerInteractionInputSchema) ]),
}).strict();

export const CustomerCreateWithoutDealsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutDealsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  interactions: z.lazy(() => CustomerInteractionCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutDealsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutDealsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutDealsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutDealsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutDealsInputSchema) ]),
}).strict();

export const CustomerUpsertWithoutDealsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutDealsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutDealsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutDealsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutDealsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutDealsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutDealsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutDealsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutDealsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutDealsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  interactions: z.lazy(() => CustomerInteractionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutDealsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutDealsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProjectsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const TaskCreateWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TaskCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyProjectInputSchema),z.lazy(() => TaskCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectResourceCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceCreateWithoutProjectInput> = z.object({
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectResourceUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedCreateWithoutProjectInput> = z.object({
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectResourceCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectResourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectResourceCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ProjectResourceCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProjectResourceCreateManyProjectInputSchema),z.lazy(() => ProjectResourceCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeEntryCreateWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutTimeEntriesInputSchema).optional()
}).strict();

export const TimeEntryUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeEntryCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TimeEntryCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.TimeEntryCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TimeEntryCreateManyProjectInputSchema),z.lazy(() => TimeEntryCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  category: z.lazy(() => ExpenseCategoryCreateNestedOneWithoutExpensesInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutProjectInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ExpenseCreateManyProjectInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyProjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyProjectInputSchema),z.lazy(() => ExpenseCreateManyProjectInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProjectsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProjectsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProjectsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProjectsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutProjectInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ProjectResourceUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectResourceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectResourceUpdateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectResourceCreateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectResourceUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectResourceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectResourceUpdateWithoutProjectInputSchema),z.lazy(() => ProjectResourceUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ProjectResourceUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ProjectResourceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectResourceUpdateManyMutationInputSchema),z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const ProjectResourceScalarWhereInputSchema: z.ZodType<Prisma.ProjectResourceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectResourceScalarWhereInputSchema),z.lazy(() => ProjectResourceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectResourceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectResourceScalarWhereInputSchema),z.lazy(() => ProjectResourceScalarWhereInputSchema).array() ]).optional(),
  projectId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assigneeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allocation: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  hourlyRate: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TimeEntryUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const TimeEntryUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeEntryUpdateWithoutProjectInputSchema),z.lazy(() => TimeEntryUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const TimeEntryUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => TimeEntryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeEntryUpdateManyMutationInputSchema),z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const TimeEntryScalarWhereInputSchema: z.ZodType<Prisma.TimeEntryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeEntryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeEntryScalarWhereInputSchema),z.lazy(() => TimeEntryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  projectId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  taskId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  billable: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiced: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutProjectInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutProjectInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutProjectInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutProjectInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutProjectInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutProjectInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const ProjectCreateWithoutTasksInputSchema: z.ZodType<Prisma.ProjectCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  resources: z.lazy(() => ProjectResourceCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  resources: z.lazy(() => ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const TaskCreateWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskCreateWithoutSubtasksInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutSubtasksInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutSubtasksInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedCreateWithoutSubtasksInputSchema) ]),
}).strict();

export const TaskCreateWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskCreateWithoutParentTaskInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutParentTaskInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutParentTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema) ]),
}).strict();

export const TaskCreateManyParentTaskInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyParentTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyParentTaskInputSchema),z.lazy(() => TaskCreateManyParentTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeEntryCreateWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTimeEntriesInputSchema).optional()
}).strict();

export const TimeEntryUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeEntryCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TimeEntryCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.TimeEntryCreateManyTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TimeEntryCreateManyTaskInputSchema),z.lazy(() => TimeEntryCreateManyTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CommentCreateWithoutTaskInputSchema: z.ZodType<Prisma.CommentCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CommentUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.CommentUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CommentCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.CommentCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const CommentCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.CommentCreateManyTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CommentCreateManyTaskInputSchema),z.lazy(() => CommentCreateManyTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AttachmentCreateWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AttachmentUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AttachmentCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const AttachmentCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.AttachmentCreateManyTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AttachmentCreateManyTaskInputSchema),z.lazy(() => AttachmentCreateManyTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerInteractionCreateWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInteractionsInputSchema)
}).strict();

export const CustomerInteractionUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerInteractionCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => CustomerInteractionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutTasksInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProjectUpsertWithoutTasksInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutTasksInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutTasksInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskUpsertWithoutSubtasksInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutSubtasksInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedCreateWithoutSubtasksInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutSubtasksInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutSubtasksInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutSubtasksInputSchema) ]),
}).strict();

export const TaskUpdateWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskUpdateWithoutSubtasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutSubtasksInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutSubtasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithWhereUniqueWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutParentTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutParentTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedCreateWithoutParentTaskInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutParentTaskInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutParentTaskInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutParentTaskInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutParentTaskInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskInputSchema) ]),
}).strict();

export const TimeEntryUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeEntryUpdateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TimeEntryCreateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TimeEntryUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TimeEntryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeEntryUpdateWithoutTaskInputSchema),z.lazy(() => TimeEntryUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const TimeEntryUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => TimeEntryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeEntryUpdateManyMutationInputSchema),z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const CommentUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.CommentUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CommentUpdateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => CommentCreateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const CommentUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.CommentUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => CommentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateWithoutTaskInputSchema),z.lazy(() => CommentUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const CommentUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.CommentUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => CommentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CommentUpdateManyMutationInputSchema),z.lazy(() => CommentUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const CommentScalarWhereInputSchema: z.ZodType<Prisma.CommentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CommentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CommentScalarWhereInputSchema),z.lazy(() => CommentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  authorId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AttachmentUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AttachmentUpdateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const AttachmentUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AttachmentUpdateWithoutTaskInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const AttachmentUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => AttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AttachmentUpdateManyMutationInputSchema),z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const AttachmentScalarWhereInputSchema: z.ZodType<Prisma.AttachmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  uploadedById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerInteractionUpsertWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => CustomerInteractionUpdateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerInteractionCreateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => CustomerInteractionWhereInputSchema).optional()
}).strict();

export const CustomerInteractionUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => CustomerInteractionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerInteractionUpdateWithoutTasksInputSchema),z.lazy(() => CustomerInteractionUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const CustomerInteractionUpdateWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInteractionsNestedInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectCreateWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectCreateWithoutResourcesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutResourcesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutResourcesInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutResourcesInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutResourcesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutResourcesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutResourcesInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutResourcesInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutResourcesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutResourcesInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutResourcesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutResourcesInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutResourcesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectCreateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectCreateWithoutTimeEntriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutTimeEntriesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutTimeEntriesInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTimeEntriesInputSchema) ]),
}).strict();

export const TaskCreateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskCreateWithoutTimeEntriesInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTimeEntriesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTimeEntriesInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTimeEntriesInputSchema) ]),
}).strict();

export const ProjectUpsertWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutTimeEntriesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTimeEntriesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutTimeEntriesInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutTimeEntriesInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutTimeEntriesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutTimeEntriesInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutTimeEntriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutTimeEntriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskUpsertWithoutTimeEntriesInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTimeEntriesInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTimeEntriesInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutTimeEntriesInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutTimeEntriesInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTimeEntriesInputSchema) ]),
}).strict();

export const TaskUpdateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTimeEntriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTimeEntriesInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTimeEntriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvoicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvoicesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvoicesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvoicesInputSchema) ]),
}).strict();

export const CustomerCreateWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerCreateWithoutInvoicesInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  interactions: z.lazy(() => CustomerInteractionCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutInvoicesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutInvoicesInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInvoicesInputSchema) ]),
}).strict();

export const InvoiceItemCreateWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemCreateWithoutInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceItemUncheckedCreateWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedCreateWithoutInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceItemCreateOrConnectWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemCreateOrConnectWithoutInvoiceInput> = z.object({
  where: z.lazy(() => InvoiceItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema) ]),
}).strict();

export const InvoiceItemCreateManyInvoiceInputEnvelopeSchema: z.ZodType<Prisma.InvoiceItemCreateManyInvoiceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvoiceItemCreateManyInvoiceInputSchema),z.lazy(() => InvoiceItemCreateManyInvoiceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PaymentCreateWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentCreateWithoutInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentUncheckedCreateWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateWithoutInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentCreateOrConnectWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentCreateOrConnectWithoutInvoiceInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema) ]),
}).strict();

export const PaymentCreateManyInvoiceInputEnvelopeSchema: z.ZodType<Prisma.PaymentCreateManyInvoiceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PaymentCreateManyInvoiceInputSchema),z.lazy(() => PaymentCreateManyInvoiceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvoicesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvoicesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvoicesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvoicesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvoicesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvoicesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvoicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvoicesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvoicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const CustomerUpsertWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutInvoicesInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInvoicesInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutInvoicesInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutInvoicesInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutInvoicesInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutInvoicesInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutInvoicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  interactions: z.lazy(() => CustomerInteractionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutInvoicesInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutInvoicesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput> = z.object({
  where: z.lazy(() => InvoiceItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvoiceItemUpdateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedUpdateWithoutInvoiceInputSchema) ]),
  create: z.union([ z.lazy(() => InvoiceItemCreateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedCreateWithoutInvoiceInputSchema) ]),
}).strict();

export const InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput> = z.object({
  where: z.lazy(() => InvoiceItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvoiceItemUpdateWithoutInvoiceInputSchema),z.lazy(() => InvoiceItemUncheckedUpdateWithoutInvoiceInputSchema) ]),
}).strict();

export const InvoiceItemUpdateManyWithWhereWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUpdateManyWithWhereWithoutInvoiceInput> = z.object({
  where: z.lazy(() => InvoiceItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvoiceItemUpdateManyMutationInputSchema),z.lazy(() => InvoiceItemUncheckedUpdateManyWithoutInvoiceInputSchema) ]),
}).strict();

export const InvoiceItemScalarWhereInputSchema: z.ZodType<Prisma.InvoiceItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvoiceItemScalarWhereInputSchema),z.lazy(() => InvoiceItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvoiceItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvoiceItemScalarWhereInputSchema),z.lazy(() => InvoiceItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  quantity: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  unitPrice: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  taxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  discountRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  subtotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PaymentUpsertWithWhereUniqueWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUpsertWithWhereUniqueWithoutInvoiceInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PaymentUpdateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutInvoiceInputSchema) ]),
  create: z.union([ z.lazy(() => PaymentCreateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutInvoiceInputSchema) ]),
}).strict();

export const PaymentUpdateWithWhereUniqueWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUpdateWithWhereUniqueWithoutInvoiceInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateWithoutInvoiceInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutInvoiceInputSchema) ]),
}).strict();

export const PaymentUpdateManyWithWhereWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithWhereWithoutInvoiceInput> = z.object({
  where: z.lazy(() => PaymentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateManyMutationInputSchema),z.lazy(() => PaymentUncheckedUpdateManyWithoutInvoiceInputSchema) ]),
}).strict();

export const PaymentScalarWhereInputSchema: z.ZodType<Prisma.PaymentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  invoiceId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  method: z.union([ z.lazy(() => EnumPaymentMethodFilterSchema),z.lazy(() => PaymentMethodSchema) ]).optional(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  feeAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  gatewayId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refundedAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvoiceCreateWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceCreateWithoutItemsInput> = z.object({
  id: z.string().cuid().optional(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvoicesInputSchema),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInvoicesInputSchema),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateWithoutItemsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const InvoiceUpsertWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => InvoiceUpdateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => InvoiceWhereInputSchema).optional()
}).strict();

export const InvoiceUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => InvoiceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InvoiceUpdateWithoutItemsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const InvoiceUpdateWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceCreateWithoutPaymentsInput> = z.object({
  id: z.string().cuid().optional(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvoicesInputSchema),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutInvoicesInputSchema),
  items: z.lazy(() => InvoiceItemCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceUncheckedCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceUncheckedCreateWithoutPaymentsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInputSchema).optional()
}).strict();

export const InvoiceCreateOrConnectWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceCreateOrConnectWithoutPaymentsInput> = z.object({
  where: z.lazy(() => InvoiceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutPaymentsInputSchema) ]),
}).strict();

export const InvoiceUpsertWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceUpsertWithoutPaymentsInput> = z.object({
  update: z.union([ z.lazy(() => InvoiceUpdateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutPaymentsInputSchema) ]),
  create: z.union([ z.lazy(() => InvoiceCreateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedCreateWithoutPaymentsInputSchema) ]),
  where: z.lazy(() => InvoiceWhereInputSchema).optional()
}).strict();

export const InvoiceUpdateToOneWithWhereWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceUpdateToOneWithWhereWithoutPaymentsInput> = z.object({
  where: z.lazy(() => InvoiceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InvoiceUpdateWithoutPaymentsInputSchema),z.lazy(() => InvoiceUncheckedUpdateWithoutPaymentsInputSchema) ]),
}).strict();

export const InvoiceUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceUpdateWithoutPaymentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  items: z.lazy(() => InvoiceItemUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateWithoutPaymentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const ExpenseCategoryCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpenseCategoriesInputSchema)
}).strict();

export const ExpenseCategoryUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCategoryCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => ExpenseCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const ProjectCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProjectsInputSchema),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedCreateNestedManyWithoutProjectInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutProjectInputSchema).optional()
}).strict();

export const ProjectCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => ProjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectCreateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const ExpenseToTagCreateWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagCreateWithoutExpenseInput> = z.object({
  tag: z.lazy(() => ExpenseTagCreateNestedOneWithoutExpensesInputSchema)
}).strict();

export const ExpenseToTagUncheckedCreateWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedCreateWithoutExpenseInput> = z.object({
  tagId: z.string()
}).strict();

export const ExpenseToTagCreateOrConnectWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagCreateOrConnectWithoutExpenseInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema) ]),
}).strict();

export const ExpenseToTagCreateManyExpenseInputEnvelopeSchema: z.ZodType<Prisma.ExpenseToTagCreateManyExpenseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseToTagCreateManyExpenseInputSchema),z.lazy(() => ExpenseToTagCreateManyExpenseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => ExpenseCategoryUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCategoryCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => ExpenseCategoryWhereInputSchema).optional()
}).strict();

export const ExpenseCategoryUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => ExpenseCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExpenseCategoryUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseCategoryUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const ExpenseCategoryUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpenseCategoriesNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectUpdateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectCreateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => ProjectWhereInputSchema).optional()
}).strict();

export const ProjectUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => ProjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProjectUpdateWithoutExpensesInputSchema),z.lazy(() => ProjectUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const ProjectUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProjectsNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUpsertWithWhereUniqueWithoutExpenseInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateWithoutExpenseInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutExpenseInputSchema) ]),
}).strict();

export const ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateWithWhereUniqueWithoutExpenseInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseToTagUpdateWithoutExpenseInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateWithoutExpenseInputSchema) ]),
}).strict();

export const ExpenseToTagUpdateManyWithWhereWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyWithWhereWithoutExpenseInput> = z.object({
  where: z.lazy(() => ExpenseToTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseToTagUpdateManyMutationInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutExpenseInputSchema) ]),
}).strict();

export const ExpenseToTagScalarWhereInputSchema: z.ZodType<Prisma.ExpenseToTagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseToTagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseToTagScalarWhereInputSchema),z.lazy(() => ExpenseToTagScalarWhereInputSchema).array() ]).optional(),
  expenseId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  tagId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const OrganizationCreateWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutExpenseCategoriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutExpenseCategoriesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutExpenseCategoriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseCategoriesInputSchema) ]),
}).strict();

export const ExpenseCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutExpensesInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedCreateNestedManyWithoutExpenseInputSchema).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ExpenseCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyCategoryInputSchema),z.lazy(() => ExpenseCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutExpenseCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseCategoriesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutExpenseCategoriesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutExpenseCategoriesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseCategoriesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutExpenseCategoriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutExpenseCategoriesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutExpenseCategoriesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutCategoryInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutExpenseTagsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutExpenseTagsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutExpenseTagsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseTagsInputSchema) ]),
}).strict();

export const ExpenseToTagCreateWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagCreateWithoutTagInput> = z.object({
  expense: z.lazy(() => ExpenseCreateNestedOneWithoutTagsInputSchema)
}).strict();

export const ExpenseToTagUncheckedCreateWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedCreateWithoutTagInput> = z.object({
  expenseId: z.string()
}).strict();

export const ExpenseToTagCreateOrConnectWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagCreateOrConnectWithoutTagInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema) ]),
}).strict();

export const ExpenseToTagCreateManyTagInputEnvelopeSchema: z.ZodType<Prisma.ExpenseToTagCreateManyTagInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseToTagCreateManyTagInputSchema),z.lazy(() => ExpenseToTagCreateManyTagInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutExpenseTagsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseTagsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpenseTagsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutExpenseTagsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutExpenseTagsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpenseTagsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutExpenseTagsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutExpenseTagsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutExpenseTagsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ExpenseToTagUpsertWithWhereUniqueWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUpsertWithWhereUniqueWithoutTagInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseToTagUpdateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateWithoutTagInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseToTagCreateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedCreateWithoutTagInputSchema) ]),
}).strict();

export const ExpenseToTagUpdateWithWhereUniqueWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateWithWhereUniqueWithoutTagInput> = z.object({
  where: z.lazy(() => ExpenseToTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseToTagUpdateWithoutTagInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateWithoutTagInputSchema) ]),
}).strict();

export const ExpenseToTagUpdateManyWithWhereWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyWithWhereWithoutTagInput> = z.object({
  where: z.lazy(() => ExpenseToTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseToTagUpdateManyMutationInputSchema),z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutTagInputSchema) ]),
}).strict();

export const ExpenseCreateWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutTagsInput> = z.object({
  id: z.string().cuid().optional(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  category: z.lazy(() => ExpenseCategoryCreateNestedOneWithoutExpensesInputSchema).optional(),
  project: z.lazy(() => ProjectCreateNestedOneWithoutExpensesInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutTagsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const ExpenseTagCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpenseTagsInputSchema)
}).strict();

export const ExpenseTagUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ExpenseTagCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => ExpenseTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const ExpenseUpsertWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseUpsertWithoutTagsInput> = z.object({
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutTagsInputSchema) ]),
  where: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const ExpenseUpdateToOneWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseUpdateToOneWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => ExpenseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutTagsInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const ExpenseUpdateWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  category: z.lazy(() => ExpenseCategoryUpdateOneWithoutExpensesNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseTagUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => ExpenseTagUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseTagCreateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => ExpenseTagWhereInputSchema).optional()
}).strict();

export const ExpenseTagUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => ExpenseTagWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExpenseTagUpdateWithoutExpensesInputSchema),z.lazy(() => ExpenseTagUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const ExpenseTagUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpenseTagsNestedInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateWithoutCommentsInputSchema: z.ZodType<Prisma.TaskCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutCommentsInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutCommentsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutCommentsInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutCommentsInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCommentsInputSchema) ]),
}).strict();

export const TaskUpsertWithoutCommentsInputSchema: z.ZodType<Prisma.TaskUpsertWithoutCommentsInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutCommentsInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutCommentsInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutCommentsInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutCommentsInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutCommentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutCommentsInputSchema) ]),
}).strict();

export const TaskUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.TaskUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutCommentsInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutCommentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskCreateWithoutAttachmentsInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTasksInputSchema),
  project: z.lazy(() => ProjectCreateNestedOneWithoutTasksInputSchema).optional(),
  parentTask: z.lazy(() => TaskCreateNestedOneWithoutSubtasksInputSchema).optional(),
  subtasks: z.lazy(() => TaskCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentCreateNestedManyWithoutTaskInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionCreateNestedOneWithoutTasksInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutAttachmentsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutParentTaskInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TaskUpsertWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskUpsertWithoutAttachmentsInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAttachmentsInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAttachmentsInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutAttachmentsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TaskUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const CalendarEventAttendeeCreateWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateWithoutEventInput> = z.object({
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedCreateWithoutEventInput> = z.object({
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventAttendeeCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const CalendarEventAttendeeCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CalendarEventAttendeeCreateManyEventInputSchema),z.lazy(() => CalendarEventAttendeeCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CalendarEventAttendeeUpdateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => CalendarEventAttendeeCreateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => CalendarEventAttendeeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CalendarEventAttendeeUpdateWithoutEventInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const CalendarEventAttendeeUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CalendarEventAttendeeUpdateManyMutationInputSchema),z.lazy(() => CalendarEventAttendeeUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const CalendarEventAttendeeScalarWhereInputSchema: z.ZodType<Prisma.CalendarEventAttendeeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema),z.lazy(() => CalendarEventAttendeeScalarWhereInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumAttendeeStatusFilterSchema),z.lazy(() => AttendeeStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CalendarEventCreateWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventCreateWithoutAttendeesInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean().optional(),
  location: z.string().optional().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventUncheckedCreateWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventUncheckedCreateWithoutAttendeesInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  allDay: z.boolean().optional(),
  location: z.string().optional().nullable(),
  organizerId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventCreateOrConnectWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventCreateOrConnectWithoutAttendeesInput> = z.object({
  where: z.lazy(() => CalendarEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutAttendeesInputSchema) ]),
}).strict();

export const CalendarEventUpsertWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventUpsertWithoutAttendeesInput> = z.object({
  update: z.union([ z.lazy(() => CalendarEventUpdateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutAttendeesInputSchema) ]),
  create: z.union([ z.lazy(() => CalendarEventCreateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedCreateWithoutAttendeesInputSchema) ]),
  where: z.lazy(() => CalendarEventWhereInputSchema).optional()
}).strict();

export const CalendarEventUpdateToOneWithWhereWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventUpdateToOneWithWhereWithoutAttendeesInput> = z.object({
  where: z.lazy(() => CalendarEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CalendarEventUpdateWithoutAttendeesInputSchema),z.lazy(() => CalendarEventUncheckedUpdateWithoutAttendeesInputSchema) ]),
}).strict();

export const CalendarEventUpdateWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventUpdateWithoutAttendeesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventUncheckedUpdateWithoutAttendeesInputSchema: z.ZodType<Prisma.CalendarEventUncheckedUpdateWithoutAttendeesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  allDay: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutEmployeesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutEmployeesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutEmployeesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEmployeesInputSchema) ]),
}).strict();

export const PayrollCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PayrollUncheckedCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUncheckedCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PayrollCreateOrConnectWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollCreateOrConnectWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PayrollWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const PayrollCreateManyEmployeeInputEnvelopeSchema: z.ZodType<Prisma.PayrollCreateManyEmployeeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PayrollCreateManyEmployeeInputSchema),z.lazy(() => PayrollCreateManyEmployeeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimeOffCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeOffUncheckedCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUncheckedCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeOffCreateOrConnectWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffCreateOrConnectWithoutEmployeeInput> = z.object({
  where: z.lazy(() => TimeOffWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const TimeOffCreateManyEmployeeInputEnvelopeSchema: z.ZodType<Prisma.TimeOffCreateManyEmployeeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TimeOffCreateManyEmployeeInputSchema),z.lazy(() => TimeOffCreateManyEmployeeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PerformanceReviewCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedCreateWithoutEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PerformanceReviewCreateOrConnectWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewCreateOrConnectWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PerformanceReviewWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const PerformanceReviewCreateManyEmployeeInputEnvelopeSchema: z.ZodType<Prisma.PerformanceReviewCreateManyEmployeeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PerformanceReviewCreateManyEmployeeInputSchema),z.lazy(() => PerformanceReviewCreateManyEmployeeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutEmployeesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEmployeesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutEmployeesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutEmployeesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutEmployeesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutEmployeesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutEmployeesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutEmployeesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutEmployeesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const PayrollUpsertWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUpsertWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PayrollWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PayrollUpdateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedUpdateWithoutEmployeeInputSchema) ]),
  create: z.union([ z.lazy(() => PayrollCreateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const PayrollUpdateWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUpdateWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PayrollWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PayrollUpdateWithoutEmployeeInputSchema),z.lazy(() => PayrollUncheckedUpdateWithoutEmployeeInputSchema) ]),
}).strict();

export const PayrollUpdateManyWithWhereWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUpdateManyWithWhereWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PayrollScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PayrollUpdateManyMutationInputSchema),z.lazy(() => PayrollUncheckedUpdateManyWithoutEmployeeInputSchema) ]),
}).strict();

export const PayrollScalarWhereInputSchema: z.ZodType<Prisma.PayrollScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PayrollScalarWhereInputSchema),z.lazy(() => PayrollScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PayrollScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PayrollScalarWhereInputSchema),z.lazy(() => PayrollScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payPeriodStart: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payPeriodEnd: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  payDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  basicSalary: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  overtime: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bonus: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  tax: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  deductions: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  netAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPayrollStatusFilterSchema),z.lazy(() => PayrollStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TimeOffUpsertWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUpsertWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => TimeOffWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimeOffUpdateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedUpdateWithoutEmployeeInputSchema) ]),
  create: z.union([ z.lazy(() => TimeOffCreateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const TimeOffUpdateWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUpdateWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => TimeOffWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimeOffUpdateWithoutEmployeeInputSchema),z.lazy(() => TimeOffUncheckedUpdateWithoutEmployeeInputSchema) ]),
}).strict();

export const TimeOffUpdateManyWithWhereWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUpdateManyWithWhereWithoutEmployeeInput> = z.object({
  where: z.lazy(() => TimeOffScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimeOffUpdateManyMutationInputSchema),z.lazy(() => TimeOffUncheckedUpdateManyWithoutEmployeeInputSchema) ]),
}).strict();

export const TimeOffScalarWhereInputSchema: z.ZodType<Prisma.TimeOffScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimeOffScalarWhereInputSchema),z.lazy(() => TimeOffScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimeOffScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimeOffScalarWhereInputSchema),z.lazy(() => TimeOffScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumTimeOffTypeFilterSchema),z.lazy(() => TimeOffTypeSchema) ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumTimeOffStatusFilterSchema),z.lazy(() => TimeOffStatusSchema) ]).optional(),
  approvedById: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUpsertWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PerformanceReviewWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PerformanceReviewUpdateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedUpdateWithoutEmployeeInputSchema) ]),
  create: z.union([ z.lazy(() => PerformanceReviewCreateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedCreateWithoutEmployeeInputSchema) ]),
}).strict();

export const PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateWithWhereUniqueWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PerformanceReviewWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PerformanceReviewUpdateWithoutEmployeeInputSchema),z.lazy(() => PerformanceReviewUncheckedUpdateWithoutEmployeeInputSchema) ]),
}).strict();

export const PerformanceReviewUpdateManyWithWhereWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateManyWithWhereWithoutEmployeeInput> = z.object({
  where: z.lazy(() => PerformanceReviewScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PerformanceReviewUpdateManyMutationInputSchema),z.lazy(() => PerformanceReviewUncheckedUpdateManyWithoutEmployeeInputSchema) ]),
}).strict();

export const PerformanceReviewScalarWhereInputSchema: z.ZodType<Prisma.PerformanceReviewScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PerformanceReviewScalarWhereInputSchema),z.lazy(() => PerformanceReviewScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceReviewScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceReviewScalarWhereInputSchema),z.lazy(() => PerformanceReviewScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  employeeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reviewPeriod: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performanceScore: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  strengths: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  improvements: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goals: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  comments: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumReviewStatusFilterSchema),z.lazy(() => ReviewStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EmployeeCreateWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeCreateWithoutPayrollsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutEmployeesInputSchema),
  timeOff: z.lazy(() => TimeOffCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUncheckedCreateWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateWithoutPayrollsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  timeOff: z.lazy(() => TimeOffUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeCreateOrConnectWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeCreateOrConnectWithoutPayrollsInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPayrollsInputSchema) ]),
}).strict();

export const EmployeeUpsertWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeUpsertWithoutPayrollsInput> = z.object({
  update: z.union([ z.lazy(() => EmployeeUpdateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPayrollsInputSchema) ]),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPayrollsInputSchema) ]),
  where: z.lazy(() => EmployeeWhereInputSchema).optional()
}).strict();

export const EmployeeUpdateToOneWithWhereWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeUpdateToOneWithWhereWithoutPayrollsInput> = z.object({
  where: z.lazy(() => EmployeeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EmployeeUpdateWithoutPayrollsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPayrollsInputSchema) ]),
}).strict();

export const EmployeeUpdateWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeUpdateWithoutPayrollsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutEmployeesNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateWithoutPayrollsInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateWithoutPayrollsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeCreateWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeCreateWithoutTimeOffInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutEmployeesInputSchema),
  payrolls: z.lazy(() => PayrollCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUncheckedCreateWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateWithoutTimeOffInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payrolls: z.lazy(() => PayrollUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeCreateOrConnectWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeCreateOrConnectWithoutTimeOffInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutTimeOffInputSchema) ]),
}).strict();

export const EmployeeUpsertWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeUpsertWithoutTimeOffInput> = z.object({
  update: z.union([ z.lazy(() => EmployeeUpdateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutTimeOffInputSchema) ]),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutTimeOffInputSchema) ]),
  where: z.lazy(() => EmployeeWhereInputSchema).optional()
}).strict();

export const EmployeeUpdateToOneWithWhereWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeUpdateToOneWithWhereWithoutTimeOffInput> = z.object({
  where: z.lazy(() => EmployeeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EmployeeUpdateWithoutTimeOffInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutTimeOffInputSchema) ]),
}).strict();

export const EmployeeUpdateWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeUpdateWithoutTimeOffInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutEmployeesNestedInputSchema).optional(),
  payrolls: z.lazy(() => PayrollUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateWithoutTimeOffInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateWithoutTimeOffInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeCreateWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeCreateWithoutPerformanceReviewsInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutEmployeesInputSchema),
  payrolls: z.lazy(() => PayrollCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeUncheckedCreateWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeUncheckedCreateWithoutPerformanceReviewsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payrolls: z.lazy(() => PayrollUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedCreateNestedManyWithoutEmployeeInputSchema).optional()
}).strict();

export const EmployeeCreateOrConnectWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeCreateOrConnectWithoutPerformanceReviewsInput> = z.object({
  where: z.lazy(() => EmployeeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPerformanceReviewsInputSchema) ]),
}).strict();

export const EmployeeUpsertWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeUpsertWithoutPerformanceReviewsInput> = z.object({
  update: z.union([ z.lazy(() => EmployeeUpdateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPerformanceReviewsInputSchema) ]),
  create: z.union([ z.lazy(() => EmployeeCreateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedCreateWithoutPerformanceReviewsInputSchema) ]),
  where: z.lazy(() => EmployeeWhereInputSchema).optional()
}).strict();

export const EmployeeUpdateToOneWithWhereWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeUpdateToOneWithWhereWithoutPerformanceReviewsInput> = z.object({
  where: z.lazy(() => EmployeeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EmployeeUpdateWithoutPerformanceReviewsInputSchema),z.lazy(() => EmployeeUncheckedUpdateWithoutPerformanceReviewsInputSchema) ]),
}).strict();

export const EmployeeUpdateWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeUpdateWithoutPerformanceReviewsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutEmployeesNestedInputSchema).optional(),
  payrolls: z.lazy(() => PayrollUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateWithoutPerformanceReviewsInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateWithoutPerformanceReviewsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCampaignsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCampaignsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCampaignsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCampaignsInputSchema) ]),
}).strict();

export const EmailCampaignCreateWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignCreateWithoutCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmailCampaignUncheckedCreateWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedCreateWithoutCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmailCampaignCreateOrConnectWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignCreateOrConnectWithoutCampaignInput> = z.object({
  where: z.lazy(() => EmailCampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema) ]),
}).strict();

export const EmailCampaignCreateManyCampaignInputEnvelopeSchema: z.ZodType<Prisma.EmailCampaignCreateManyCampaignInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EmailCampaignCreateManyCampaignInputSchema),z.lazy(() => EmailCampaignCreateManyCampaignInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SocialMediaPostCreateWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostCreateWithoutCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SocialMediaPostUncheckedCreateWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedCreateWithoutCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SocialMediaPostCreateOrConnectWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostCreateOrConnectWithoutCampaignInput> = z.object({
  where: z.lazy(() => SocialMediaPostWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema) ]),
}).strict();

export const SocialMediaPostCreateManyCampaignInputEnvelopeSchema: z.ZodType<Prisma.SocialMediaPostCreateManyCampaignInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SocialMediaPostCreateManyCampaignInputSchema),z.lazy(() => SocialMediaPostCreateManyCampaignInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCampaignsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCampaignsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCampaignsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCampaignsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCampaignsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCampaignsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCampaignsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCampaignsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCampaignsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  financialReports: z.lazy(() => FinancialReportUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const EmailCampaignUpsertWithWhereUniqueWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUpsertWithWhereUniqueWithoutCampaignInput> = z.object({
  where: z.lazy(() => EmailCampaignWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EmailCampaignUpdateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedUpdateWithoutCampaignInputSchema) ]),
  create: z.union([ z.lazy(() => EmailCampaignCreateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedCreateWithoutCampaignInputSchema) ]),
}).strict();

export const EmailCampaignUpdateWithWhereUniqueWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUpdateWithWhereUniqueWithoutCampaignInput> = z.object({
  where: z.lazy(() => EmailCampaignWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EmailCampaignUpdateWithoutCampaignInputSchema),z.lazy(() => EmailCampaignUncheckedUpdateWithoutCampaignInputSchema) ]),
}).strict();

export const EmailCampaignUpdateManyWithWhereWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUpdateManyWithWhereWithoutCampaignInput> = z.object({
  where: z.lazy(() => EmailCampaignScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EmailCampaignUpdateManyMutationInputSchema),z.lazy(() => EmailCampaignUncheckedUpdateManyWithoutCampaignInputSchema) ]),
}).strict();

export const EmailCampaignScalarWhereInputSchema: z.ZodType<Prisma.EmailCampaignScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EmailCampaignScalarWhereInputSchema),z.lazy(() => EmailCampaignScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EmailCampaignScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EmailCampaignScalarWhereInputSchema),z.lazy(() => EmailCampaignScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sender: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sentAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  opens: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  clicks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  bounces: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUpsertWithWhereUniqueWithoutCampaignInput> = z.object({
  where: z.lazy(() => SocialMediaPostWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SocialMediaPostUpdateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedUpdateWithoutCampaignInputSchema) ]),
  create: z.union([ z.lazy(() => SocialMediaPostCreateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedCreateWithoutCampaignInputSchema) ]),
}).strict();

export const SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateWithWhereUniqueWithoutCampaignInput> = z.object({
  where: z.lazy(() => SocialMediaPostWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SocialMediaPostUpdateWithoutCampaignInputSchema),z.lazy(() => SocialMediaPostUncheckedUpdateWithoutCampaignInputSchema) ]),
}).strict();

export const SocialMediaPostUpdateManyWithWhereWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateManyWithWhereWithoutCampaignInput> = z.object({
  where: z.lazy(() => SocialMediaPostScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SocialMediaPostUpdateManyMutationInputSchema),z.lazy(() => SocialMediaPostUncheckedUpdateManyWithoutCampaignInputSchema) ]),
}).strict();

export const SocialMediaPostScalarWhereInputSchema: z.ZodType<Prisma.SocialMediaPostScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SocialMediaPostScalarWhereInputSchema),z.lazy(() => SocialMediaPostScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SocialMediaPostScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SocialMediaPostScalarWhereInputSchema),z.lazy(() => SocialMediaPostScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  campaignId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSocialPlatformFilterSchema),z.lazy(() => SocialPlatformSchema) ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scheduledAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  likes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shares: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  comments: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MarketingCampaignCreateWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateWithoutEmailCampaignsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCampaignsInputSchema),
  socialPosts: z.lazy(() => SocialMediaPostCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedCreateWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedCreateWithoutEmailCampaignsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignCreateOrConnectWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateOrConnectWithoutEmailCampaignsInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutEmailCampaignsInputSchema) ]),
}).strict();

export const MarketingCampaignUpsertWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignUpsertWithoutEmailCampaignsInput> = z.object({
  update: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutEmailCampaignsInputSchema) ]),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutEmailCampaignsInputSchema) ]),
  where: z.lazy(() => MarketingCampaignWhereInputSchema).optional()
}).strict();

export const MarketingCampaignUpdateToOneWithWhereWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateToOneWithWhereWithoutEmailCampaignsInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutEmailCampaignsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutEmailCampaignsInputSchema) ]),
}).strict();

export const MarketingCampaignUpdateWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateWithoutEmailCampaignsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCampaignsNestedInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedUpdateWithoutEmailCampaignsInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateWithoutEmailCampaignsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignCreateWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateWithoutSocialPostsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCampaignsInputSchema),
  emailCampaigns: z.lazy(() => EmailCampaignCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedCreateWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedCreateWithoutSocialPostsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedCreateNestedManyWithoutCampaignInputSchema).optional()
}).strict();

export const MarketingCampaignCreateOrConnectWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignCreateOrConnectWithoutSocialPostsInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutSocialPostsInputSchema) ]),
}).strict();

export const MarketingCampaignUpsertWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignUpsertWithoutSocialPostsInput> = z.object({
  update: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutSocialPostsInputSchema) ]),
  create: z.union([ z.lazy(() => MarketingCampaignCreateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedCreateWithoutSocialPostsInputSchema) ]),
  where: z.lazy(() => MarketingCampaignWhereInputSchema).optional()
}).strict();

export const MarketingCampaignUpdateToOneWithWhereWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateToOneWithWhereWithoutSocialPostsInput> = z.object({
  where: z.lazy(() => MarketingCampaignWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MarketingCampaignUpdateWithoutSocialPostsInputSchema),z.lazy(() => MarketingCampaignUncheckedUpdateWithoutSocialPostsInputSchema) ]),
}).strict();

export const MarketingCampaignUpdateWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateWithoutSocialPostsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCampaignsNestedInputSchema).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedUpdateWithoutSocialPostsInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateWithoutSocialPostsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFinancialReportsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFinancialReportsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  logo: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
  industry: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFinancialReportsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFinancialReportsInputSchema) ]),
}).strict();

export const FinancialReportDataCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FinancialReportDataUncheckedCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FinancialReportDataCreateOrConnectWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataCreateOrConnectWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportDataWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportDataCreateManyReportInputEnvelopeSchema: z.ZodType<Prisma.FinancialReportDataCreateManyReportInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FinancialReportDataCreateManyReportInputSchema),z.lazy(() => FinancialReportDataCreateManyReportInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FinancialReportExportCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportExportUncheckedCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportExportCreateOrConnectWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportCreateOrConnectWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportExportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportExportCreateManyReportInputEnvelopeSchema: z.ZodType<Prisma.FinancialReportExportCreateManyReportInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FinancialReportExportCreateManyReportInputSchema),z.lazy(() => FinancialReportExportCreateManyReportInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FinancialReportScheduleCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportScheduleUncheckedCreateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedCreateWithoutReportInput> = z.object({
  id: z.string().cuid().optional(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportScheduleCreateOrConnectWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateOrConnectWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportScheduleCreateManyReportInputEnvelopeSchema: z.ZodType<Prisma.FinancialReportScheduleCreateManyReportInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FinancialReportScheduleCreateManyReportInputSchema),z.lazy(() => FinancialReportScheduleCreateManyReportInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFinancialReportsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFinancialReportsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFinancialReportsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFinancialReportsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFinancialReportsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFinancialReportsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFinancialReportsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFinancialReportsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFinancialReportsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  website: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  industry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseCategories: z.lazy(() => ExpenseCategoryUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenseTags: z.lazy(() => ExpenseTagUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  employees: z.lazy(() => EmployeeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  campaigns: z.lazy(() => MarketingCampaignUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customRoles: z.lazy(() => CustomRoleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const FinancialReportDataUpsertWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUpsertWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportDataWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FinancialReportDataUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedUpdateWithoutReportInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportDataCreateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportDataUpdateWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportDataWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FinancialReportDataUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportDataUncheckedUpdateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportDataUpdateManyWithWhereWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateManyWithWhereWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportDataScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FinancialReportDataUpdateManyMutationInputSchema),z.lazy(() => FinancialReportDataUncheckedUpdateManyWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportDataScalarWhereInputSchema: z.ZodType<Prisma.FinancialReportDataScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportDataScalarWhereInputSchema),z.lazy(() => FinancialReportDataScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportDataScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportDataScalarWhereInputSchema),z.lazy(() => FinancialReportDataScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportExportUpsertWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUpsertWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportExportWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FinancialReportExportUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedUpdateWithoutReportInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportExportCreateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportExportUpdateWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportExportWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FinancialReportExportUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportExportUncheckedUpdateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportExportUpdateManyWithWhereWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateManyWithWhereWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportExportScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FinancialReportExportUpdateManyMutationInputSchema),z.lazy(() => FinancialReportExportUncheckedUpdateManyWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportExportScalarWhereInputSchema: z.ZodType<Prisma.FinancialReportExportScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportExportScalarWhereInputSchema),z.lazy(() => FinancialReportExportScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportExportScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportExportScalarWhereInputSchema),z.lazy(() => FinancialReportExportScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  format: z.union([ z.lazy(() => EnumFinancialReportExportFormatFilterSchema),z.lazy(() => FinancialReportExportFormatSchema) ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fileSize: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumFinancialReportExportStatusFilterSchema),z.lazy(() => FinancialReportExportStatusSchema) ]).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpsertWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FinancialReportScheduleUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedUpdateWithoutReportInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportScheduleCreateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedCreateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateWithWhereUniqueWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportScheduleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FinancialReportScheduleUpdateWithoutReportInputSchema),z.lazy(() => FinancialReportScheduleUncheckedUpdateWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportScheduleUpdateManyWithWhereWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateManyWithWhereWithoutReportInput> = z.object({
  where: z.lazy(() => FinancialReportScheduleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FinancialReportScheduleUpdateManyMutationInputSchema),z.lazy(() => FinancialReportScheduleUncheckedUpdateManyWithoutReportInputSchema) ]),
}).strict();

export const FinancialReportScheduleScalarWhereInputSchema: z.ZodType<Prisma.FinancialReportScheduleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FinancialReportScheduleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FinancialReportScheduleScalarWhereInputSchema),z.lazy(() => FinancialReportScheduleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reportId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumFinancialReportScheduleFrequencyFilterSchema),z.lazy(() => FinancialReportScheduleFrequencySchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dayOfMonth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  time: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timezone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  lastRunAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextRunAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipients: z.lazy(() => JsonFilterSchema).optional(),
  emailSubject: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emailBody: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FinancialReportCreateWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportCreateWithoutReportDataInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFinancialReportsInputSchema),
  exports: z.lazy(() => FinancialReportExportCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUncheckedCreateWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateWithoutReportDataInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportCreateOrConnectWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportCreateOrConnectWithoutReportDataInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutReportDataInputSchema) ]),
}).strict();

export const FinancialReportUpsertWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportUpsertWithoutReportDataInput> = z.object({
  update: z.union([ z.lazy(() => FinancialReportUpdateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutReportDataInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutReportDataInputSchema) ]),
  where: z.lazy(() => FinancialReportWhereInputSchema).optional()
}).strict();

export const FinancialReportUpdateToOneWithWhereWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportUpdateToOneWithWhereWithoutReportDataInput> = z.object({
  where: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FinancialReportUpdateWithoutReportDataInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutReportDataInputSchema) ]),
}).strict();

export const FinancialReportUpdateWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportUpdateWithoutReportDataInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateWithoutReportDataInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateWithoutReportDataInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportCreateWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportCreateWithoutExportsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFinancialReportsInputSchema),
  reportData: z.lazy(() => FinancialReportDataCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUncheckedCreateWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateWithoutExportsInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportCreateOrConnectWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportCreateOrConnectWithoutExportsInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutExportsInputSchema) ]),
}).strict();

export const FinancialReportUpsertWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportUpsertWithoutExportsInput> = z.object({
  update: z.union([ z.lazy(() => FinancialReportUpdateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutExportsInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutExportsInputSchema) ]),
  where: z.lazy(() => FinancialReportWhereInputSchema).optional()
}).strict();

export const FinancialReportUpdateToOneWithWhereWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportUpdateToOneWithWhereWithoutExportsInput> = z.object({
  where: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FinancialReportUpdateWithoutExportsInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutExportsInputSchema) ]),
}).strict();

export const FinancialReportUpdateWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportUpdateWithoutExportsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInputSchema).optional(),
  reportData: z.lazy(() => FinancialReportDataUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateWithoutExportsInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateWithoutExportsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportCreateWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportCreateWithoutSchedulesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFinancialReportsInputSchema),
  reportData: z.lazy(() => FinancialReportDataCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportUncheckedCreateWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportUncheckedCreateWithoutSchedulesInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedCreateNestedManyWithoutReportInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedCreateNestedManyWithoutReportInputSchema).optional()
}).strict();

export const FinancialReportCreateOrConnectWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportCreateOrConnectWithoutSchedulesInput> = z.object({
  where: z.lazy(() => FinancialReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutSchedulesInputSchema) ]),
}).strict();

export const FinancialReportUpsertWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportUpsertWithoutSchedulesInput> = z.object({
  update: z.union([ z.lazy(() => FinancialReportUpdateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutSchedulesInputSchema) ]),
  create: z.union([ z.lazy(() => FinancialReportCreateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedCreateWithoutSchedulesInputSchema) ]),
  where: z.lazy(() => FinancialReportWhereInputSchema).optional()
}).strict();

export const FinancialReportUpdateToOneWithWhereWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportUpdateToOneWithWhereWithoutSchedulesInput> = z.object({
  where: z.lazy(() => FinancialReportWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FinancialReportUpdateWithoutSchedulesInputSchema),z.lazy(() => FinancialReportUncheckedUpdateWithoutSchedulesInputSchema) ]),
}).strict();

export const FinancialReportUpdateWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportUpdateWithoutSchedulesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFinancialReportsNestedInputSchema).optional(),
  reportData: z.lazy(() => FinancialReportDataUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateWithoutSchedulesInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateWithoutSchedulesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const RolePermissionCreateManyPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionCreateManyPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyPermissionInput> = z.object({
  id: z.string().cuid().optional(),
  customRoleId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customRole: z.lazy(() => CustomRoleUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const CustomRolePermissionUncheckedUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customRoleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedUpdateManyWithoutPermissionInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateManyWithoutPermissionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customRoleId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionCreateManyCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyCustomRoleInput> = z.object({
  id: z.string().cuid().optional(),
  permissionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationCreateManyCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationCreateManyCustomRoleInput> = z.object({
  userId: z.string(),
  organizationId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const CustomRolePermissionUpdateWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUpdateWithoutCustomRoleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutCustomRolePermissionsNestedInputSchema).optional()
}).strict();

export const CustomRolePermissionUncheckedUpdateWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateWithoutCustomRoleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationUpdateWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUpdateWithoutCustomRoleInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserOrganizationUncheckedUpdateWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateWithoutCustomRoleInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationUncheckedUpdateManyWithoutCustomRoleInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateManyWithoutCustomRoleInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationCreateManyOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationCreateManyOrganizationInput> = z.object({
  userId: z.string(),
  role: z.lazy(() => UserRoleSchema).optional().nullable(),
  customRoleId: z.string().optional().nullable(),
  joinedAt: z.coerce.date().optional()
}).strict();

export const CustomerCreateManyOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => CustomerTypeSchema),
  status: z.lazy(() => LeadStatusSchema).optional().nullable(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  company: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  source: z.lazy(() => LeadSourceSchema).optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProjectCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProjectCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => ProjectStatusSchema),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskCreateManyOrganizationInputSchema: z.ZodType<Prisma.TaskCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable()
}).strict();

export const InvoiceCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvoiceCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCreateManyOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCategoryCreateManyOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseTagCreateManyOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  color: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EmployeeCreateManyOrganizationInputSchema: z.ZodType<Prisma.EmployeeCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  position: z.string().optional().nullable(),
  department: z.string().optional().nullable(),
  hireDate: z.coerce.date().optional().nullable(),
  terminationDate: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EmployeeStatusSchema).optional(),
  managerId: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  birthDate: z.coerce.date().optional().nullable(),
  taxId: z.string().optional().nullable(),
  emergencyContactName: z.string().optional().nullable(),
  emergencyContactPhone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MarketingCampaignCreateManyOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => CampaignTypeSchema),
  status: z.lazy(() => CampaignStatusSchema),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  budget: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  targetAudience: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.lazy(() => UserRoleSchema).optional(),
  inviterId: z.string(),
  token: z.string(),
  status: z.lazy(() => InvitationStatusSchema).optional(),
  expiresAt: z.coerce.date(),
  acceptedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomRoleCreateManyOrganizationInputSchema: z.ZodType<Prisma.CustomRoleCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  color: z.string().optional(),
  isActive: z.boolean().optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportCreateManyOrganizationInputSchema: z.ZodType<Prisma.FinancialReportCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.lazy(() => FinancialReportTypeSchema),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => FinancialReportStatusSchema).optional(),
  generatedAt: z.coerce.date().optional().nullable(),
  generatedBy: z.string().optional().nullable(),
  isTemplate: z.boolean().optional(),
  isScheduled: z.boolean().optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserOrganizationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUpdateWithoutOrganizationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customRole: z.lazy(() => CustomRoleUpdateOneWithoutUserAssignmentsNestedInputSchema).optional()
}).strict();

export const UserOrganizationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateWithoutOrganizationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOrganizationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserOrganizationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NullableEnumUserRoleFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customRoleId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interactions: z.lazy(() => CustomerInteractionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  deals: z.lazy(() => DealUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  invoices: z.lazy(() => InvoiceUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => CustomerTypeSchema),z.lazy(() => EnumCustomerTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => NullableEnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  company: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => LeadSourceSchema),z.lazy(() => NullableEnumLeadSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  resources: z.lazy(() => ProjectResourceUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutProjectNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutProjectNestedInputSchema).optional()
}).strict();

export const ProjectUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProjectUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ProjectStatusSchema),z.lazy(() => EnumProjectStatusFieldUpdateOperationsInputSchema) ]).optional(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InvoiceUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  items: z.lazy(() => InvoiceItemUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => ExpenseCategoryUpdateOneWithoutExpensesNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutExpensesNestedInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCategoryUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const ExpenseCategoryUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCategoryUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseTagUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseToTagUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expenses: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const ExpenseTagUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseTagUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmployeeUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payrolls: z.lazy(() => PayrollUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  timeOff: z.lazy(() => TimeOffUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional(),
  performanceReviews: z.lazy(() => PerformanceReviewUncheckedUpdateManyWithoutEmployeeNestedInputSchema).optional()
}).strict();

export const EmployeeUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.EmployeeUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  department: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hireDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminationDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EmployeeStatusSchema),z.lazy(() => EnumEmployeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  managerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emergencyContactPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MarketingCampaignUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUpdateManyWithoutCampaignNestedInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  emailCampaigns: z.lazy(() => EmailCampaignUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional(),
  socialPosts: z.lazy(() => SocialMediaPostUncheckedUpdateManyWithoutCampaignNestedInputSchema).optional()
}).strict();

export const MarketingCampaignUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MarketingCampaignUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => CampaignTypeSchema),z.lazy(() => EnumCampaignTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CampaignStatusSchema),z.lazy(() => EnumCampaignStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  budget: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetAudience: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvitationStatusSchema),z.lazy(() => EnumInvitationStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  acceptedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomRoleUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionUpdateManyWithoutCustomRoleNestedInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => CustomRolePermissionUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional(),
  userAssignments: z.lazy(() => UserOrganizationUncheckedUpdateManyWithoutCustomRoleNestedInputSchema).optional()
}).strict();

export const CustomRoleUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomRoleUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reportData: z.lazy(() => FinancialReportDataUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  exports: z.lazy(() => FinancialReportExportUncheckedUpdateManyWithoutReportNestedInputSchema).optional(),
  schedules: z.lazy(() => FinancialReportScheduleUncheckedUpdateManyWithoutReportNestedInputSchema).optional()
}).strict();

export const FinancialReportUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FinancialReportUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => FinancialReportTypeSchema),z.lazy(() => EnumFinancialReportTypeFieldUpdateOperationsInputSchema) ]).optional(),
  template: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dateRange: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => FinancialReportStatusSchema),z.lazy(() => EnumFinancialReportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  generatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isTemplate: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isScheduled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  scheduleConfig: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerInteractionCreateManyCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => InteractionTypeSchema),
  medium: z.lazy(() => InteractionMediumSchema),
  subject: z.string().optional().nullable(),
  content: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DealCreateManyCustomerInputSchema: z.ZodType<Prisma.DealCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string(),
  value: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => LeadStatusSchema),
  stage: z.number().int(),
  probability: z.number().optional().nullable(),
  expectedCloseDate: z.coerce.date().optional().nullable(),
  actualCloseDate: z.coerce.date().optional().nullable(),
  description: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceCreateManyCustomerInputSchema: z.ZodType<Prisma.InvoiceCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customerEmail: z.string(),
  customerName: z.string().optional().nullable(),
  customerAddress: z.string().optional().nullable(),
  customerPhone: z.string().optional().nullable(),
  invoiceNumber: z.string(),
  status: z.lazy(() => InvoiceStatusSchema),
  issueDate: z.coerce.date(),
  dueDate: z.coerce.date(),
  paymentTerms: z.string().optional(),
  poNumber: z.string().optional().nullable(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  discountAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shippingAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  totalAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  paidAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  currency: z.string().optional(),
  notes: z.string().optional().nullable(),
  internalNotes: z.string().optional().nullable(),
  termsAndConditions: z.string().optional().nullable(),
  footer: z.string().optional().nullable(),
  logoUrl: z.string().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  viewedAt: z.coerce.date().optional().nullable(),
  lastReminder: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerInteractionUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutCustomerInteractionNestedInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutCustomerInteractionNestedInputSchema).optional()
}).strict();

export const CustomerInteractionUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.CustomerInteractionUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => InteractionTypeSchema),z.lazy(() => EnumInteractionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  medium: z.union([ z.lazy(() => InteractionMediumSchema),z.lazy(() => EnumInteractionMediumFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  content: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.DealUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.DealUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DealUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.DealUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LeadStatusSchema),z.lazy(() => EnumLeadStatusFieldUpdateOperationsInputSchema) ]).optional(),
  stage: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  probability: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expectedCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualCloseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvoicesNestedInputSchema).optional(),
  items: z.lazy(() => InvoiceItemUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InvoiceItemUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutInvoiceNestedInputSchema).optional()
}).strict();

export const InvoiceUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.InvoiceUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerEmail: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customerPhone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invoiceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => InvoiceStatusSchema),z.lazy(() => EnumInvoiceStatusFieldUpdateOperationsInputSchema) ]).optional(),
  issueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  paymentTerms: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  poNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shippingAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  totalAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  paidAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  internalNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  footer: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logoUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viewedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastReminder: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyCustomerInteractionInputSchema: z.ZodType<Prisma.TaskCreateManyCustomerInteractionInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUpdateWithoutCustomerInteractionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutCustomerInteractionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutCustomerInteractionInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutCustomerInteractionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyProjectInputSchema: z.ZodType<Prisma.TaskCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  parentTaskId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable()
}).strict();

export const ProjectResourceCreateManyProjectInputSchema: z.ZodType<Prisma.ProjectResourceCreateManyProjectInput> = z.object({
  assigneeId: z.string(),
  role: z.string().optional().nullable(),
  allocation: z.number().optional().nullable(),
  startDate: z.coerce.date().optional().nullable(),
  endDate: z.coerce.date().optional().nullable(),
  hourlyRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeEntryCreateManyProjectInputSchema: z.ZodType<Prisma.TimeEntryCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  taskId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseCreateManyProjectInputSchema: z.ZodType<Prisma.ExpenseCreateManyProjectInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  categoryId: z.string().optional().nullable(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  parentTask: z.lazy(() => TaskUpdateOneWithoutSubtasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentTaskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectResourceUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUpdateWithoutProjectInput> = z.object({
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectResourceUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedUpdateWithoutProjectInput> = z.object({
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProjectResourceUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ProjectResourceUncheckedUpdateManyWithoutProjectInput> = z.object({
  assigneeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allocation: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  hourlyRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  task: z.lazy(() => TaskUpdateOneWithoutTimeEntriesNestedInputSchema).optional()
}).strict();

export const TimeEntryUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  category: z.lazy(() => ExpenseCategoryUpdateOneWithoutExpensesNestedInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateManyWithoutProjectInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutProjectInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateManyParentTaskInputSchema: z.ZodType<Prisma.TaskCreateManyParentTaskInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  projectId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.lazy(() => TaskStatusSchema),
  priority: z.lazy(() => PrioritySchema),
  startDate: z.coerce.date().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  completedAt: z.coerce.date().optional().nullable(),
  assignedToId: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  estimatedHours: z.number().optional().nullable(),
  actualHours: z.number().optional().nullable(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerInteractionId: z.string().optional().nullable()
}).strict();

export const TimeEntryCreateManyTaskInputSchema: z.ZodType<Prisma.TimeEntryCreateManyTaskInput> = z.object({
  id: z.string().cuid().optional(),
  projectId: z.string().optional().nullable(),
  userId: z.string(),
  description: z.string().optional().nullable(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional().nullable(),
  billable: z.boolean().optional(),
  invoiced: z.boolean().optional(),
  invoiceId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CommentCreateManyTaskInputSchema: z.ZodType<Prisma.CommentCreateManyTaskInput> = z.object({
  id: z.string().cuid().optional(),
  content: z.string(),
  authorId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AttachmentCreateManyTaskInputSchema: z.ZodType<Prisma.AttachmentCreateManyTaskInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  fileUrl: z.string(),
  fileType: z.string(),
  fileSize: z.number().int(),
  uploadedById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUpdateWithoutParentTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTasksNestedInputSchema).optional(),
  subtasks: z.lazy(() => TaskUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutTaskNestedInputSchema).optional(),
  customerInteraction: z.lazy(() => CustomerInteractionUpdateOneWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutParentTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subtasks: z.lazy(() => TaskUncheckedUpdateManyWithoutParentTaskNestedInputSchema).optional(),
  timeEntries: z.lazy(() => TimeEntryUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  comments: z.lazy(() => CommentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutParentTaskInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutParentTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TaskStatusSchema),z.lazy(() => EnumTaskStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => PrioritySchema),z.lazy(() => EnumPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  estimatedHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actualHours: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerInteractionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimeEntryUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutTimeEntriesNestedInputSchema).optional()
}).strict();

export const TimeEntryUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeEntryUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.TimeEntryUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  billable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiced: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  invoiceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentUpdateWithoutTaskInputSchema: z.ZodType<Prisma.CommentUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CommentUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.CommentUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  authorId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUpdateWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uploadedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemCreateManyInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemCreateManyInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  productId: z.string().optional().nullable(),
  description: z.string(),
  quantity: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  unitPrice: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  taxRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  discountRate: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  subtotal: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PaymentCreateManyInvoiceInputSchema: z.ZodType<Prisma.PaymentCreateManyInvoiceInput> = z.object({
  id: z.string().cuid().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  method: z.lazy(() => PaymentMethodSchema),
  reference: z.string().optional().nullable(),
  paymentDate: z.coerce.date(),
  notes: z.string().optional().nullable(),
  feeAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.lazy(() => PaymentStatusSchema).optional(),
  gatewayId: z.string().optional().nullable(),
  refundedAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvoiceItemUpdateWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUpdateWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemUncheckedUpdateWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedUpdateWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvoiceItemUncheckedUpdateManyWithoutInvoiceInputSchema: z.ZodType<Prisma.InvoiceItemUncheckedUpdateManyWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  unitPrice: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  taxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  discountRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  subtotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUpdateWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUpdateWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutInvoiceInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutInvoiceInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  method: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  feeAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  gatewayId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refundedAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagCreateManyExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagCreateManyExpenseInput> = z.object({
  tagId: z.string()
}).strict();

export const ExpenseToTagUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateWithoutExpenseInput> = z.object({
  tag: z.lazy(() => ExpenseTagUpdateOneRequiredWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseToTagUncheckedUpdateWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateWithoutExpenseInput> = z.object({
  tagId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagUncheckedUpdateManyWithoutExpenseInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateManyWithoutExpenseInput> = z.object({
  tagId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseCreateManyCategoryInputSchema: z.ZodType<Prisma.ExpenseCreateManyCategoryInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  customCategory: z.string().optional().nullable(),
  amount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  date: z.coerce.date(),
  description: z.string().optional().nullable(),
  receipt: z.string().optional().nullable(),
  vendor: z.string().optional().nullable(),
  paymentMethod: z.lazy(() => PaymentMethodSchema).optional(),
  projectId: z.string().optional().nullable(),
  status: z.lazy(() => ExpenseStatusSchema).optional(),
  reimbursable: z.boolean().optional(),
  reimbursed: z.boolean().optional(),
  reimbursedAt: z.coerce.date().optional().nullable(),
  submittedAt: z.coerce.date().optional().nullable(),
  createdById: z.string().optional().nullable(),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  rejectedAt: z.coerce.date().optional().nullable(),
  rejectionReason: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExpenseUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  project: z.lazy(() => ProjectUpdateOneWithoutExpensesNestedInputSchema).optional(),
  tags: z.lazy(() => ExpenseToTagUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => ExpenseToTagUncheckedUpdateManyWithoutExpenseNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customCategory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  receipt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vendor: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentMethod: z.union([ z.lazy(() => PaymentMethodSchema),z.lazy(() => EnumPaymentMethodFieldUpdateOperationsInputSchema) ]).optional(),
  projectId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => ExpenseStatusSchema),z.lazy(() => EnumExpenseStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursable: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  reimbursedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  submittedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rejectionReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagCreateManyTagInputSchema: z.ZodType<Prisma.ExpenseToTagCreateManyTagInput> = z.object({
  expenseId: z.string()
}).strict();

export const ExpenseToTagUpdateWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUpdateWithoutTagInput> = z.object({
  expense: z.lazy(() => ExpenseUpdateOneRequiredWithoutTagsNestedInputSchema).optional()
}).strict();

export const ExpenseToTagUncheckedUpdateWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateWithoutTagInput> = z.object({
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseToTagUncheckedUpdateManyWithoutTagInputSchema: z.ZodType<Prisma.ExpenseToTagUncheckedUpdateManyWithoutTagInput> = z.object({
  expenseId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeCreateManyEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateManyEventInput> = z.object({
  userId: z.string(),
  status: z.lazy(() => AttendeeStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CalendarEventAttendeeUpdateWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateWithoutEventInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedUpdateWithoutEventInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CalendarEventAttendeeUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.CalendarEventAttendeeUncheckedUpdateManyWithoutEventInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => AttendeeStatusSchema),z.lazy(() => EnumAttendeeStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollCreateManyEmployeeInputSchema: z.ZodType<Prisma.PayrollCreateManyEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  payPeriodStart: z.coerce.date(),
  payPeriodEnd: z.coerce.date(),
  payDate: z.coerce.date(),
  basicSalary: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  overtime: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bonus: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  tax: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  deductions: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  netAmount: z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  status: z.lazy(() => PayrollStatusSchema),
  notes: z.string().optional().nullable(),
  createdById: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TimeOffCreateManyEmployeeInputSchema: z.ZodType<Prisma.TimeOffCreateManyEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => TimeOffTypeSchema),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  duration: z.number(),
  reason: z.string().optional().nullable(),
  status: z.lazy(() => TimeOffStatusSchema),
  approvedById: z.string().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PerformanceReviewCreateManyEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewCreateManyEmployeeInput> = z.object({
  id: z.string().cuid().optional(),
  reviewerId: z.string(),
  reviewPeriod: z.string(),
  performanceScore: z.number().optional().nullable(),
  strengths: z.string().optional().nullable(),
  improvements: z.string().optional().nullable(),
  goals: z.string().optional().nullable(),
  comments: z.string().optional().nullable(),
  reviewDate: z.coerce.date(),
  status: z.lazy(() => ReviewStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PayrollUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollUncheckedUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUncheckedUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PayrollUncheckedUpdateManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PayrollUncheckedUpdateManyWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodStart: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payPeriodEnd: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  basicSalary: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  overtime: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bonus: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  tax: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  deductions: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  netAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PayrollStatusSchema),z.lazy(() => EnumPayrollStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffUncheckedUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUncheckedUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimeOffUncheckedUpdateManyWithoutEmployeeInputSchema: z.ZodType<Prisma.TimeOffUncheckedUpdateManyWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TimeOffTypeSchema),z.lazy(() => EnumTimeOffTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TimeOffStatusSchema),z.lazy(() => EnumTimeOffStatusFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewUncheckedUpdateWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedUpdateWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceReviewUncheckedUpdateManyWithoutEmployeeInputSchema: z.ZodType<Prisma.PerformanceReviewUncheckedUpdateManyWithoutEmployeeInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reviewPeriod: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performanceScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  strengths: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  improvements: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goals: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comments: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ReviewStatusSchema),z.lazy(() => EnumReviewStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignCreateManyCampaignInputSchema: z.ZodType<Prisma.EmailCampaignCreateManyCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  subject: z.string(),
  content: z.string(),
  sender: z.string(),
  scheduledAt: z.coerce.date().optional().nullable(),
  sentAt: z.coerce.date().optional().nullable(),
  opens: z.number().int().optional(),
  clicks: z.number().int().optional(),
  bounces: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SocialMediaPostCreateManyCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostCreateManyCampaignInput> = z.object({
  id: z.string().cuid().optional(),
  platform: z.lazy(() => SocialPlatformSchema),
  content: z.string(),
  mediaUrl: z.string().optional().nullable(),
  scheduledAt: z.coerce.date().optional().nullable(),
  publishedAt: z.coerce.date().optional().nullable(),
  likes: z.number().int().optional(),
  shares: z.number().int().optional(),
  comments: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EmailCampaignUpdateWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUpdateWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignUncheckedUpdateWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedUpdateWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EmailCampaignUncheckedUpdateManyWithoutCampaignInputSchema: z.ZodType<Prisma.EmailCampaignUncheckedUpdateManyWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sentAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opens: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  bounces: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostUpdateWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUpdateWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostUncheckedUpdateWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedUpdateWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SocialMediaPostUncheckedUpdateManyWithoutCampaignInputSchema: z.ZodType<Prisma.SocialMediaPostUncheckedUpdateManyWithoutCampaignInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SocialPlatformSchema),z.lazy(() => EnumSocialPlatformFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scheduledAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  likes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shares: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comments: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable()
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataCreateManyReportInputSchema: z.ZodType<Prisma.FinancialReportDataCreateManyReportInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FinancialReportExportCreateManyReportInputSchema: z.ZodType<Prisma.FinancialReportExportCreateManyReportInput> = z.object({
  id: z.string().cuid().optional(),
  format: z.lazy(() => FinancialReportExportFormatSchema),
  fileName: z.string(),
  fileUrl: z.string().optional().nullable(),
  fileSize: z.number().int().optional().nullable(),
  status: z.lazy(() => FinancialReportExportStatusSchema).optional(),
  error: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportScheduleCreateManyReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleCreateManyReportInput> = z.object({
  id: z.string().cuid().optional(),
  frequency: z.lazy(() => FinancialReportScheduleFrequencySchema),
  dayOfWeek: z.number().int().optional().nullable(),
  dayOfMonth: z.number().int().optional().nullable(),
  time: z.string(),
  timezone: z.string().optional(),
  isActive: z.boolean().optional(),
  lastRunAt: z.coerce.date().optional().nullable(),
  nextRunAt: z.coerce.date(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  emailSubject: z.string().optional().nullable(),
  emailBody: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FinancialReportDataUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataUncheckedUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportDataUncheckedUpdateManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportDataUncheckedUpdateManyWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportUncheckedUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportExportUncheckedUpdateManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportExportUncheckedUpdateManyWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  format: z.union([ z.lazy(() => FinancialReportExportFormatSchema),z.lazy(() => EnumFinancialReportExportFormatFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fileSize: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => FinancialReportExportStatusSchema),z.lazy(() => EnumFinancialReportExportStatusFieldUpdateOperationsInputSchema) ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleUncheckedUpdateWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedUpdateWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FinancialReportScheduleUncheckedUpdateManyWithoutReportInputSchema: z.ZodType<Prisma.FinancialReportScheduleUncheckedUpdateManyWithoutReportInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => FinancialReportScheduleFrequencySchema),z.lazy(() => EnumFinancialReportScheduleFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dayOfMonth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  time: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timezone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastRunAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextRunAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipients: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  emailSubject: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emailBody: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const PermissionFindFirstArgsSchema: z.ZodType<Prisma.PermissionFindFirstArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindFirstOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindManyArgsSchema: z.ZodType<Prisma.PermissionFindManyArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionAggregateArgsSchema: z.ZodType<Prisma.PermissionAggregateArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionGroupByArgsSchema: z.ZodType<Prisma.PermissionGroupByArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithAggregationInputSchema.array(),PermissionOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionScalarFieldEnumSchema.array(),
  having: PermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionFindUniqueArgsSchema: z.ZodType<Prisma.PermissionFindUniqueArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindUniqueOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindFirstArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindManyArgsSchema: z.ZodType<Prisma.RolePermissionFindManyArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionAggregateArgsSchema: z.ZodType<Prisma.RolePermissionAggregateArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionGroupByArgsSchema: z.ZodType<Prisma.RolePermissionGroupByArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithAggregationInputSchema.array(),RolePermissionOrderByWithAggregationInputSchema ]).optional(),
  by: RolePermissionScalarFieldEnumSchema.array(),
  having: RolePermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionFindUniqueArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomRoleFindFirstArgsSchema: z.ZodType<Prisma.CustomRoleFindFirstArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereInputSchema.optional(),
  orderBy: z.union([ CustomRoleOrderByWithRelationInputSchema.array(),CustomRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRoleScalarFieldEnumSchema,CustomRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomRoleFindFirstOrThrowArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereInputSchema.optional(),
  orderBy: z.union([ CustomRoleOrderByWithRelationInputSchema.array(),CustomRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRoleScalarFieldEnumSchema,CustomRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRoleFindManyArgsSchema: z.ZodType<Prisma.CustomRoleFindManyArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereInputSchema.optional(),
  orderBy: z.union([ CustomRoleOrderByWithRelationInputSchema.array(),CustomRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRoleScalarFieldEnumSchema,CustomRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRoleAggregateArgsSchema: z.ZodType<Prisma.CustomRoleAggregateArgs> = z.object({
  where: CustomRoleWhereInputSchema.optional(),
  orderBy: z.union([ CustomRoleOrderByWithRelationInputSchema.array(),CustomRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomRoleGroupByArgsSchema: z.ZodType<Prisma.CustomRoleGroupByArgs> = z.object({
  where: CustomRoleWhereInputSchema.optional(),
  orderBy: z.union([ CustomRoleOrderByWithAggregationInputSchema.array(),CustomRoleOrderByWithAggregationInputSchema ]).optional(),
  by: CustomRoleScalarFieldEnumSchema.array(),
  having: CustomRoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomRoleFindUniqueArgsSchema: z.ZodType<Prisma.CustomRoleFindUniqueArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereUniqueInputSchema,
}).strict() ;

export const CustomRoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomRoleFindUniqueOrThrowArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereUniqueInputSchema,
}).strict() ;

export const CustomRolePermissionFindFirstArgsSchema: z.ZodType<Prisma.CustomRolePermissionFindFirstArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomRolePermissionOrderByWithRelationInputSchema.array(),CustomRolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRolePermissionScalarFieldEnumSchema,CustomRolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRolePermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomRolePermissionFindFirstOrThrowArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomRolePermissionOrderByWithRelationInputSchema.array(),CustomRolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRolePermissionScalarFieldEnumSchema,CustomRolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRolePermissionFindManyArgsSchema: z.ZodType<Prisma.CustomRolePermissionFindManyArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomRolePermissionOrderByWithRelationInputSchema.array(),CustomRolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomRolePermissionScalarFieldEnumSchema,CustomRolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomRolePermissionAggregateArgsSchema: z.ZodType<Prisma.CustomRolePermissionAggregateArgs> = z.object({
  where: CustomRolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomRolePermissionOrderByWithRelationInputSchema.array(),CustomRolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomRolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomRolePermissionGroupByArgsSchema: z.ZodType<Prisma.CustomRolePermissionGroupByArgs> = z.object({
  where: CustomRolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ CustomRolePermissionOrderByWithAggregationInputSchema.array(),CustomRolePermissionOrderByWithAggregationInputSchema ]).optional(),
  by: CustomRolePermissionScalarFieldEnumSchema.array(),
  having: CustomRolePermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomRolePermissionFindUniqueArgsSchema: z.ZodType<Prisma.CustomRolePermissionFindUniqueArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomRolePermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomRolePermissionFindUniqueOrThrowArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const UserOrganizationFindFirstArgsSchema: z.ZodType<Prisma.UserOrganizationFindFirstArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ UserOrganizationOrderByWithRelationInputSchema.array(),UserOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOrganizationScalarFieldEnumSchema,UserOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserOrganizationFindFirstOrThrowArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ UserOrganizationOrderByWithRelationInputSchema.array(),UserOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOrganizationScalarFieldEnumSchema,UserOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOrganizationFindManyArgsSchema: z.ZodType<Prisma.UserOrganizationFindManyArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ UserOrganizationOrderByWithRelationInputSchema.array(),UserOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOrganizationScalarFieldEnumSchema,UserOrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOrganizationAggregateArgsSchema: z.ZodType<Prisma.UserOrganizationAggregateArgs> = z.object({
  where: UserOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ UserOrganizationOrderByWithRelationInputSchema.array(),UserOrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserOrganizationGroupByArgsSchema: z.ZodType<Prisma.UserOrganizationGroupByArgs> = z.object({
  where: UserOrganizationWhereInputSchema.optional(),
  orderBy: z.union([ UserOrganizationOrderByWithAggregationInputSchema.array(),UserOrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: UserOrganizationScalarFieldEnumSchema.array(),
  having: UserOrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserOrganizationFindUniqueArgsSchema: z.ZodType<Prisma.UserOrganizationFindUniqueArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereUniqueInputSchema,
}).strict() ;

export const UserOrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserOrganizationFindUniqueOrThrowArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindFirstArgsSchema: z.ZodType<Prisma.CustomerFindFirstArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomerFindFirstOrThrowArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindManyArgsSchema: z.ZodType<Prisma.CustomerFindManyArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerAggregateArgsSchema: z.ZodType<Prisma.CustomerAggregateArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerGroupByArgsSchema: z.ZodType<Prisma.CustomerGroupByArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithAggregationInputSchema.array(),CustomerOrderByWithAggregationInputSchema ]).optional(),
  by: CustomerScalarFieldEnumSchema.array(),
  having: CustomerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerFindUniqueArgsSchema: z.ZodType<Prisma.CustomerFindUniqueArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomerFindUniqueOrThrowArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerInteractionFindFirstArgsSchema: z.ZodType<Prisma.CustomerInteractionFindFirstArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereInputSchema.optional(),
  orderBy: z.union([ CustomerInteractionOrderByWithRelationInputSchema.array(),CustomerInteractionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerInteractionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerInteractionScalarFieldEnumSchema,CustomerInteractionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerInteractionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomerInteractionFindFirstOrThrowArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereInputSchema.optional(),
  orderBy: z.union([ CustomerInteractionOrderByWithRelationInputSchema.array(),CustomerInteractionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerInteractionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerInteractionScalarFieldEnumSchema,CustomerInteractionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerInteractionFindManyArgsSchema: z.ZodType<Prisma.CustomerInteractionFindManyArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereInputSchema.optional(),
  orderBy: z.union([ CustomerInteractionOrderByWithRelationInputSchema.array(),CustomerInteractionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerInteractionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerInteractionScalarFieldEnumSchema,CustomerInteractionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerInteractionAggregateArgsSchema: z.ZodType<Prisma.CustomerInteractionAggregateArgs> = z.object({
  where: CustomerInteractionWhereInputSchema.optional(),
  orderBy: z.union([ CustomerInteractionOrderByWithRelationInputSchema.array(),CustomerInteractionOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerInteractionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerInteractionGroupByArgsSchema: z.ZodType<Prisma.CustomerInteractionGroupByArgs> = z.object({
  where: CustomerInteractionWhereInputSchema.optional(),
  orderBy: z.union([ CustomerInteractionOrderByWithAggregationInputSchema.array(),CustomerInteractionOrderByWithAggregationInputSchema ]).optional(),
  by: CustomerInteractionScalarFieldEnumSchema.array(),
  having: CustomerInteractionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerInteractionFindUniqueArgsSchema: z.ZodType<Prisma.CustomerInteractionFindUniqueArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereUniqueInputSchema,
}).strict() ;

export const CustomerInteractionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomerInteractionFindUniqueOrThrowArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereUniqueInputSchema,
}).strict() ;

export const DealFindFirstArgsSchema: z.ZodType<Prisma.DealFindFirstArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereInputSchema.optional(),
  orderBy: z.union([ DealOrderByWithRelationInputSchema.array(),DealOrderByWithRelationInputSchema ]).optional(),
  cursor: DealWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DealScalarFieldEnumSchema,DealScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DealFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DealFindFirstOrThrowArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereInputSchema.optional(),
  orderBy: z.union([ DealOrderByWithRelationInputSchema.array(),DealOrderByWithRelationInputSchema ]).optional(),
  cursor: DealWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DealScalarFieldEnumSchema,DealScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DealFindManyArgsSchema: z.ZodType<Prisma.DealFindManyArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereInputSchema.optional(),
  orderBy: z.union([ DealOrderByWithRelationInputSchema.array(),DealOrderByWithRelationInputSchema ]).optional(),
  cursor: DealWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DealScalarFieldEnumSchema,DealScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DealAggregateArgsSchema: z.ZodType<Prisma.DealAggregateArgs> = z.object({
  where: DealWhereInputSchema.optional(),
  orderBy: z.union([ DealOrderByWithRelationInputSchema.array(),DealOrderByWithRelationInputSchema ]).optional(),
  cursor: DealWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DealGroupByArgsSchema: z.ZodType<Prisma.DealGroupByArgs> = z.object({
  where: DealWhereInputSchema.optional(),
  orderBy: z.union([ DealOrderByWithAggregationInputSchema.array(),DealOrderByWithAggregationInputSchema ]).optional(),
  by: DealScalarFieldEnumSchema.array(),
  having: DealScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DealFindUniqueArgsSchema: z.ZodType<Prisma.DealFindUniqueArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereUniqueInputSchema,
}).strict() ;

export const DealFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DealFindUniqueOrThrowArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereUniqueInputSchema,
}).strict() ;

export const ProjectFindFirstArgsSchema: z.ZodType<Prisma.ProjectFindFirstArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectFindFirstOrThrowArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectFindManyArgsSchema: z.ZodType<Prisma.ProjectFindManyArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectScalarFieldEnumSchema,ProjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectAggregateArgsSchema: z.ZodType<Prisma.ProjectAggregateArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithRelationInputSchema.array(),ProjectOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectGroupByArgsSchema: z.ZodType<Prisma.ProjectGroupByArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
  orderBy: z.union([ ProjectOrderByWithAggregationInputSchema.array(),ProjectOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectScalarFieldEnumSchema.array(),
  having: ProjectScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectFindUniqueArgsSchema: z.ZodType<Prisma.ProjectFindUniqueArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectFindUniqueOrThrowArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const TaskFindFirstArgsSchema: z.ZodType<Prisma.TaskFindFirstArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskFindFirstOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindManyArgsSchema: z.ZodType<Prisma.TaskFindManyArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskAggregateArgsSchema: z.ZodType<Prisma.TaskAggregateArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskGroupByArgsSchema: z.ZodType<Prisma.TaskGroupByArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithAggregationInputSchema.array(),TaskOrderByWithAggregationInputSchema ]).optional(),
  by: TaskScalarFieldEnumSchema.array(),
  having: TaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskFindUniqueArgsSchema: z.ZodType<Prisma.TaskFindUniqueArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskFindUniqueOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const ProjectResourceFindFirstArgsSchema: z.ZodType<Prisma.ProjectResourceFindFirstArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereInputSchema.optional(),
  orderBy: z.union([ ProjectResourceOrderByWithRelationInputSchema.array(),ProjectResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectResourceScalarFieldEnumSchema,ProjectResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectResourceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectResourceFindFirstOrThrowArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereInputSchema.optional(),
  orderBy: z.union([ ProjectResourceOrderByWithRelationInputSchema.array(),ProjectResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectResourceScalarFieldEnumSchema,ProjectResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectResourceFindManyArgsSchema: z.ZodType<Prisma.ProjectResourceFindManyArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereInputSchema.optional(),
  orderBy: z.union([ ProjectResourceOrderByWithRelationInputSchema.array(),ProjectResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProjectResourceScalarFieldEnumSchema,ProjectResourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProjectResourceAggregateArgsSchema: z.ZodType<Prisma.ProjectResourceAggregateArgs> = z.object({
  where: ProjectResourceWhereInputSchema.optional(),
  orderBy: z.union([ ProjectResourceOrderByWithRelationInputSchema.array(),ProjectResourceOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectResourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectResourceGroupByArgsSchema: z.ZodType<Prisma.ProjectResourceGroupByArgs> = z.object({
  where: ProjectResourceWhereInputSchema.optional(),
  orderBy: z.union([ ProjectResourceOrderByWithAggregationInputSchema.array(),ProjectResourceOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectResourceScalarFieldEnumSchema.array(),
  having: ProjectResourceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProjectResourceFindUniqueArgsSchema: z.ZodType<Prisma.ProjectResourceFindUniqueArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereUniqueInputSchema,
}).strict() ;

export const ProjectResourceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectResourceFindUniqueOrThrowArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereUniqueInputSchema,
}).strict() ;

export const TimeEntryFindFirstArgsSchema: z.ZodType<Prisma.TimeEntryFindFirstArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereInputSchema.optional(),
  orderBy: z.union([ TimeEntryOrderByWithRelationInputSchema.array(),TimeEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeEntryScalarFieldEnumSchema,TimeEntryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeEntryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TimeEntryFindFirstOrThrowArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereInputSchema.optional(),
  orderBy: z.union([ TimeEntryOrderByWithRelationInputSchema.array(),TimeEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeEntryScalarFieldEnumSchema,TimeEntryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeEntryFindManyArgsSchema: z.ZodType<Prisma.TimeEntryFindManyArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereInputSchema.optional(),
  orderBy: z.union([ TimeEntryOrderByWithRelationInputSchema.array(),TimeEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeEntryScalarFieldEnumSchema,TimeEntryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeEntryAggregateArgsSchema: z.ZodType<Prisma.TimeEntryAggregateArgs> = z.object({
  where: TimeEntryWhereInputSchema.optional(),
  orderBy: z.union([ TimeEntryOrderByWithRelationInputSchema.array(),TimeEntryOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeEntryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeEntryGroupByArgsSchema: z.ZodType<Prisma.TimeEntryGroupByArgs> = z.object({
  where: TimeEntryWhereInputSchema.optional(),
  orderBy: z.union([ TimeEntryOrderByWithAggregationInputSchema.array(),TimeEntryOrderByWithAggregationInputSchema ]).optional(),
  by: TimeEntryScalarFieldEnumSchema.array(),
  having: TimeEntryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeEntryFindUniqueArgsSchema: z.ZodType<Prisma.TimeEntryFindUniqueArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereUniqueInputSchema,
}).strict() ;

export const TimeEntryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TimeEntryFindUniqueOrThrowArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereUniqueInputSchema,
}).strict() ;

export const InvoiceFindFirstArgsSchema: z.ZodType<Prisma.InvoiceFindFirstArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceOrderByWithRelationInputSchema.array(),InvoiceOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceScalarFieldEnumSchema,InvoiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvoiceFindFirstOrThrowArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceOrderByWithRelationInputSchema.array(),InvoiceOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceScalarFieldEnumSchema,InvoiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceFindManyArgsSchema: z.ZodType<Prisma.InvoiceFindManyArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceOrderByWithRelationInputSchema.array(),InvoiceOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceScalarFieldEnumSchema,InvoiceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceAggregateArgsSchema: z.ZodType<Prisma.InvoiceAggregateArgs> = z.object({
  where: InvoiceWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceOrderByWithRelationInputSchema.array(),InvoiceOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvoiceGroupByArgsSchema: z.ZodType<Prisma.InvoiceGroupByArgs> = z.object({
  where: InvoiceWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceOrderByWithAggregationInputSchema.array(),InvoiceOrderByWithAggregationInputSchema ]).optional(),
  by: InvoiceScalarFieldEnumSchema.array(),
  having: InvoiceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvoiceFindUniqueArgsSchema: z.ZodType<Prisma.InvoiceFindUniqueArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereUniqueInputSchema,
}).strict() ;

export const InvoiceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvoiceFindUniqueOrThrowArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereUniqueInputSchema,
}).strict() ;

export const InvoiceItemFindFirstArgsSchema: z.ZodType<Prisma.InvoiceItemFindFirstArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceItemOrderByWithRelationInputSchema.array(),InvoiceItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceItemScalarFieldEnumSchema,InvoiceItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvoiceItemFindFirstOrThrowArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceItemOrderByWithRelationInputSchema.array(),InvoiceItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceItemScalarFieldEnumSchema,InvoiceItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceItemFindManyArgsSchema: z.ZodType<Prisma.InvoiceItemFindManyArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceItemOrderByWithRelationInputSchema.array(),InvoiceItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvoiceItemScalarFieldEnumSchema,InvoiceItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvoiceItemAggregateArgsSchema: z.ZodType<Prisma.InvoiceItemAggregateArgs> = z.object({
  where: InvoiceItemWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceItemOrderByWithRelationInputSchema.array(),InvoiceItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InvoiceItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvoiceItemGroupByArgsSchema: z.ZodType<Prisma.InvoiceItemGroupByArgs> = z.object({
  where: InvoiceItemWhereInputSchema.optional(),
  orderBy: z.union([ InvoiceItemOrderByWithAggregationInputSchema.array(),InvoiceItemOrderByWithAggregationInputSchema ]).optional(),
  by: InvoiceItemScalarFieldEnumSchema.array(),
  having: InvoiceItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvoiceItemFindUniqueArgsSchema: z.ZodType<Prisma.InvoiceItemFindUniqueArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereUniqueInputSchema,
}).strict() ;

export const InvoiceItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvoiceItemFindUniqueOrThrowArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereUniqueInputSchema,
}).strict() ;

export const PaymentFindFirstArgsSchema: z.ZodType<Prisma.PaymentFindFirstArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PaymentFindFirstOrThrowArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentFindManyArgsSchema: z.ZodType<Prisma.PaymentFindManyArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentAggregateArgsSchema: z.ZodType<Prisma.PaymentAggregateArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentGroupByArgsSchema: z.ZodType<Prisma.PaymentGroupByArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithAggregationInputSchema.array(),PaymentOrderByWithAggregationInputSchema ]).optional(),
  by: PaymentScalarFieldEnumSchema.array(),
  having: PaymentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentFindUniqueArgsSchema: z.ZodType<Prisma.PaymentFindUniqueArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PaymentFindUniqueOrThrowArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindFirstArgsSchema: z.ZodType<Prisma.ExpenseFindFirstArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExpenseFindFirstOrThrowArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindManyArgsSchema: z.ZodType<Prisma.ExpenseFindManyArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseAggregateArgsSchema: z.ZodType<Prisma.ExpenseAggregateArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseGroupByArgsSchema: z.ZodType<Prisma.ExpenseGroupByArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithAggregationInputSchema.array(),ExpenseOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseScalarFieldEnumSchema.array(),
  having: ExpenseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseFindUniqueArgsSchema: z.ZodType<Prisma.ExpenseFindUniqueArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExpenseFindUniqueOrThrowArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseCategoryFindFirstArgsSchema: z.ZodType<Prisma.ExpenseCategoryFindFirstArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseCategoryOrderByWithRelationInputSchema.array(),ExpenseCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseCategoryScalarFieldEnumSchema,ExpenseCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExpenseCategoryFindFirstOrThrowArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseCategoryOrderByWithRelationInputSchema.array(),ExpenseCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseCategoryScalarFieldEnumSchema,ExpenseCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseCategoryFindManyArgsSchema: z.ZodType<Prisma.ExpenseCategoryFindManyArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseCategoryOrderByWithRelationInputSchema.array(),ExpenseCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseCategoryScalarFieldEnumSchema,ExpenseCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseCategoryAggregateArgsSchema: z.ZodType<Prisma.ExpenseCategoryAggregateArgs> = z.object({
  where: ExpenseCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseCategoryOrderByWithRelationInputSchema.array(),ExpenseCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseCategoryGroupByArgsSchema: z.ZodType<Prisma.ExpenseCategoryGroupByArgs> = z.object({
  where: ExpenseCategoryWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseCategoryOrderByWithAggregationInputSchema.array(),ExpenseCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseCategoryScalarFieldEnumSchema.array(),
  having: ExpenseCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseCategoryFindUniqueArgsSchema: z.ZodType<Prisma.ExpenseCategoryFindUniqueArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereUniqueInputSchema,
}).strict() ;

export const ExpenseCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExpenseCategoryFindUniqueOrThrowArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereUniqueInputSchema,
}).strict() ;

export const ExpenseTagFindFirstArgsSchema: z.ZodType<Prisma.ExpenseTagFindFirstArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseTagOrderByWithRelationInputSchema.array(),ExpenseTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseTagScalarFieldEnumSchema,ExpenseTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseTagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExpenseTagFindFirstOrThrowArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseTagOrderByWithRelationInputSchema.array(),ExpenseTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseTagScalarFieldEnumSchema,ExpenseTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseTagFindManyArgsSchema: z.ZodType<Prisma.ExpenseTagFindManyArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseTagOrderByWithRelationInputSchema.array(),ExpenseTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseTagScalarFieldEnumSchema,ExpenseTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseTagAggregateArgsSchema: z.ZodType<Prisma.ExpenseTagAggregateArgs> = z.object({
  where: ExpenseTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseTagOrderByWithRelationInputSchema.array(),ExpenseTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseTagGroupByArgsSchema: z.ZodType<Prisma.ExpenseTagGroupByArgs> = z.object({
  where: ExpenseTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseTagOrderByWithAggregationInputSchema.array(),ExpenseTagOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseTagScalarFieldEnumSchema.array(),
  having: ExpenseTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseTagFindUniqueArgsSchema: z.ZodType<Prisma.ExpenseTagFindUniqueArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseTagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExpenseTagFindUniqueOrThrowArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseToTagFindFirstArgsSchema: z.ZodType<Prisma.ExpenseToTagFindFirstArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseToTagOrderByWithRelationInputSchema.array(),ExpenseToTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseToTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseToTagScalarFieldEnumSchema,ExpenseToTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseToTagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExpenseToTagFindFirstOrThrowArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseToTagOrderByWithRelationInputSchema.array(),ExpenseToTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseToTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseToTagScalarFieldEnumSchema,ExpenseToTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseToTagFindManyArgsSchema: z.ZodType<Prisma.ExpenseToTagFindManyArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseToTagOrderByWithRelationInputSchema.array(),ExpenseToTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseToTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseToTagScalarFieldEnumSchema,ExpenseToTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseToTagAggregateArgsSchema: z.ZodType<Prisma.ExpenseToTagAggregateArgs> = z.object({
  where: ExpenseToTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseToTagOrderByWithRelationInputSchema.array(),ExpenseToTagOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseToTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseToTagGroupByArgsSchema: z.ZodType<Prisma.ExpenseToTagGroupByArgs> = z.object({
  where: ExpenseToTagWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseToTagOrderByWithAggregationInputSchema.array(),ExpenseToTagOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseToTagScalarFieldEnumSchema.array(),
  having: ExpenseToTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseToTagFindUniqueArgsSchema: z.ZodType<Prisma.ExpenseToTagFindUniqueArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseToTagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExpenseToTagFindUniqueOrThrowArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereUniqueInputSchema,
}).strict() ;

export const CommentFindFirstArgsSchema: z.ZodType<Prisma.CommentFindFirstArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CommentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CommentFindFirstOrThrowArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CommentFindManyArgsSchema: z.ZodType<Prisma.CommentFindManyArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CommentScalarFieldEnumSchema,CommentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CommentAggregateArgsSchema: z.ZodType<Prisma.CommentAggregateArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithRelationInputSchema.array(),CommentOrderByWithRelationInputSchema ]).optional(),
  cursor: CommentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CommentGroupByArgsSchema: z.ZodType<Prisma.CommentGroupByArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
  orderBy: z.union([ CommentOrderByWithAggregationInputSchema.array(),CommentOrderByWithAggregationInputSchema ]).optional(),
  by: CommentScalarFieldEnumSchema.array(),
  having: CommentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CommentFindUniqueArgsSchema: z.ZodType<Prisma.CommentFindUniqueArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict() ;

export const CommentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CommentFindUniqueOrThrowArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindFirstArgsSchema: z.ZodType<Prisma.AttachmentFindFirstArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindFirstOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindManyArgsSchema: z.ZodType<Prisma.AttachmentFindManyArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentAggregateArgsSchema: z.ZodType<Prisma.AttachmentAggregateArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentGroupByArgsSchema: z.ZodType<Prisma.AttachmentGroupByArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithAggregationInputSchema.array(),AttachmentOrderByWithAggregationInputSchema ]).optional(),
  by: AttachmentScalarFieldEnumSchema.array(),
  having: AttachmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentFindUniqueArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventFindFirstArgsSchema: z.ZodType<Prisma.CalendarEventFindFirstArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventFindFirstOrThrowArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventFindManyArgsSchema: z.ZodType<Prisma.CalendarEventFindManyArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventScalarFieldEnumSchema,CalendarEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventAggregateArgsSchema: z.ZodType<Prisma.CalendarEventAggregateArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithRelationInputSchema.array(),CalendarEventOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CalendarEventGroupByArgsSchema: z.ZodType<Prisma.CalendarEventGroupByArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventOrderByWithAggregationInputSchema.array(),CalendarEventOrderByWithAggregationInputSchema ]).optional(),
  by: CalendarEventScalarFieldEnumSchema.array(),
  having: CalendarEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CalendarEventFindUniqueArgsSchema: z.ZodType<Prisma.CalendarEventFindUniqueArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventFindUniqueOrThrowArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventAttendeeFindFirstArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeFindFirstArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventAttendeeOrderByWithRelationInputSchema.array(),CalendarEventAttendeeOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventAttendeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventAttendeeScalarFieldEnumSchema,CalendarEventAttendeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventAttendeeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeFindFirstOrThrowArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventAttendeeOrderByWithRelationInputSchema.array(),CalendarEventAttendeeOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventAttendeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventAttendeeScalarFieldEnumSchema,CalendarEventAttendeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventAttendeeFindManyArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeFindManyArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventAttendeeOrderByWithRelationInputSchema.array(),CalendarEventAttendeeOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventAttendeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CalendarEventAttendeeScalarFieldEnumSchema,CalendarEventAttendeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CalendarEventAttendeeAggregateArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeAggregateArgs> = z.object({
  where: CalendarEventAttendeeWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventAttendeeOrderByWithRelationInputSchema.array(),CalendarEventAttendeeOrderByWithRelationInputSchema ]).optional(),
  cursor: CalendarEventAttendeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CalendarEventAttendeeGroupByArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeGroupByArgs> = z.object({
  where: CalendarEventAttendeeWhereInputSchema.optional(),
  orderBy: z.union([ CalendarEventAttendeeOrderByWithAggregationInputSchema.array(),CalendarEventAttendeeOrderByWithAggregationInputSchema ]).optional(),
  by: CalendarEventAttendeeScalarFieldEnumSchema.array(),
  having: CalendarEventAttendeeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CalendarEventAttendeeFindUniqueArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeFindUniqueArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventAttendeeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeFindUniqueOrThrowArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereUniqueInputSchema,
}).strict() ;

export const NotificationFindFirstArgsSchema: z.ZodType<Prisma.NotificationFindFirstArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.NotificationFindFirstOrThrowArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationFindManyArgsSchema: z.ZodType<Prisma.NotificationFindManyArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationAggregateArgsSchema: z.ZodType<Prisma.NotificationAggregateArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationGroupByArgsSchema: z.ZodType<Prisma.NotificationGroupByArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithAggregationInputSchema.array(),NotificationOrderByWithAggregationInputSchema ]).optional(),
  by: NotificationScalarFieldEnumSchema.array(),
  having: NotificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationFindUniqueArgsSchema: z.ZodType<Prisma.NotificationFindUniqueArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.NotificationFindUniqueOrThrowArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Prisma.InvitationFindFirstArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindFirstOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Prisma.InvitationFindManyArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Prisma.InvitationFindUniqueArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindUniqueOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const EmployeeFindFirstArgsSchema: z.ZodType<Prisma.EmployeeFindFirstArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereInputSchema.optional(),
  orderBy: z.union([ EmployeeOrderByWithRelationInputSchema.array(),EmployeeOrderByWithRelationInputSchema ]).optional(),
  cursor: EmployeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmployeeScalarFieldEnumSchema,EmployeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmployeeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EmployeeFindFirstOrThrowArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereInputSchema.optional(),
  orderBy: z.union([ EmployeeOrderByWithRelationInputSchema.array(),EmployeeOrderByWithRelationInputSchema ]).optional(),
  cursor: EmployeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmployeeScalarFieldEnumSchema,EmployeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmployeeFindManyArgsSchema: z.ZodType<Prisma.EmployeeFindManyArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereInputSchema.optional(),
  orderBy: z.union([ EmployeeOrderByWithRelationInputSchema.array(),EmployeeOrderByWithRelationInputSchema ]).optional(),
  cursor: EmployeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmployeeScalarFieldEnumSchema,EmployeeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmployeeAggregateArgsSchema: z.ZodType<Prisma.EmployeeAggregateArgs> = z.object({
  where: EmployeeWhereInputSchema.optional(),
  orderBy: z.union([ EmployeeOrderByWithRelationInputSchema.array(),EmployeeOrderByWithRelationInputSchema ]).optional(),
  cursor: EmployeeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EmployeeGroupByArgsSchema: z.ZodType<Prisma.EmployeeGroupByArgs> = z.object({
  where: EmployeeWhereInputSchema.optional(),
  orderBy: z.union([ EmployeeOrderByWithAggregationInputSchema.array(),EmployeeOrderByWithAggregationInputSchema ]).optional(),
  by: EmployeeScalarFieldEnumSchema.array(),
  having: EmployeeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EmployeeFindUniqueArgsSchema: z.ZodType<Prisma.EmployeeFindUniqueArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereUniqueInputSchema,
}).strict() ;

export const EmployeeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EmployeeFindUniqueOrThrowArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereUniqueInputSchema,
}).strict() ;

export const PayrollFindFirstArgsSchema: z.ZodType<Prisma.PayrollFindFirstArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereInputSchema.optional(),
  orderBy: z.union([ PayrollOrderByWithRelationInputSchema.array(),PayrollOrderByWithRelationInputSchema ]).optional(),
  cursor: PayrollWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayrollScalarFieldEnumSchema,PayrollScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PayrollFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PayrollFindFirstOrThrowArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereInputSchema.optional(),
  orderBy: z.union([ PayrollOrderByWithRelationInputSchema.array(),PayrollOrderByWithRelationInputSchema ]).optional(),
  cursor: PayrollWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayrollScalarFieldEnumSchema,PayrollScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PayrollFindManyArgsSchema: z.ZodType<Prisma.PayrollFindManyArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereInputSchema.optional(),
  orderBy: z.union([ PayrollOrderByWithRelationInputSchema.array(),PayrollOrderByWithRelationInputSchema ]).optional(),
  cursor: PayrollWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PayrollScalarFieldEnumSchema,PayrollScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PayrollAggregateArgsSchema: z.ZodType<Prisma.PayrollAggregateArgs> = z.object({
  where: PayrollWhereInputSchema.optional(),
  orderBy: z.union([ PayrollOrderByWithRelationInputSchema.array(),PayrollOrderByWithRelationInputSchema ]).optional(),
  cursor: PayrollWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PayrollGroupByArgsSchema: z.ZodType<Prisma.PayrollGroupByArgs> = z.object({
  where: PayrollWhereInputSchema.optional(),
  orderBy: z.union([ PayrollOrderByWithAggregationInputSchema.array(),PayrollOrderByWithAggregationInputSchema ]).optional(),
  by: PayrollScalarFieldEnumSchema.array(),
  having: PayrollScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PayrollFindUniqueArgsSchema: z.ZodType<Prisma.PayrollFindUniqueArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereUniqueInputSchema,
}).strict() ;

export const PayrollFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PayrollFindUniqueOrThrowArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereUniqueInputSchema,
}).strict() ;

export const TimeOffFindFirstArgsSchema: z.ZodType<Prisma.TimeOffFindFirstArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereInputSchema.optional(),
  orderBy: z.union([ TimeOffOrderByWithRelationInputSchema.array(),TimeOffOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeOffWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeOffScalarFieldEnumSchema,TimeOffScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeOffFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TimeOffFindFirstOrThrowArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereInputSchema.optional(),
  orderBy: z.union([ TimeOffOrderByWithRelationInputSchema.array(),TimeOffOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeOffWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeOffScalarFieldEnumSchema,TimeOffScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeOffFindManyArgsSchema: z.ZodType<Prisma.TimeOffFindManyArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereInputSchema.optional(),
  orderBy: z.union([ TimeOffOrderByWithRelationInputSchema.array(),TimeOffOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeOffWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimeOffScalarFieldEnumSchema,TimeOffScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TimeOffAggregateArgsSchema: z.ZodType<Prisma.TimeOffAggregateArgs> = z.object({
  where: TimeOffWhereInputSchema.optional(),
  orderBy: z.union([ TimeOffOrderByWithRelationInputSchema.array(),TimeOffOrderByWithRelationInputSchema ]).optional(),
  cursor: TimeOffWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeOffGroupByArgsSchema: z.ZodType<Prisma.TimeOffGroupByArgs> = z.object({
  where: TimeOffWhereInputSchema.optional(),
  orderBy: z.union([ TimeOffOrderByWithAggregationInputSchema.array(),TimeOffOrderByWithAggregationInputSchema ]).optional(),
  by: TimeOffScalarFieldEnumSchema.array(),
  having: TimeOffScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TimeOffFindUniqueArgsSchema: z.ZodType<Prisma.TimeOffFindUniqueArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereUniqueInputSchema,
}).strict() ;

export const TimeOffFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TimeOffFindUniqueOrThrowArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereUniqueInputSchema,
}).strict() ;

export const PerformanceReviewFindFirstArgsSchema: z.ZodType<Prisma.PerformanceReviewFindFirstArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceReviewOrderByWithRelationInputSchema.array(),PerformanceReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceReviewScalarFieldEnumSchema,PerformanceReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceReviewFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PerformanceReviewFindFirstOrThrowArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceReviewOrderByWithRelationInputSchema.array(),PerformanceReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceReviewScalarFieldEnumSchema,PerformanceReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceReviewFindManyArgsSchema: z.ZodType<Prisma.PerformanceReviewFindManyArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceReviewOrderByWithRelationInputSchema.array(),PerformanceReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceReviewScalarFieldEnumSchema,PerformanceReviewScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceReviewAggregateArgsSchema: z.ZodType<Prisma.PerformanceReviewAggregateArgs> = z.object({
  where: PerformanceReviewWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceReviewOrderByWithRelationInputSchema.array(),PerformanceReviewOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceReviewWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PerformanceReviewGroupByArgsSchema: z.ZodType<Prisma.PerformanceReviewGroupByArgs> = z.object({
  where: PerformanceReviewWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceReviewOrderByWithAggregationInputSchema.array(),PerformanceReviewOrderByWithAggregationInputSchema ]).optional(),
  by: PerformanceReviewScalarFieldEnumSchema.array(),
  having: PerformanceReviewScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PerformanceReviewFindUniqueArgsSchema: z.ZodType<Prisma.PerformanceReviewFindUniqueArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereUniqueInputSchema,
}).strict() ;

export const PerformanceReviewFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PerformanceReviewFindUniqueOrThrowArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereUniqueInputSchema,
}).strict() ;

export const MarketingCampaignFindFirstArgsSchema: z.ZodType<Prisma.MarketingCampaignFindFirstArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereInputSchema.optional(),
  orderBy: z.union([ MarketingCampaignOrderByWithRelationInputSchema.array(),MarketingCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: MarketingCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MarketingCampaignScalarFieldEnumSchema,MarketingCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MarketingCampaignFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MarketingCampaignFindFirstOrThrowArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereInputSchema.optional(),
  orderBy: z.union([ MarketingCampaignOrderByWithRelationInputSchema.array(),MarketingCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: MarketingCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MarketingCampaignScalarFieldEnumSchema,MarketingCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MarketingCampaignFindManyArgsSchema: z.ZodType<Prisma.MarketingCampaignFindManyArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereInputSchema.optional(),
  orderBy: z.union([ MarketingCampaignOrderByWithRelationInputSchema.array(),MarketingCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: MarketingCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MarketingCampaignScalarFieldEnumSchema,MarketingCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MarketingCampaignAggregateArgsSchema: z.ZodType<Prisma.MarketingCampaignAggregateArgs> = z.object({
  where: MarketingCampaignWhereInputSchema.optional(),
  orderBy: z.union([ MarketingCampaignOrderByWithRelationInputSchema.array(),MarketingCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: MarketingCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MarketingCampaignGroupByArgsSchema: z.ZodType<Prisma.MarketingCampaignGroupByArgs> = z.object({
  where: MarketingCampaignWhereInputSchema.optional(),
  orderBy: z.union([ MarketingCampaignOrderByWithAggregationInputSchema.array(),MarketingCampaignOrderByWithAggregationInputSchema ]).optional(),
  by: MarketingCampaignScalarFieldEnumSchema.array(),
  having: MarketingCampaignScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MarketingCampaignFindUniqueArgsSchema: z.ZodType<Prisma.MarketingCampaignFindUniqueArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereUniqueInputSchema,
}).strict() ;

export const MarketingCampaignFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MarketingCampaignFindUniqueOrThrowArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereUniqueInputSchema,
}).strict() ;

export const EmailCampaignFindFirstArgsSchema: z.ZodType<Prisma.EmailCampaignFindFirstArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereInputSchema.optional(),
  orderBy: z.union([ EmailCampaignOrderByWithRelationInputSchema.array(),EmailCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: EmailCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmailCampaignScalarFieldEnumSchema,EmailCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmailCampaignFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EmailCampaignFindFirstOrThrowArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereInputSchema.optional(),
  orderBy: z.union([ EmailCampaignOrderByWithRelationInputSchema.array(),EmailCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: EmailCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmailCampaignScalarFieldEnumSchema,EmailCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmailCampaignFindManyArgsSchema: z.ZodType<Prisma.EmailCampaignFindManyArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereInputSchema.optional(),
  orderBy: z.union([ EmailCampaignOrderByWithRelationInputSchema.array(),EmailCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: EmailCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EmailCampaignScalarFieldEnumSchema,EmailCampaignScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EmailCampaignAggregateArgsSchema: z.ZodType<Prisma.EmailCampaignAggregateArgs> = z.object({
  where: EmailCampaignWhereInputSchema.optional(),
  orderBy: z.union([ EmailCampaignOrderByWithRelationInputSchema.array(),EmailCampaignOrderByWithRelationInputSchema ]).optional(),
  cursor: EmailCampaignWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EmailCampaignGroupByArgsSchema: z.ZodType<Prisma.EmailCampaignGroupByArgs> = z.object({
  where: EmailCampaignWhereInputSchema.optional(),
  orderBy: z.union([ EmailCampaignOrderByWithAggregationInputSchema.array(),EmailCampaignOrderByWithAggregationInputSchema ]).optional(),
  by: EmailCampaignScalarFieldEnumSchema.array(),
  having: EmailCampaignScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EmailCampaignFindUniqueArgsSchema: z.ZodType<Prisma.EmailCampaignFindUniqueArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereUniqueInputSchema,
}).strict() ;

export const EmailCampaignFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EmailCampaignFindUniqueOrThrowArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereUniqueInputSchema,
}).strict() ;

export const SocialMediaPostFindFirstArgsSchema: z.ZodType<Prisma.SocialMediaPostFindFirstArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereInputSchema.optional(),
  orderBy: z.union([ SocialMediaPostOrderByWithRelationInputSchema.array(),SocialMediaPostOrderByWithRelationInputSchema ]).optional(),
  cursor: SocialMediaPostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SocialMediaPostScalarFieldEnumSchema,SocialMediaPostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SocialMediaPostFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SocialMediaPostFindFirstOrThrowArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereInputSchema.optional(),
  orderBy: z.union([ SocialMediaPostOrderByWithRelationInputSchema.array(),SocialMediaPostOrderByWithRelationInputSchema ]).optional(),
  cursor: SocialMediaPostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SocialMediaPostScalarFieldEnumSchema,SocialMediaPostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SocialMediaPostFindManyArgsSchema: z.ZodType<Prisma.SocialMediaPostFindManyArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereInputSchema.optional(),
  orderBy: z.union([ SocialMediaPostOrderByWithRelationInputSchema.array(),SocialMediaPostOrderByWithRelationInputSchema ]).optional(),
  cursor: SocialMediaPostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SocialMediaPostScalarFieldEnumSchema,SocialMediaPostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SocialMediaPostAggregateArgsSchema: z.ZodType<Prisma.SocialMediaPostAggregateArgs> = z.object({
  where: SocialMediaPostWhereInputSchema.optional(),
  orderBy: z.union([ SocialMediaPostOrderByWithRelationInputSchema.array(),SocialMediaPostOrderByWithRelationInputSchema ]).optional(),
  cursor: SocialMediaPostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SocialMediaPostGroupByArgsSchema: z.ZodType<Prisma.SocialMediaPostGroupByArgs> = z.object({
  where: SocialMediaPostWhereInputSchema.optional(),
  orderBy: z.union([ SocialMediaPostOrderByWithAggregationInputSchema.array(),SocialMediaPostOrderByWithAggregationInputSchema ]).optional(),
  by: SocialMediaPostScalarFieldEnumSchema.array(),
  having: SocialMediaPostScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SocialMediaPostFindUniqueArgsSchema: z.ZodType<Prisma.SocialMediaPostFindUniqueArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereUniqueInputSchema,
}).strict() ;

export const SocialMediaPostFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SocialMediaPostFindUniqueOrThrowArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindFirstArgsSchema: z.ZodType<Prisma.VerificationFindFirstArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationFindFirstOrThrowArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindManyArgsSchema: z.ZodType<Prisma.VerificationFindManyArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationAggregateArgsSchema: z.ZodType<Prisma.VerificationAggregateArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationGroupByArgsSchema: z.ZodType<Prisma.VerificationGroupByArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithAggregationInputSchema.array(),VerificationOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationFindUniqueArgsSchema: z.ZodType<Prisma.VerificationFindUniqueArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationFindUniqueOrThrowArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportFindFirstArgsSchema: z.ZodType<Prisma.FinancialReportFindFirstArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportOrderByWithRelationInputSchema.array(),FinancialReportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScalarFieldEnumSchema,FinancialReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportFindFirstOrThrowArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportOrderByWithRelationInputSchema.array(),FinancialReportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScalarFieldEnumSchema,FinancialReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportFindManyArgsSchema: z.ZodType<Prisma.FinancialReportFindManyArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportOrderByWithRelationInputSchema.array(),FinancialReportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScalarFieldEnumSchema,FinancialReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportAggregateArgsSchema: z.ZodType<Prisma.FinancialReportAggregateArgs> = z.object({
  where: FinancialReportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportOrderByWithRelationInputSchema.array(),FinancialReportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportGroupByArgsSchema: z.ZodType<Prisma.FinancialReportGroupByArgs> = z.object({
  where: FinancialReportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportOrderByWithAggregationInputSchema.array(),FinancialReportOrderByWithAggregationInputSchema ]).optional(),
  by: FinancialReportScalarFieldEnumSchema.array(),
  having: FinancialReportScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportFindUniqueArgsSchema: z.ZodType<Prisma.FinancialReportFindUniqueArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportFindUniqueOrThrowArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportDataFindFirstArgsSchema: z.ZodType<Prisma.FinancialReportDataFindFirstArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportDataOrderByWithRelationInputSchema.array(),FinancialReportDataOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportDataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportDataScalarFieldEnumSchema,FinancialReportDataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportDataFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportDataFindFirstOrThrowArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportDataOrderByWithRelationInputSchema.array(),FinancialReportDataOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportDataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportDataScalarFieldEnumSchema,FinancialReportDataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportDataFindManyArgsSchema: z.ZodType<Prisma.FinancialReportDataFindManyArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportDataOrderByWithRelationInputSchema.array(),FinancialReportDataOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportDataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportDataScalarFieldEnumSchema,FinancialReportDataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportDataAggregateArgsSchema: z.ZodType<Prisma.FinancialReportDataAggregateArgs> = z.object({
  where: FinancialReportDataWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportDataOrderByWithRelationInputSchema.array(),FinancialReportDataOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportDataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportDataGroupByArgsSchema: z.ZodType<Prisma.FinancialReportDataGroupByArgs> = z.object({
  where: FinancialReportDataWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportDataOrderByWithAggregationInputSchema.array(),FinancialReportDataOrderByWithAggregationInputSchema ]).optional(),
  by: FinancialReportDataScalarFieldEnumSchema.array(),
  having: FinancialReportDataScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportDataFindUniqueArgsSchema: z.ZodType<Prisma.FinancialReportDataFindUniqueArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportDataFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportDataFindUniqueOrThrowArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportExportFindFirstArgsSchema: z.ZodType<Prisma.FinancialReportExportFindFirstArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportExportOrderByWithRelationInputSchema.array(),FinancialReportExportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportExportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportExportScalarFieldEnumSchema,FinancialReportExportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportExportFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportExportFindFirstOrThrowArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportExportOrderByWithRelationInputSchema.array(),FinancialReportExportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportExportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportExportScalarFieldEnumSchema,FinancialReportExportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportExportFindManyArgsSchema: z.ZodType<Prisma.FinancialReportExportFindManyArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportExportOrderByWithRelationInputSchema.array(),FinancialReportExportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportExportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportExportScalarFieldEnumSchema,FinancialReportExportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportExportAggregateArgsSchema: z.ZodType<Prisma.FinancialReportExportAggregateArgs> = z.object({
  where: FinancialReportExportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportExportOrderByWithRelationInputSchema.array(),FinancialReportExportOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportExportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportExportGroupByArgsSchema: z.ZodType<Prisma.FinancialReportExportGroupByArgs> = z.object({
  where: FinancialReportExportWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportExportOrderByWithAggregationInputSchema.array(),FinancialReportExportOrderByWithAggregationInputSchema ]).optional(),
  by: FinancialReportExportScalarFieldEnumSchema.array(),
  having: FinancialReportExportScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportExportFindUniqueArgsSchema: z.ZodType<Prisma.FinancialReportExportFindUniqueArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportExportFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportExportFindUniqueOrThrowArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportScheduleFindFirstArgsSchema: z.ZodType<Prisma.FinancialReportScheduleFindFirstArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportScheduleOrderByWithRelationInputSchema.array(),FinancialReportScheduleOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportScheduleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScheduleScalarFieldEnumSchema,FinancialReportScheduleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportScheduleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportScheduleFindFirstOrThrowArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportScheduleOrderByWithRelationInputSchema.array(),FinancialReportScheduleOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportScheduleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScheduleScalarFieldEnumSchema,FinancialReportScheduleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportScheduleFindManyArgsSchema: z.ZodType<Prisma.FinancialReportScheduleFindManyArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportScheduleOrderByWithRelationInputSchema.array(),FinancialReportScheduleOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportScheduleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FinancialReportScheduleScalarFieldEnumSchema,FinancialReportScheduleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FinancialReportScheduleAggregateArgsSchema: z.ZodType<Prisma.FinancialReportScheduleAggregateArgs> = z.object({
  where: FinancialReportScheduleWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportScheduleOrderByWithRelationInputSchema.array(),FinancialReportScheduleOrderByWithRelationInputSchema ]).optional(),
  cursor: FinancialReportScheduleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportScheduleGroupByArgsSchema: z.ZodType<Prisma.FinancialReportScheduleGroupByArgs> = z.object({
  where: FinancialReportScheduleWhereInputSchema.optional(),
  orderBy: z.union([ FinancialReportScheduleOrderByWithAggregationInputSchema.array(),FinancialReportScheduleOrderByWithAggregationInputSchema ]).optional(),
  by: FinancialReportScheduleScalarFieldEnumSchema.array(),
  having: FinancialReportScheduleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FinancialReportScheduleFindUniqueArgsSchema: z.ZodType<Prisma.FinancialReportScheduleFindUniqueArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportScheduleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FinancialReportScheduleFindUniqueOrThrowArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereUniqueInputSchema,
}).strict() ;

export const PermissionCreateArgsSchema: z.ZodType<Prisma.PermissionCreateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const PermissionUpsertArgsSchema: z.ZodType<Prisma.PermissionUpsertArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
  create: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
  update: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const PermissionCreateManyArgsSchema: z.ZodType<Prisma.PermissionCreateManyArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PermissionDeleteArgsSchema: z.ZodType<Prisma.PermissionDeleteArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateArgsSchema: z.ZodType<Prisma.PermissionUpdateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateManyArgsSchema: z.ZodType<Prisma.PermissionUpdateManyArgs> = z.object({
  data: z.union([ PermissionUpdateManyMutationInputSchema,PermissionUncheckedUpdateManyInputSchema ]),
  where: PermissionWhereInputSchema.optional(),
}).strict() ;

export const PermissionDeleteManyArgsSchema: z.ZodType<Prisma.PermissionDeleteManyArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
}).strict() ;

export const RolePermissionCreateArgsSchema: z.ZodType<Prisma.RolePermissionCreateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const RolePermissionUpsertArgsSchema: z.ZodType<Prisma.RolePermissionUpsertArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
  create: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
  update: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RolePermissionCreateManyArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RolePermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RolePermissionDeleteArgsSchema: z.ZodType<Prisma.RolePermissionDeleteArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateArgsSchema: z.ZodType<Prisma.RolePermissionUpdateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateManyArgsSchema: z.ZodType<Prisma.RolePermissionUpdateManyArgs> = z.object({
  data: z.union([ RolePermissionUpdateManyMutationInputSchema,RolePermissionUncheckedUpdateManyInputSchema ]),
  where: RolePermissionWhereInputSchema.optional(),
}).strict() ;

export const RolePermissionDeleteManyArgsSchema: z.ZodType<Prisma.RolePermissionDeleteManyArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
}).strict() ;

export const CustomRoleCreateArgsSchema: z.ZodType<Prisma.CustomRoleCreateArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  data: z.union([ CustomRoleCreateInputSchema,CustomRoleUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomRoleUpsertArgsSchema: z.ZodType<Prisma.CustomRoleUpsertArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereUniqueInputSchema,
  create: z.union([ CustomRoleCreateInputSchema,CustomRoleUncheckedCreateInputSchema ]),
  update: z.union([ CustomRoleUpdateInputSchema,CustomRoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomRoleCreateManyArgsSchema: z.ZodType<Prisma.CustomRoleCreateManyArgs> = z.object({
  data: z.union([ CustomRoleCreateManyInputSchema,CustomRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomRoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomRoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomRoleCreateManyInputSchema,CustomRoleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomRoleDeleteArgsSchema: z.ZodType<Prisma.CustomRoleDeleteArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  where: CustomRoleWhereUniqueInputSchema,
}).strict() ;

export const CustomRoleUpdateArgsSchema: z.ZodType<Prisma.CustomRoleUpdateArgs> = z.object({
  select: CustomRoleSelectSchema.optional(),
  include: CustomRoleIncludeSchema.optional(),
  data: z.union([ CustomRoleUpdateInputSchema,CustomRoleUncheckedUpdateInputSchema ]),
  where: CustomRoleWhereUniqueInputSchema,
}).strict() ;

export const CustomRoleUpdateManyArgsSchema: z.ZodType<Prisma.CustomRoleUpdateManyArgs> = z.object({
  data: z.union([ CustomRoleUpdateManyMutationInputSchema,CustomRoleUncheckedUpdateManyInputSchema ]),
  where: CustomRoleWhereInputSchema.optional(),
}).strict() ;

export const CustomRoleDeleteManyArgsSchema: z.ZodType<Prisma.CustomRoleDeleteManyArgs> = z.object({
  where: CustomRoleWhereInputSchema.optional(),
}).strict() ;

export const CustomRolePermissionCreateArgsSchema: z.ZodType<Prisma.CustomRolePermissionCreateArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  data: z.union([ CustomRolePermissionCreateInputSchema,CustomRolePermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomRolePermissionUpsertArgsSchema: z.ZodType<Prisma.CustomRolePermissionUpsertArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereUniqueInputSchema,
  create: z.union([ CustomRolePermissionCreateInputSchema,CustomRolePermissionUncheckedCreateInputSchema ]),
  update: z.union([ CustomRolePermissionUpdateInputSchema,CustomRolePermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomRolePermissionCreateManyArgsSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyArgs> = z.object({
  data: z.union([ CustomRolePermissionCreateManyInputSchema,CustomRolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomRolePermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomRolePermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomRolePermissionCreateManyInputSchema,CustomRolePermissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomRolePermissionDeleteArgsSchema: z.ZodType<Prisma.CustomRolePermissionDeleteArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  where: CustomRolePermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomRolePermissionUpdateArgsSchema: z.ZodType<Prisma.CustomRolePermissionUpdateArgs> = z.object({
  select: CustomRolePermissionSelectSchema.optional(),
  include: CustomRolePermissionIncludeSchema.optional(),
  data: z.union([ CustomRolePermissionUpdateInputSchema,CustomRolePermissionUncheckedUpdateInputSchema ]),
  where: CustomRolePermissionWhereUniqueInputSchema,
}).strict() ;

export const CustomRolePermissionUpdateManyArgsSchema: z.ZodType<Prisma.CustomRolePermissionUpdateManyArgs> = z.object({
  data: z.union([ CustomRolePermissionUpdateManyMutationInputSchema,CustomRolePermissionUncheckedUpdateManyInputSchema ]),
  where: CustomRolePermissionWhereInputSchema.optional(),
}).strict() ;

export const CustomRolePermissionDeleteManyArgsSchema: z.ZodType<Prisma.CustomRolePermissionDeleteManyArgs> = z.object({
  where: CustomRolePermissionWhereInputSchema.optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict() ;

export const UserOrganizationCreateArgsSchema: z.ZodType<Prisma.UserOrganizationCreateArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  data: z.union([ UserOrganizationCreateInputSchema,UserOrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const UserOrganizationUpsertArgsSchema: z.ZodType<Prisma.UserOrganizationUpsertArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereUniqueInputSchema,
  create: z.union([ UserOrganizationCreateInputSchema,UserOrganizationUncheckedCreateInputSchema ]),
  update: z.union([ UserOrganizationUpdateInputSchema,UserOrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserOrganizationCreateManyArgsSchema: z.ZodType<Prisma.UserOrganizationCreateManyArgs> = z.object({
  data: z.union([ UserOrganizationCreateManyInputSchema,UserOrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserOrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserOrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserOrganizationCreateManyInputSchema,UserOrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserOrganizationDeleteArgsSchema: z.ZodType<Prisma.UserOrganizationDeleteArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  where: UserOrganizationWhereUniqueInputSchema,
}).strict() ;

export const UserOrganizationUpdateArgsSchema: z.ZodType<Prisma.UserOrganizationUpdateArgs> = z.object({
  select: UserOrganizationSelectSchema.optional(),
  include: UserOrganizationIncludeSchema.optional(),
  data: z.union([ UserOrganizationUpdateInputSchema,UserOrganizationUncheckedUpdateInputSchema ]),
  where: UserOrganizationWhereUniqueInputSchema,
}).strict() ;

export const UserOrganizationUpdateManyArgsSchema: z.ZodType<Prisma.UserOrganizationUpdateManyArgs> = z.object({
  data: z.union([ UserOrganizationUpdateManyMutationInputSchema,UserOrganizationUncheckedUpdateManyInputSchema ]),
  where: UserOrganizationWhereInputSchema.optional(),
}).strict() ;

export const UserOrganizationDeleteManyArgsSchema: z.ZodType<Prisma.UserOrganizationDeleteManyArgs> = z.object({
  where: UserOrganizationWhereInputSchema.optional(),
}).strict() ;

export const CustomerCreateArgsSchema: z.ZodType<Prisma.CustomerCreateArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  data: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomerUpsertArgsSchema: z.ZodType<Prisma.CustomerUpsertArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereUniqueInputSchema,
  create: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
  update: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomerCreateManyArgsSchema: z.ZodType<Prisma.CustomerCreateManyArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerDeleteArgsSchema: z.ZodType<Prisma.CustomerDeleteArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateArgsSchema: z.ZodType<Prisma.CustomerUpdateArgs> = z.object({
  select: CustomerSelectSchema.optional(),
  include: CustomerIncludeSchema.optional(),
  data: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateManyArgsSchema: z.ZodType<Prisma.CustomerUpdateManyArgs> = z.object({
  data: z.union([ CustomerUpdateManyMutationInputSchema,CustomerUncheckedUpdateManyInputSchema ]),
  where: CustomerWhereInputSchema.optional(),
}).strict() ;

export const CustomerDeleteManyArgsSchema: z.ZodType<Prisma.CustomerDeleteManyArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
}).strict() ;

export const CustomerInteractionCreateArgsSchema: z.ZodType<Prisma.CustomerInteractionCreateArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  data: z.union([ CustomerInteractionCreateInputSchema,CustomerInteractionUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomerInteractionUpsertArgsSchema: z.ZodType<Prisma.CustomerInteractionUpsertArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereUniqueInputSchema,
  create: z.union([ CustomerInteractionCreateInputSchema,CustomerInteractionUncheckedCreateInputSchema ]),
  update: z.union([ CustomerInteractionUpdateInputSchema,CustomerInteractionUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomerInteractionCreateManyArgsSchema: z.ZodType<Prisma.CustomerInteractionCreateManyArgs> = z.object({
  data: z.union([ CustomerInteractionCreateManyInputSchema,CustomerInteractionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerInteractionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerInteractionCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerInteractionCreateManyInputSchema,CustomerInteractionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerInteractionDeleteArgsSchema: z.ZodType<Prisma.CustomerInteractionDeleteArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  where: CustomerInteractionWhereUniqueInputSchema,
}).strict() ;

export const CustomerInteractionUpdateArgsSchema: z.ZodType<Prisma.CustomerInteractionUpdateArgs> = z.object({
  select: CustomerInteractionSelectSchema.optional(),
  include: CustomerInteractionIncludeSchema.optional(),
  data: z.union([ CustomerInteractionUpdateInputSchema,CustomerInteractionUncheckedUpdateInputSchema ]),
  where: CustomerInteractionWhereUniqueInputSchema,
}).strict() ;

export const CustomerInteractionUpdateManyArgsSchema: z.ZodType<Prisma.CustomerInteractionUpdateManyArgs> = z.object({
  data: z.union([ CustomerInteractionUpdateManyMutationInputSchema,CustomerInteractionUncheckedUpdateManyInputSchema ]),
  where: CustomerInteractionWhereInputSchema.optional(),
}).strict() ;

export const CustomerInteractionDeleteManyArgsSchema: z.ZodType<Prisma.CustomerInteractionDeleteManyArgs> = z.object({
  where: CustomerInteractionWhereInputSchema.optional(),
}).strict() ;

export const DealCreateArgsSchema: z.ZodType<Prisma.DealCreateArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  data: z.union([ DealCreateInputSchema,DealUncheckedCreateInputSchema ]),
}).strict() ;

export const DealUpsertArgsSchema: z.ZodType<Prisma.DealUpsertArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereUniqueInputSchema,
  create: z.union([ DealCreateInputSchema,DealUncheckedCreateInputSchema ]),
  update: z.union([ DealUpdateInputSchema,DealUncheckedUpdateInputSchema ]),
}).strict() ;

export const DealCreateManyArgsSchema: z.ZodType<Prisma.DealCreateManyArgs> = z.object({
  data: z.union([ DealCreateManyInputSchema,DealCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DealCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DealCreateManyAndReturnArgs> = z.object({
  data: z.union([ DealCreateManyInputSchema,DealCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DealDeleteArgsSchema: z.ZodType<Prisma.DealDeleteArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  where: DealWhereUniqueInputSchema,
}).strict() ;

export const DealUpdateArgsSchema: z.ZodType<Prisma.DealUpdateArgs> = z.object({
  select: DealSelectSchema.optional(),
  include: DealIncludeSchema.optional(),
  data: z.union([ DealUpdateInputSchema,DealUncheckedUpdateInputSchema ]),
  where: DealWhereUniqueInputSchema,
}).strict() ;

export const DealUpdateManyArgsSchema: z.ZodType<Prisma.DealUpdateManyArgs> = z.object({
  data: z.union([ DealUpdateManyMutationInputSchema,DealUncheckedUpdateManyInputSchema ]),
  where: DealWhereInputSchema.optional(),
}).strict() ;

export const DealDeleteManyArgsSchema: z.ZodType<Prisma.DealDeleteManyArgs> = z.object({
  where: DealWhereInputSchema.optional(),
}).strict() ;

export const ProjectCreateArgsSchema: z.ZodType<Prisma.ProjectCreateArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  data: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
}).strict() ;

export const ProjectUpsertArgsSchema: z.ZodType<Prisma.ProjectUpsertArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
  create: z.union([ ProjectCreateInputSchema,ProjectUncheckedCreateInputSchema ]),
  update: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProjectCreateManyArgsSchema: z.ZodType<Prisma.ProjectCreateManyArgs> = z.object({
  data: z.union([ ProjectCreateManyInputSchema,ProjectCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProjectCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProjectCreateManyInputSchema,ProjectCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectDeleteArgsSchema: z.ZodType<Prisma.ProjectDeleteArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectUpdateArgsSchema: z.ZodType<Prisma.ProjectUpdateArgs> = z.object({
  select: ProjectSelectSchema.optional(),
  include: ProjectIncludeSchema.optional(),
  data: z.union([ ProjectUpdateInputSchema,ProjectUncheckedUpdateInputSchema ]),
  where: ProjectWhereUniqueInputSchema,
}).strict() ;

export const ProjectUpdateManyArgsSchema: z.ZodType<Prisma.ProjectUpdateManyArgs> = z.object({
  data: z.union([ ProjectUpdateManyMutationInputSchema,ProjectUncheckedUpdateManyInputSchema ]),
  where: ProjectWhereInputSchema.optional(),
}).strict() ;

export const ProjectDeleteManyArgsSchema: z.ZodType<Prisma.ProjectDeleteManyArgs> = z.object({
  where: ProjectWhereInputSchema.optional(),
}).strict() ;

export const TaskCreateArgsSchema: z.ZodType<Prisma.TaskCreateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
}).strict() ;

export const TaskUpsertArgsSchema: z.ZodType<Prisma.TaskUpsertArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  create: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  update: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
}).strict() ;

export const TaskCreateManyArgsSchema: z.ZodType<Prisma.TaskCreateManyArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskCreateManyAndReturnArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskDeleteArgsSchema: z.ZodType<Prisma.TaskDeleteArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateArgsSchema: z.ZodType<Prisma.TaskUpdateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateManyArgsSchema: z.ZodType<Prisma.TaskUpdateManyArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const TaskDeleteManyArgsSchema: z.ZodType<Prisma.TaskDeleteManyArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const ProjectResourceCreateArgsSchema: z.ZodType<Prisma.ProjectResourceCreateArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  data: z.union([ ProjectResourceCreateInputSchema,ProjectResourceUncheckedCreateInputSchema ]),
}).strict() ;

export const ProjectResourceUpsertArgsSchema: z.ZodType<Prisma.ProjectResourceUpsertArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereUniqueInputSchema,
  create: z.union([ ProjectResourceCreateInputSchema,ProjectResourceUncheckedCreateInputSchema ]),
  update: z.union([ ProjectResourceUpdateInputSchema,ProjectResourceUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProjectResourceCreateManyArgsSchema: z.ZodType<Prisma.ProjectResourceCreateManyArgs> = z.object({
  data: z.union([ ProjectResourceCreateManyInputSchema,ProjectResourceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectResourceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProjectResourceCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProjectResourceCreateManyInputSchema,ProjectResourceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProjectResourceDeleteArgsSchema: z.ZodType<Prisma.ProjectResourceDeleteArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  where: ProjectResourceWhereUniqueInputSchema,
}).strict() ;

export const ProjectResourceUpdateArgsSchema: z.ZodType<Prisma.ProjectResourceUpdateArgs> = z.object({
  select: ProjectResourceSelectSchema.optional(),
  include: ProjectResourceIncludeSchema.optional(),
  data: z.union([ ProjectResourceUpdateInputSchema,ProjectResourceUncheckedUpdateInputSchema ]),
  where: ProjectResourceWhereUniqueInputSchema,
}).strict() ;

export const ProjectResourceUpdateManyArgsSchema: z.ZodType<Prisma.ProjectResourceUpdateManyArgs> = z.object({
  data: z.union([ ProjectResourceUpdateManyMutationInputSchema,ProjectResourceUncheckedUpdateManyInputSchema ]),
  where: ProjectResourceWhereInputSchema.optional(),
}).strict() ;

export const ProjectResourceDeleteManyArgsSchema: z.ZodType<Prisma.ProjectResourceDeleteManyArgs> = z.object({
  where: ProjectResourceWhereInputSchema.optional(),
}).strict() ;

export const TimeEntryCreateArgsSchema: z.ZodType<Prisma.TimeEntryCreateArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  data: z.union([ TimeEntryCreateInputSchema,TimeEntryUncheckedCreateInputSchema ]),
}).strict() ;

export const TimeEntryUpsertArgsSchema: z.ZodType<Prisma.TimeEntryUpsertArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereUniqueInputSchema,
  create: z.union([ TimeEntryCreateInputSchema,TimeEntryUncheckedCreateInputSchema ]),
  update: z.union([ TimeEntryUpdateInputSchema,TimeEntryUncheckedUpdateInputSchema ]),
}).strict() ;

export const TimeEntryCreateManyArgsSchema: z.ZodType<Prisma.TimeEntryCreateManyArgs> = z.object({
  data: z.union([ TimeEntryCreateManyInputSchema,TimeEntryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeEntryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TimeEntryCreateManyAndReturnArgs> = z.object({
  data: z.union([ TimeEntryCreateManyInputSchema,TimeEntryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeEntryDeleteArgsSchema: z.ZodType<Prisma.TimeEntryDeleteArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  where: TimeEntryWhereUniqueInputSchema,
}).strict() ;

export const TimeEntryUpdateArgsSchema: z.ZodType<Prisma.TimeEntryUpdateArgs> = z.object({
  select: TimeEntrySelectSchema.optional(),
  include: TimeEntryIncludeSchema.optional(),
  data: z.union([ TimeEntryUpdateInputSchema,TimeEntryUncheckedUpdateInputSchema ]),
  where: TimeEntryWhereUniqueInputSchema,
}).strict() ;

export const TimeEntryUpdateManyArgsSchema: z.ZodType<Prisma.TimeEntryUpdateManyArgs> = z.object({
  data: z.union([ TimeEntryUpdateManyMutationInputSchema,TimeEntryUncheckedUpdateManyInputSchema ]),
  where: TimeEntryWhereInputSchema.optional(),
}).strict() ;

export const TimeEntryDeleteManyArgsSchema: z.ZodType<Prisma.TimeEntryDeleteManyArgs> = z.object({
  where: TimeEntryWhereInputSchema.optional(),
}).strict() ;

export const InvoiceCreateArgsSchema: z.ZodType<Prisma.InvoiceCreateArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  data: z.union([ InvoiceCreateInputSchema,InvoiceUncheckedCreateInputSchema ]),
}).strict() ;

export const InvoiceUpsertArgsSchema: z.ZodType<Prisma.InvoiceUpsertArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereUniqueInputSchema,
  create: z.union([ InvoiceCreateInputSchema,InvoiceUncheckedCreateInputSchema ]),
  update: z.union([ InvoiceUpdateInputSchema,InvoiceUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvoiceCreateManyArgsSchema: z.ZodType<Prisma.InvoiceCreateManyArgs> = z.object({
  data: z.union([ InvoiceCreateManyInputSchema,InvoiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvoiceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvoiceCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvoiceCreateManyInputSchema,InvoiceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvoiceDeleteArgsSchema: z.ZodType<Prisma.InvoiceDeleteArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  where: InvoiceWhereUniqueInputSchema,
}).strict() ;

export const InvoiceUpdateArgsSchema: z.ZodType<Prisma.InvoiceUpdateArgs> = z.object({
  select: InvoiceSelectSchema.optional(),
  include: InvoiceIncludeSchema.optional(),
  data: z.union([ InvoiceUpdateInputSchema,InvoiceUncheckedUpdateInputSchema ]),
  where: InvoiceWhereUniqueInputSchema,
}).strict() ;

export const InvoiceUpdateManyArgsSchema: z.ZodType<Prisma.InvoiceUpdateManyArgs> = z.object({
  data: z.union([ InvoiceUpdateManyMutationInputSchema,InvoiceUncheckedUpdateManyInputSchema ]),
  where: InvoiceWhereInputSchema.optional(),
}).strict() ;

export const InvoiceDeleteManyArgsSchema: z.ZodType<Prisma.InvoiceDeleteManyArgs> = z.object({
  where: InvoiceWhereInputSchema.optional(),
}).strict() ;

export const InvoiceItemCreateArgsSchema: z.ZodType<Prisma.InvoiceItemCreateArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  data: z.union([ InvoiceItemCreateInputSchema,InvoiceItemUncheckedCreateInputSchema ]),
}).strict() ;

export const InvoiceItemUpsertArgsSchema: z.ZodType<Prisma.InvoiceItemUpsertArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereUniqueInputSchema,
  create: z.union([ InvoiceItemCreateInputSchema,InvoiceItemUncheckedCreateInputSchema ]),
  update: z.union([ InvoiceItemUpdateInputSchema,InvoiceItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvoiceItemCreateManyArgsSchema: z.ZodType<Prisma.InvoiceItemCreateManyArgs> = z.object({
  data: z.union([ InvoiceItemCreateManyInputSchema,InvoiceItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvoiceItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvoiceItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvoiceItemCreateManyInputSchema,InvoiceItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvoiceItemDeleteArgsSchema: z.ZodType<Prisma.InvoiceItemDeleteArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  where: InvoiceItemWhereUniqueInputSchema,
}).strict() ;

export const InvoiceItemUpdateArgsSchema: z.ZodType<Prisma.InvoiceItemUpdateArgs> = z.object({
  select: InvoiceItemSelectSchema.optional(),
  include: InvoiceItemIncludeSchema.optional(),
  data: z.union([ InvoiceItemUpdateInputSchema,InvoiceItemUncheckedUpdateInputSchema ]),
  where: InvoiceItemWhereUniqueInputSchema,
}).strict() ;

export const InvoiceItemUpdateManyArgsSchema: z.ZodType<Prisma.InvoiceItemUpdateManyArgs> = z.object({
  data: z.union([ InvoiceItemUpdateManyMutationInputSchema,InvoiceItemUncheckedUpdateManyInputSchema ]),
  where: InvoiceItemWhereInputSchema.optional(),
}).strict() ;

export const InvoiceItemDeleteManyArgsSchema: z.ZodType<Prisma.InvoiceItemDeleteManyArgs> = z.object({
  where: InvoiceItemWhereInputSchema.optional(),
}).strict() ;

export const PaymentCreateArgsSchema: z.ZodType<Prisma.PaymentCreateArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  data: z.union([ PaymentCreateInputSchema,PaymentUncheckedCreateInputSchema ]),
}).strict() ;

export const PaymentUpsertArgsSchema: z.ZodType<Prisma.PaymentUpsertArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
  create: z.union([ PaymentCreateInputSchema,PaymentUncheckedCreateInputSchema ]),
  update: z.union([ PaymentUpdateInputSchema,PaymentUncheckedUpdateInputSchema ]),
}).strict() ;

export const PaymentCreateManyArgsSchema: z.ZodType<Prisma.PaymentCreateManyArgs> = z.object({
  data: z.union([ PaymentCreateManyInputSchema,PaymentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PaymentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PaymentCreateManyAndReturnArgs> = z.object({
  data: z.union([ PaymentCreateManyInputSchema,PaymentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PaymentDeleteArgsSchema: z.ZodType<Prisma.PaymentDeleteArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentUpdateArgsSchema: z.ZodType<Prisma.PaymentUpdateArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  data: z.union([ PaymentUpdateInputSchema,PaymentUncheckedUpdateInputSchema ]),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentUpdateManyArgsSchema: z.ZodType<Prisma.PaymentUpdateManyArgs> = z.object({
  data: z.union([ PaymentUpdateManyMutationInputSchema,PaymentUncheckedUpdateManyInputSchema ]),
  where: PaymentWhereInputSchema.optional(),
}).strict() ;

export const PaymentDeleteManyArgsSchema: z.ZodType<Prisma.PaymentDeleteManyArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
}).strict() ;

export const ExpenseCreateArgsSchema: z.ZodType<Prisma.ExpenseCreateArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  data: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseUpsertArgsSchema: z.ZodType<Prisma.ExpenseUpsertArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
  create: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseCreateManyArgsSchema: z.ZodType<Prisma.ExpenseCreateManyArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseDeleteArgsSchema: z.ZodType<Prisma.ExpenseDeleteArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateArgsSchema: z.ZodType<Prisma.ExpenseUpdateArgs> = z.object({
  select: ExpenseSelectSchema.optional(),
  include: ExpenseIncludeSchema.optional(),
  data: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
}).strict() ;

export const ExpenseDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseDeleteManyArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
}).strict() ;

export const ExpenseCategoryCreateArgsSchema: z.ZodType<Prisma.ExpenseCategoryCreateArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  data: z.union([ ExpenseCategoryCreateInputSchema,ExpenseCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseCategoryUpsertArgsSchema: z.ZodType<Prisma.ExpenseCategoryUpsertArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereUniqueInputSchema,
  create: z.union([ ExpenseCategoryCreateInputSchema,ExpenseCategoryUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseCategoryUpdateInputSchema,ExpenseCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseCategoryCreateManyArgsSchema: z.ZodType<Prisma.ExpenseCategoryCreateManyArgs> = z.object({
  data: z.union([ ExpenseCategoryCreateManyInputSchema,ExpenseCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseCategoryCreateManyInputSchema,ExpenseCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseCategoryDeleteArgsSchema: z.ZodType<Prisma.ExpenseCategoryDeleteArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  where: ExpenseCategoryWhereUniqueInputSchema,
}).strict() ;

export const ExpenseCategoryUpdateArgsSchema: z.ZodType<Prisma.ExpenseCategoryUpdateArgs> = z.object({
  select: ExpenseCategorySelectSchema.optional(),
  include: ExpenseCategoryIncludeSchema.optional(),
  data: z.union([ ExpenseCategoryUpdateInputSchema,ExpenseCategoryUncheckedUpdateInputSchema ]),
  where: ExpenseCategoryWhereUniqueInputSchema,
}).strict() ;

export const ExpenseCategoryUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseCategoryUpdateManyArgs> = z.object({
  data: z.union([ ExpenseCategoryUpdateManyMutationInputSchema,ExpenseCategoryUncheckedUpdateManyInputSchema ]),
  where: ExpenseCategoryWhereInputSchema.optional(),
}).strict() ;

export const ExpenseCategoryDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseCategoryDeleteManyArgs> = z.object({
  where: ExpenseCategoryWhereInputSchema.optional(),
}).strict() ;

export const ExpenseTagCreateArgsSchema: z.ZodType<Prisma.ExpenseTagCreateArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  data: z.union([ ExpenseTagCreateInputSchema,ExpenseTagUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseTagUpsertArgsSchema: z.ZodType<Prisma.ExpenseTagUpsertArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereUniqueInputSchema,
  create: z.union([ ExpenseTagCreateInputSchema,ExpenseTagUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseTagUpdateInputSchema,ExpenseTagUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseTagCreateManyArgsSchema: z.ZodType<Prisma.ExpenseTagCreateManyArgs> = z.object({
  data: z.union([ ExpenseTagCreateManyInputSchema,ExpenseTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseTagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseTagCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseTagCreateManyInputSchema,ExpenseTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseTagDeleteArgsSchema: z.ZodType<Prisma.ExpenseTagDeleteArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  where: ExpenseTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseTagUpdateArgsSchema: z.ZodType<Prisma.ExpenseTagUpdateArgs> = z.object({
  select: ExpenseTagSelectSchema.optional(),
  include: ExpenseTagIncludeSchema.optional(),
  data: z.union([ ExpenseTagUpdateInputSchema,ExpenseTagUncheckedUpdateInputSchema ]),
  where: ExpenseTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseTagUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseTagUpdateManyArgs> = z.object({
  data: z.union([ ExpenseTagUpdateManyMutationInputSchema,ExpenseTagUncheckedUpdateManyInputSchema ]),
  where: ExpenseTagWhereInputSchema.optional(),
}).strict() ;

export const ExpenseTagDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseTagDeleteManyArgs> = z.object({
  where: ExpenseTagWhereInputSchema.optional(),
}).strict() ;

export const ExpenseToTagCreateArgsSchema: z.ZodType<Prisma.ExpenseToTagCreateArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  data: z.union([ ExpenseToTagCreateInputSchema,ExpenseToTagUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseToTagUpsertArgsSchema: z.ZodType<Prisma.ExpenseToTagUpsertArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereUniqueInputSchema,
  create: z.union([ ExpenseToTagCreateInputSchema,ExpenseToTagUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseToTagUpdateInputSchema,ExpenseToTagUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseToTagCreateManyArgsSchema: z.ZodType<Prisma.ExpenseToTagCreateManyArgs> = z.object({
  data: z.union([ ExpenseToTagCreateManyInputSchema,ExpenseToTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseToTagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseToTagCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseToTagCreateManyInputSchema,ExpenseToTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseToTagDeleteArgsSchema: z.ZodType<Prisma.ExpenseToTagDeleteArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  where: ExpenseToTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseToTagUpdateArgsSchema: z.ZodType<Prisma.ExpenseToTagUpdateArgs> = z.object({
  select: ExpenseToTagSelectSchema.optional(),
  include: ExpenseToTagIncludeSchema.optional(),
  data: z.union([ ExpenseToTagUpdateInputSchema,ExpenseToTagUncheckedUpdateInputSchema ]),
  where: ExpenseToTagWhereUniqueInputSchema,
}).strict() ;

export const ExpenseToTagUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseToTagUpdateManyArgs> = z.object({
  data: z.union([ ExpenseToTagUpdateManyMutationInputSchema,ExpenseToTagUncheckedUpdateManyInputSchema ]),
  where: ExpenseToTagWhereInputSchema.optional(),
}).strict() ;

export const ExpenseToTagDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseToTagDeleteManyArgs> = z.object({
  where: ExpenseToTagWhereInputSchema.optional(),
}).strict() ;

export const CommentCreateArgsSchema: z.ZodType<Prisma.CommentCreateArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  data: z.union([ CommentCreateInputSchema,CommentUncheckedCreateInputSchema ]),
}).strict() ;

export const CommentUpsertArgsSchema: z.ZodType<Prisma.CommentUpsertArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
  create: z.union([ CommentCreateInputSchema,CommentUncheckedCreateInputSchema ]),
  update: z.union([ CommentUpdateInputSchema,CommentUncheckedUpdateInputSchema ]),
}).strict() ;

export const CommentCreateManyArgsSchema: z.ZodType<Prisma.CommentCreateManyArgs> = z.object({
  data: z.union([ CommentCreateManyInputSchema,CommentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CommentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CommentCreateManyAndReturnArgs> = z.object({
  data: z.union([ CommentCreateManyInputSchema,CommentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CommentDeleteArgsSchema: z.ZodType<Prisma.CommentDeleteArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  where: CommentWhereUniqueInputSchema,
}).strict() ;

export const CommentUpdateArgsSchema: z.ZodType<Prisma.CommentUpdateArgs> = z.object({
  select: CommentSelectSchema.optional(),
  include: CommentIncludeSchema.optional(),
  data: z.union([ CommentUpdateInputSchema,CommentUncheckedUpdateInputSchema ]),
  where: CommentWhereUniqueInputSchema,
}).strict() ;

export const CommentUpdateManyArgsSchema: z.ZodType<Prisma.CommentUpdateManyArgs> = z.object({
  data: z.union([ CommentUpdateManyMutationInputSchema,CommentUncheckedUpdateManyInputSchema ]),
  where: CommentWhereInputSchema.optional(),
}).strict() ;

export const CommentDeleteManyArgsSchema: z.ZodType<Prisma.CommentDeleteManyArgs> = z.object({
  where: CommentWhereInputSchema.optional(),
}).strict() ;

export const AttachmentCreateArgsSchema: z.ZodType<Prisma.AttachmentCreateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]),
}).strict() ;

export const AttachmentUpsertArgsSchema: z.ZodType<Prisma.AttachmentUpsertArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
  create: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]),
  update: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const AttachmentCreateManyArgsSchema: z.ZodType<Prisma.AttachmentCreateManyArgs> = z.object({
  data: z.union([ AttachmentCreateManyInputSchema,AttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AttachmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AttachmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ AttachmentCreateManyInputSchema,AttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AttachmentDeleteArgsSchema: z.ZodType<Prisma.AttachmentDeleteArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateArgsSchema: z.ZodType<Prisma.AttachmentUpdateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateManyArgsSchema: z.ZodType<Prisma.AttachmentUpdateManyArgs> = z.object({
  data: z.union([ AttachmentUpdateManyMutationInputSchema,AttachmentUncheckedUpdateManyInputSchema ]),
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const AttachmentDeleteManyArgsSchema: z.ZodType<Prisma.AttachmentDeleteManyArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const CalendarEventCreateArgsSchema: z.ZodType<Prisma.CalendarEventCreateArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  data: z.union([ CalendarEventCreateInputSchema,CalendarEventUncheckedCreateInputSchema ]),
}).strict() ;

export const CalendarEventUpsertArgsSchema: z.ZodType<Prisma.CalendarEventUpsertArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
  create: z.union([ CalendarEventCreateInputSchema,CalendarEventUncheckedCreateInputSchema ]),
  update: z.union([ CalendarEventUpdateInputSchema,CalendarEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const CalendarEventCreateManyArgsSchema: z.ZodType<Prisma.CalendarEventCreateManyArgs> = z.object({
  data: z.union([ CalendarEventCreateManyInputSchema,CalendarEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CalendarEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CalendarEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ CalendarEventCreateManyInputSchema,CalendarEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CalendarEventDeleteArgsSchema: z.ZodType<Prisma.CalendarEventDeleteArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  where: CalendarEventWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventUpdateArgsSchema: z.ZodType<Prisma.CalendarEventUpdateArgs> = z.object({
  select: CalendarEventSelectSchema.optional(),
  include: CalendarEventIncludeSchema.optional(),
  data: z.union([ CalendarEventUpdateInputSchema,CalendarEventUncheckedUpdateInputSchema ]),
  where: CalendarEventWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventUpdateManyArgsSchema: z.ZodType<Prisma.CalendarEventUpdateManyArgs> = z.object({
  data: z.union([ CalendarEventUpdateManyMutationInputSchema,CalendarEventUncheckedUpdateManyInputSchema ]),
  where: CalendarEventWhereInputSchema.optional(),
}).strict() ;

export const CalendarEventDeleteManyArgsSchema: z.ZodType<Prisma.CalendarEventDeleteManyArgs> = z.object({
  where: CalendarEventWhereInputSchema.optional(),
}).strict() ;

export const CalendarEventAttendeeCreateArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  data: z.union([ CalendarEventAttendeeCreateInputSchema,CalendarEventAttendeeUncheckedCreateInputSchema ]),
}).strict() ;

export const CalendarEventAttendeeUpsertArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeUpsertArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereUniqueInputSchema,
  create: z.union([ CalendarEventAttendeeCreateInputSchema,CalendarEventAttendeeUncheckedCreateInputSchema ]),
  update: z.union([ CalendarEventAttendeeUpdateInputSchema,CalendarEventAttendeeUncheckedUpdateInputSchema ]),
}).strict() ;

export const CalendarEventAttendeeCreateManyArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateManyArgs> = z.object({
  data: z.union([ CalendarEventAttendeeCreateManyInputSchema,CalendarEventAttendeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CalendarEventAttendeeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeCreateManyAndReturnArgs> = z.object({
  data: z.union([ CalendarEventAttendeeCreateManyInputSchema,CalendarEventAttendeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CalendarEventAttendeeDeleteArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeDeleteArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  where: CalendarEventAttendeeWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventAttendeeUpdateArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateArgs> = z.object({
  select: CalendarEventAttendeeSelectSchema.optional(),
  include: CalendarEventAttendeeIncludeSchema.optional(),
  data: z.union([ CalendarEventAttendeeUpdateInputSchema,CalendarEventAttendeeUncheckedUpdateInputSchema ]),
  where: CalendarEventAttendeeWhereUniqueInputSchema,
}).strict() ;

export const CalendarEventAttendeeUpdateManyArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeUpdateManyArgs> = z.object({
  data: z.union([ CalendarEventAttendeeUpdateManyMutationInputSchema,CalendarEventAttendeeUncheckedUpdateManyInputSchema ]),
  where: CalendarEventAttendeeWhereInputSchema.optional(),
}).strict() ;

export const CalendarEventAttendeeDeleteManyArgsSchema: z.ZodType<Prisma.CalendarEventAttendeeDeleteManyArgs> = z.object({
  where: CalendarEventAttendeeWhereInputSchema.optional(),
}).strict() ;

export const NotificationCreateArgsSchema: z.ZodType<Prisma.NotificationCreateArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  data: z.union([ NotificationCreateInputSchema,NotificationUncheckedCreateInputSchema ]),
}).strict() ;

export const NotificationUpsertArgsSchema: z.ZodType<Prisma.NotificationUpsertArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
  create: z.union([ NotificationCreateInputSchema,NotificationUncheckedCreateInputSchema ]),
  update: z.union([ NotificationUpdateInputSchema,NotificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const NotificationCreateManyArgsSchema: z.ZodType<Prisma.NotificationCreateManyArgs> = z.object({
  data: z.union([ NotificationCreateManyInputSchema,NotificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.NotificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ NotificationCreateManyInputSchema,NotificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationDeleteArgsSchema: z.ZodType<Prisma.NotificationDeleteArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationUpdateArgsSchema: z.ZodType<Prisma.NotificationUpdateArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  data: z.union([ NotificationUpdateInputSchema,NotificationUncheckedUpdateInputSchema ]),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationUpdateManyArgsSchema: z.ZodType<Prisma.NotificationUpdateManyArgs> = z.object({
  data: z.union([ NotificationUpdateManyMutationInputSchema,NotificationUncheckedUpdateManyInputSchema ]),
  where: NotificationWhereInputSchema.optional(),
}).strict() ;

export const NotificationDeleteManyArgsSchema: z.ZodType<Prisma.NotificationDeleteManyArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Prisma.InvitationCreateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Prisma.InvitationUpsertArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Prisma.InvitationDeleteArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Prisma.InvitationUpdateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
}).strict() ;

export const EmployeeCreateArgsSchema: z.ZodType<Prisma.EmployeeCreateArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  data: z.union([ EmployeeCreateInputSchema,EmployeeUncheckedCreateInputSchema ]),
}).strict() ;

export const EmployeeUpsertArgsSchema: z.ZodType<Prisma.EmployeeUpsertArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereUniqueInputSchema,
  create: z.union([ EmployeeCreateInputSchema,EmployeeUncheckedCreateInputSchema ]),
  update: z.union([ EmployeeUpdateInputSchema,EmployeeUncheckedUpdateInputSchema ]),
}).strict() ;

export const EmployeeCreateManyArgsSchema: z.ZodType<Prisma.EmployeeCreateManyArgs> = z.object({
  data: z.union([ EmployeeCreateManyInputSchema,EmployeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EmployeeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EmployeeCreateManyAndReturnArgs> = z.object({
  data: z.union([ EmployeeCreateManyInputSchema,EmployeeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EmployeeDeleteArgsSchema: z.ZodType<Prisma.EmployeeDeleteArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  where: EmployeeWhereUniqueInputSchema,
}).strict() ;

export const EmployeeUpdateArgsSchema: z.ZodType<Prisma.EmployeeUpdateArgs> = z.object({
  select: EmployeeSelectSchema.optional(),
  include: EmployeeIncludeSchema.optional(),
  data: z.union([ EmployeeUpdateInputSchema,EmployeeUncheckedUpdateInputSchema ]),
  where: EmployeeWhereUniqueInputSchema,
}).strict() ;

export const EmployeeUpdateManyArgsSchema: z.ZodType<Prisma.EmployeeUpdateManyArgs> = z.object({
  data: z.union([ EmployeeUpdateManyMutationInputSchema,EmployeeUncheckedUpdateManyInputSchema ]),
  where: EmployeeWhereInputSchema.optional(),
}).strict() ;

export const EmployeeDeleteManyArgsSchema: z.ZodType<Prisma.EmployeeDeleteManyArgs> = z.object({
  where: EmployeeWhereInputSchema.optional(),
}).strict() ;

export const PayrollCreateArgsSchema: z.ZodType<Prisma.PayrollCreateArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  data: z.union([ PayrollCreateInputSchema,PayrollUncheckedCreateInputSchema ]),
}).strict() ;

export const PayrollUpsertArgsSchema: z.ZodType<Prisma.PayrollUpsertArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereUniqueInputSchema,
  create: z.union([ PayrollCreateInputSchema,PayrollUncheckedCreateInputSchema ]),
  update: z.union([ PayrollUpdateInputSchema,PayrollUncheckedUpdateInputSchema ]),
}).strict() ;

export const PayrollCreateManyArgsSchema: z.ZodType<Prisma.PayrollCreateManyArgs> = z.object({
  data: z.union([ PayrollCreateManyInputSchema,PayrollCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PayrollCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PayrollCreateManyAndReturnArgs> = z.object({
  data: z.union([ PayrollCreateManyInputSchema,PayrollCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PayrollDeleteArgsSchema: z.ZodType<Prisma.PayrollDeleteArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  where: PayrollWhereUniqueInputSchema,
}).strict() ;

export const PayrollUpdateArgsSchema: z.ZodType<Prisma.PayrollUpdateArgs> = z.object({
  select: PayrollSelectSchema.optional(),
  include: PayrollIncludeSchema.optional(),
  data: z.union([ PayrollUpdateInputSchema,PayrollUncheckedUpdateInputSchema ]),
  where: PayrollWhereUniqueInputSchema,
}).strict() ;

export const PayrollUpdateManyArgsSchema: z.ZodType<Prisma.PayrollUpdateManyArgs> = z.object({
  data: z.union([ PayrollUpdateManyMutationInputSchema,PayrollUncheckedUpdateManyInputSchema ]),
  where: PayrollWhereInputSchema.optional(),
}).strict() ;

export const PayrollDeleteManyArgsSchema: z.ZodType<Prisma.PayrollDeleteManyArgs> = z.object({
  where: PayrollWhereInputSchema.optional(),
}).strict() ;

export const TimeOffCreateArgsSchema: z.ZodType<Prisma.TimeOffCreateArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  data: z.union([ TimeOffCreateInputSchema,TimeOffUncheckedCreateInputSchema ]),
}).strict() ;

export const TimeOffUpsertArgsSchema: z.ZodType<Prisma.TimeOffUpsertArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereUniqueInputSchema,
  create: z.union([ TimeOffCreateInputSchema,TimeOffUncheckedCreateInputSchema ]),
  update: z.union([ TimeOffUpdateInputSchema,TimeOffUncheckedUpdateInputSchema ]),
}).strict() ;

export const TimeOffCreateManyArgsSchema: z.ZodType<Prisma.TimeOffCreateManyArgs> = z.object({
  data: z.union([ TimeOffCreateManyInputSchema,TimeOffCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeOffCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TimeOffCreateManyAndReturnArgs> = z.object({
  data: z.union([ TimeOffCreateManyInputSchema,TimeOffCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TimeOffDeleteArgsSchema: z.ZodType<Prisma.TimeOffDeleteArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  where: TimeOffWhereUniqueInputSchema,
}).strict() ;

export const TimeOffUpdateArgsSchema: z.ZodType<Prisma.TimeOffUpdateArgs> = z.object({
  select: TimeOffSelectSchema.optional(),
  include: TimeOffIncludeSchema.optional(),
  data: z.union([ TimeOffUpdateInputSchema,TimeOffUncheckedUpdateInputSchema ]),
  where: TimeOffWhereUniqueInputSchema,
}).strict() ;

export const TimeOffUpdateManyArgsSchema: z.ZodType<Prisma.TimeOffUpdateManyArgs> = z.object({
  data: z.union([ TimeOffUpdateManyMutationInputSchema,TimeOffUncheckedUpdateManyInputSchema ]),
  where: TimeOffWhereInputSchema.optional(),
}).strict() ;

export const TimeOffDeleteManyArgsSchema: z.ZodType<Prisma.TimeOffDeleteManyArgs> = z.object({
  where: TimeOffWhereInputSchema.optional(),
}).strict() ;

export const PerformanceReviewCreateArgsSchema: z.ZodType<Prisma.PerformanceReviewCreateArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  data: z.union([ PerformanceReviewCreateInputSchema,PerformanceReviewUncheckedCreateInputSchema ]),
}).strict() ;

export const PerformanceReviewUpsertArgsSchema: z.ZodType<Prisma.PerformanceReviewUpsertArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereUniqueInputSchema,
  create: z.union([ PerformanceReviewCreateInputSchema,PerformanceReviewUncheckedCreateInputSchema ]),
  update: z.union([ PerformanceReviewUpdateInputSchema,PerformanceReviewUncheckedUpdateInputSchema ]),
}).strict() ;

export const PerformanceReviewCreateManyArgsSchema: z.ZodType<Prisma.PerformanceReviewCreateManyArgs> = z.object({
  data: z.union([ PerformanceReviewCreateManyInputSchema,PerformanceReviewCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PerformanceReviewCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PerformanceReviewCreateManyAndReturnArgs> = z.object({
  data: z.union([ PerformanceReviewCreateManyInputSchema,PerformanceReviewCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PerformanceReviewDeleteArgsSchema: z.ZodType<Prisma.PerformanceReviewDeleteArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  where: PerformanceReviewWhereUniqueInputSchema,
}).strict() ;

export const PerformanceReviewUpdateArgsSchema: z.ZodType<Prisma.PerformanceReviewUpdateArgs> = z.object({
  select: PerformanceReviewSelectSchema.optional(),
  include: PerformanceReviewIncludeSchema.optional(),
  data: z.union([ PerformanceReviewUpdateInputSchema,PerformanceReviewUncheckedUpdateInputSchema ]),
  where: PerformanceReviewWhereUniqueInputSchema,
}).strict() ;

export const PerformanceReviewUpdateManyArgsSchema: z.ZodType<Prisma.PerformanceReviewUpdateManyArgs> = z.object({
  data: z.union([ PerformanceReviewUpdateManyMutationInputSchema,PerformanceReviewUncheckedUpdateManyInputSchema ]),
  where: PerformanceReviewWhereInputSchema.optional(),
}).strict() ;

export const PerformanceReviewDeleteManyArgsSchema: z.ZodType<Prisma.PerformanceReviewDeleteManyArgs> = z.object({
  where: PerformanceReviewWhereInputSchema.optional(),
}).strict() ;

export const MarketingCampaignCreateArgsSchema: z.ZodType<Prisma.MarketingCampaignCreateArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  data: z.union([ MarketingCampaignCreateInputSchema,MarketingCampaignUncheckedCreateInputSchema ]),
}).strict() ;

export const MarketingCampaignUpsertArgsSchema: z.ZodType<Prisma.MarketingCampaignUpsertArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereUniqueInputSchema,
  create: z.union([ MarketingCampaignCreateInputSchema,MarketingCampaignUncheckedCreateInputSchema ]),
  update: z.union([ MarketingCampaignUpdateInputSchema,MarketingCampaignUncheckedUpdateInputSchema ]),
}).strict() ;

export const MarketingCampaignCreateManyArgsSchema: z.ZodType<Prisma.MarketingCampaignCreateManyArgs> = z.object({
  data: z.union([ MarketingCampaignCreateManyInputSchema,MarketingCampaignCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MarketingCampaignCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MarketingCampaignCreateManyAndReturnArgs> = z.object({
  data: z.union([ MarketingCampaignCreateManyInputSchema,MarketingCampaignCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MarketingCampaignDeleteArgsSchema: z.ZodType<Prisma.MarketingCampaignDeleteArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  where: MarketingCampaignWhereUniqueInputSchema,
}).strict() ;

export const MarketingCampaignUpdateArgsSchema: z.ZodType<Prisma.MarketingCampaignUpdateArgs> = z.object({
  select: MarketingCampaignSelectSchema.optional(),
  include: MarketingCampaignIncludeSchema.optional(),
  data: z.union([ MarketingCampaignUpdateInputSchema,MarketingCampaignUncheckedUpdateInputSchema ]),
  where: MarketingCampaignWhereUniqueInputSchema,
}).strict() ;

export const MarketingCampaignUpdateManyArgsSchema: z.ZodType<Prisma.MarketingCampaignUpdateManyArgs> = z.object({
  data: z.union([ MarketingCampaignUpdateManyMutationInputSchema,MarketingCampaignUncheckedUpdateManyInputSchema ]),
  where: MarketingCampaignWhereInputSchema.optional(),
}).strict() ;

export const MarketingCampaignDeleteManyArgsSchema: z.ZodType<Prisma.MarketingCampaignDeleteManyArgs> = z.object({
  where: MarketingCampaignWhereInputSchema.optional(),
}).strict() ;

export const EmailCampaignCreateArgsSchema: z.ZodType<Prisma.EmailCampaignCreateArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  data: z.union([ EmailCampaignCreateInputSchema,EmailCampaignUncheckedCreateInputSchema ]),
}).strict() ;

export const EmailCampaignUpsertArgsSchema: z.ZodType<Prisma.EmailCampaignUpsertArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereUniqueInputSchema,
  create: z.union([ EmailCampaignCreateInputSchema,EmailCampaignUncheckedCreateInputSchema ]),
  update: z.union([ EmailCampaignUpdateInputSchema,EmailCampaignUncheckedUpdateInputSchema ]),
}).strict() ;

export const EmailCampaignCreateManyArgsSchema: z.ZodType<Prisma.EmailCampaignCreateManyArgs> = z.object({
  data: z.union([ EmailCampaignCreateManyInputSchema,EmailCampaignCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EmailCampaignCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EmailCampaignCreateManyAndReturnArgs> = z.object({
  data: z.union([ EmailCampaignCreateManyInputSchema,EmailCampaignCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EmailCampaignDeleteArgsSchema: z.ZodType<Prisma.EmailCampaignDeleteArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  where: EmailCampaignWhereUniqueInputSchema,
}).strict() ;

export const EmailCampaignUpdateArgsSchema: z.ZodType<Prisma.EmailCampaignUpdateArgs> = z.object({
  select: EmailCampaignSelectSchema.optional(),
  include: EmailCampaignIncludeSchema.optional(),
  data: z.union([ EmailCampaignUpdateInputSchema,EmailCampaignUncheckedUpdateInputSchema ]),
  where: EmailCampaignWhereUniqueInputSchema,
}).strict() ;

export const EmailCampaignUpdateManyArgsSchema: z.ZodType<Prisma.EmailCampaignUpdateManyArgs> = z.object({
  data: z.union([ EmailCampaignUpdateManyMutationInputSchema,EmailCampaignUncheckedUpdateManyInputSchema ]),
  where: EmailCampaignWhereInputSchema.optional(),
}).strict() ;

export const EmailCampaignDeleteManyArgsSchema: z.ZodType<Prisma.EmailCampaignDeleteManyArgs> = z.object({
  where: EmailCampaignWhereInputSchema.optional(),
}).strict() ;

export const SocialMediaPostCreateArgsSchema: z.ZodType<Prisma.SocialMediaPostCreateArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  data: z.union([ SocialMediaPostCreateInputSchema,SocialMediaPostUncheckedCreateInputSchema ]),
}).strict() ;

export const SocialMediaPostUpsertArgsSchema: z.ZodType<Prisma.SocialMediaPostUpsertArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereUniqueInputSchema,
  create: z.union([ SocialMediaPostCreateInputSchema,SocialMediaPostUncheckedCreateInputSchema ]),
  update: z.union([ SocialMediaPostUpdateInputSchema,SocialMediaPostUncheckedUpdateInputSchema ]),
}).strict() ;

export const SocialMediaPostCreateManyArgsSchema: z.ZodType<Prisma.SocialMediaPostCreateManyArgs> = z.object({
  data: z.union([ SocialMediaPostCreateManyInputSchema,SocialMediaPostCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SocialMediaPostCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SocialMediaPostCreateManyAndReturnArgs> = z.object({
  data: z.union([ SocialMediaPostCreateManyInputSchema,SocialMediaPostCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SocialMediaPostDeleteArgsSchema: z.ZodType<Prisma.SocialMediaPostDeleteArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  where: SocialMediaPostWhereUniqueInputSchema,
}).strict() ;

export const SocialMediaPostUpdateArgsSchema: z.ZodType<Prisma.SocialMediaPostUpdateArgs> = z.object({
  select: SocialMediaPostSelectSchema.optional(),
  include: SocialMediaPostIncludeSchema.optional(),
  data: z.union([ SocialMediaPostUpdateInputSchema,SocialMediaPostUncheckedUpdateInputSchema ]),
  where: SocialMediaPostWhereUniqueInputSchema,
}).strict() ;

export const SocialMediaPostUpdateManyArgsSchema: z.ZodType<Prisma.SocialMediaPostUpdateManyArgs> = z.object({
  data: z.union([ SocialMediaPostUpdateManyMutationInputSchema,SocialMediaPostUncheckedUpdateManyInputSchema ]),
  where: SocialMediaPostWhereInputSchema.optional(),
}).strict() ;

export const SocialMediaPostDeleteManyArgsSchema: z.ZodType<Prisma.SocialMediaPostDeleteManyArgs> = z.object({
  where: SocialMediaPostWhereInputSchema.optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const VerificationCreateArgsSchema: z.ZodType<Prisma.VerificationCreateArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationUpsertArgsSchema: z.ZodType<Prisma.VerificationUpsertArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
  create: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
  update: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationCreateManyArgsSchema: z.ZodType<Prisma.VerificationCreateManyArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationDeleteArgsSchema: z.ZodType<Prisma.VerificationDeleteArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateArgsSchema: z.ZodType<Prisma.VerificationUpdateArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateManyArgsSchema: z.ZodType<Prisma.VerificationUpdateManyArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
}).strict() ;

export const VerificationDeleteManyArgsSchema: z.ZodType<Prisma.VerificationDeleteManyArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportCreateArgsSchema: z.ZodType<Prisma.FinancialReportCreateArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  data: z.union([ FinancialReportCreateInputSchema,FinancialReportUncheckedCreateInputSchema ]),
}).strict() ;

export const FinancialReportUpsertArgsSchema: z.ZodType<Prisma.FinancialReportUpsertArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereUniqueInputSchema,
  create: z.union([ FinancialReportCreateInputSchema,FinancialReportUncheckedCreateInputSchema ]),
  update: z.union([ FinancialReportUpdateInputSchema,FinancialReportUncheckedUpdateInputSchema ]),
}).strict() ;

export const FinancialReportCreateManyArgsSchema: z.ZodType<Prisma.FinancialReportCreateManyArgs> = z.object({
  data: z.union([ FinancialReportCreateManyInputSchema,FinancialReportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FinancialReportCreateManyAndReturnArgs> = z.object({
  data: z.union([ FinancialReportCreateManyInputSchema,FinancialReportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportDeleteArgsSchema: z.ZodType<Prisma.FinancialReportDeleteArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  where: FinancialReportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportUpdateArgsSchema: z.ZodType<Prisma.FinancialReportUpdateArgs> = z.object({
  select: FinancialReportSelectSchema.optional(),
  include: FinancialReportIncludeSchema.optional(),
  data: z.union([ FinancialReportUpdateInputSchema,FinancialReportUncheckedUpdateInputSchema ]),
  where: FinancialReportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportUpdateManyArgsSchema: z.ZodType<Prisma.FinancialReportUpdateManyArgs> = z.object({
  data: z.union([ FinancialReportUpdateManyMutationInputSchema,FinancialReportUncheckedUpdateManyInputSchema ]),
  where: FinancialReportWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportDeleteManyArgsSchema: z.ZodType<Prisma.FinancialReportDeleteManyArgs> = z.object({
  where: FinancialReportWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportDataCreateArgsSchema: z.ZodType<Prisma.FinancialReportDataCreateArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  data: z.union([ FinancialReportDataCreateInputSchema,FinancialReportDataUncheckedCreateInputSchema ]),
}).strict() ;

export const FinancialReportDataUpsertArgsSchema: z.ZodType<Prisma.FinancialReportDataUpsertArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereUniqueInputSchema,
  create: z.union([ FinancialReportDataCreateInputSchema,FinancialReportDataUncheckedCreateInputSchema ]),
  update: z.union([ FinancialReportDataUpdateInputSchema,FinancialReportDataUncheckedUpdateInputSchema ]),
}).strict() ;

export const FinancialReportDataCreateManyArgsSchema: z.ZodType<Prisma.FinancialReportDataCreateManyArgs> = z.object({
  data: z.union([ FinancialReportDataCreateManyInputSchema,FinancialReportDataCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportDataCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FinancialReportDataCreateManyAndReturnArgs> = z.object({
  data: z.union([ FinancialReportDataCreateManyInputSchema,FinancialReportDataCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportDataDeleteArgsSchema: z.ZodType<Prisma.FinancialReportDataDeleteArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  where: FinancialReportDataWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportDataUpdateArgsSchema: z.ZodType<Prisma.FinancialReportDataUpdateArgs> = z.object({
  select: FinancialReportDataSelectSchema.optional(),
  include: FinancialReportDataIncludeSchema.optional(),
  data: z.union([ FinancialReportDataUpdateInputSchema,FinancialReportDataUncheckedUpdateInputSchema ]),
  where: FinancialReportDataWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportDataUpdateManyArgsSchema: z.ZodType<Prisma.FinancialReportDataUpdateManyArgs> = z.object({
  data: z.union([ FinancialReportDataUpdateManyMutationInputSchema,FinancialReportDataUncheckedUpdateManyInputSchema ]),
  where: FinancialReportDataWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportDataDeleteManyArgsSchema: z.ZodType<Prisma.FinancialReportDataDeleteManyArgs> = z.object({
  where: FinancialReportDataWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportExportCreateArgsSchema: z.ZodType<Prisma.FinancialReportExportCreateArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  data: z.union([ FinancialReportExportCreateInputSchema,FinancialReportExportUncheckedCreateInputSchema ]),
}).strict() ;

export const FinancialReportExportUpsertArgsSchema: z.ZodType<Prisma.FinancialReportExportUpsertArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereUniqueInputSchema,
  create: z.union([ FinancialReportExportCreateInputSchema,FinancialReportExportUncheckedCreateInputSchema ]),
  update: z.union([ FinancialReportExportUpdateInputSchema,FinancialReportExportUncheckedUpdateInputSchema ]),
}).strict() ;

export const FinancialReportExportCreateManyArgsSchema: z.ZodType<Prisma.FinancialReportExportCreateManyArgs> = z.object({
  data: z.union([ FinancialReportExportCreateManyInputSchema,FinancialReportExportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportExportCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FinancialReportExportCreateManyAndReturnArgs> = z.object({
  data: z.union([ FinancialReportExportCreateManyInputSchema,FinancialReportExportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportExportDeleteArgsSchema: z.ZodType<Prisma.FinancialReportExportDeleteArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  where: FinancialReportExportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportExportUpdateArgsSchema: z.ZodType<Prisma.FinancialReportExportUpdateArgs> = z.object({
  select: FinancialReportExportSelectSchema.optional(),
  include: FinancialReportExportIncludeSchema.optional(),
  data: z.union([ FinancialReportExportUpdateInputSchema,FinancialReportExportUncheckedUpdateInputSchema ]),
  where: FinancialReportExportWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportExportUpdateManyArgsSchema: z.ZodType<Prisma.FinancialReportExportUpdateManyArgs> = z.object({
  data: z.union([ FinancialReportExportUpdateManyMutationInputSchema,FinancialReportExportUncheckedUpdateManyInputSchema ]),
  where: FinancialReportExportWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportExportDeleteManyArgsSchema: z.ZodType<Prisma.FinancialReportExportDeleteManyArgs> = z.object({
  where: FinancialReportExportWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportScheduleCreateArgsSchema: z.ZodType<Prisma.FinancialReportScheduleCreateArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  data: z.union([ FinancialReportScheduleCreateInputSchema,FinancialReportScheduleUncheckedCreateInputSchema ]),
}).strict() ;

export const FinancialReportScheduleUpsertArgsSchema: z.ZodType<Prisma.FinancialReportScheduleUpsertArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereUniqueInputSchema,
  create: z.union([ FinancialReportScheduleCreateInputSchema,FinancialReportScheduleUncheckedCreateInputSchema ]),
  update: z.union([ FinancialReportScheduleUpdateInputSchema,FinancialReportScheduleUncheckedUpdateInputSchema ]),
}).strict() ;

export const FinancialReportScheduleCreateManyArgsSchema: z.ZodType<Prisma.FinancialReportScheduleCreateManyArgs> = z.object({
  data: z.union([ FinancialReportScheduleCreateManyInputSchema,FinancialReportScheduleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportScheduleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FinancialReportScheduleCreateManyAndReturnArgs> = z.object({
  data: z.union([ FinancialReportScheduleCreateManyInputSchema,FinancialReportScheduleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FinancialReportScheduleDeleteArgsSchema: z.ZodType<Prisma.FinancialReportScheduleDeleteArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  where: FinancialReportScheduleWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportScheduleUpdateArgsSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateArgs> = z.object({
  select: FinancialReportScheduleSelectSchema.optional(),
  include: FinancialReportScheduleIncludeSchema.optional(),
  data: z.union([ FinancialReportScheduleUpdateInputSchema,FinancialReportScheduleUncheckedUpdateInputSchema ]),
  where: FinancialReportScheduleWhereUniqueInputSchema,
}).strict() ;

export const FinancialReportScheduleUpdateManyArgsSchema: z.ZodType<Prisma.FinancialReportScheduleUpdateManyArgs> = z.object({
  data: z.union([ FinancialReportScheduleUpdateManyMutationInputSchema,FinancialReportScheduleUncheckedUpdateManyInputSchema ]),
  where: FinancialReportScheduleWhereInputSchema.optional(),
}).strict() ;

export const FinancialReportScheduleDeleteManyArgsSchema: z.ZodType<Prisma.FinancialReportScheduleDeleteManyArgs> = z.object({
  where: FinancialReportScheduleWhereInputSchema.optional(),
}).strict() ;