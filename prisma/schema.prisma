// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// Role-Based Access Control Models
// ==============================

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "crm:read", "finance:write", "hr:admin"
  description String?
  module      String   // e.g., "CRM", "Finance", "HR", "Projects"
  action      String   // e.g., "read", "write", "admin", "delete"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions       RolePermission[]
  customRolePermissions CustomRolePermission[]

  @@index([module])
  @@index([action])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  createdAt    DateTime   @default(now())

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
}

model CustomRole {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String   @default("bg-blue-100 text-blue-800")
  isActive       Boolean  @default(true)
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization    Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  permissions     CustomRolePermission[]
  userAssignments UserOrganization[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([createdById])
}

model CustomRolePermission {
  id           String   @id @default(cuid())
  customRoleId String
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  customRole CustomRole @relation(fields: [customRoleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([customRoleId, permissionId])
  @@index([customRoleId])
  @@index([permissionId])
}

// ==============================
// Core Organization Models
// ==============================

model Organization {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  website     String?
  industry    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users            UserOrganization[]
  customers        Customer[]
  projects         Project[]
  tasks            Task[]
  invoices         Invoice[]
  expenses         Expense[]
  expenseCategories ExpenseCategory[]
  expenseTags      ExpenseTag[]
  employees        Employee[]
  campaigns        MarketingCampaign[]
  invitations      Invitation[]
  customRoles      CustomRole[]
  financialReports FinancialReport[]
  workflows        Workflow[]
  actionTemplates  ActionTemplate[]
  variableDefinitions VariableDefinition[]
  integrationConfigs IntegrationConfig[]
}

model UserOrganization {
  userId         String
  organizationId String
  role           UserRole?
  customRoleId   String?
  joinedAt       DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customRole   CustomRole? @relation(fields: [customRoleId], references: [id], onDelete: SetNull)

  @@id([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([customRoleId])
}

enum UserRole {
  // Organization Level Roles
  ORGANIZATION_OWNER
  SUPER_ADMIN
  DEPARTMENT_MANAGER
  
  // Departmental Roles
  HR_MANAGER
  SALES_MANAGER
  FINANCE_MANAGER
  PROJECT_MANAGER
  
  // Standard User Roles
  EMPLOYEE
  CONTRACTOR
  VIEWER
}

// ==============================
// CRM Models
// ==============================

model Customer {
  id             String       @id @default(cuid())
  organizationId String
  type           CustomerType
  status         LeadStatus?
  firstName      String
  lastName       String
  email          String?
  phone          String?
  company        String?
  position       String?
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  source         LeadSource?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  organization Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  interactions CustomerInteraction[]
  deals        Deal[]
  invoices     Invoice[]

  @@index([organizationId])
  @@index([email])
  @@index([status])
}

enum CustomerType {
  LEAD
  PROSPECT
  CUSTOMER
  FORMER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  EVENT
  COLD_CALL
  OTHER
}

model CustomerInteraction {
  id          String            @id @default(cuid())
  customerId  String
  type        InteractionType
  medium      InteractionMedium
  subject     String?
  content     String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdById String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tasks    Task[]

  @@index([customerId])
  @@index([createdById])
}

enum InteractionType {
  CALL
  EMAIL
  MEETING
  NOTE
  TASK
}

enum InteractionMedium {
  IN_PERSON
  PHONE
  VIDEO
  EMAIL
  CHAT
  OTHER
}

model Deal {
  id                String     @id @default(cuid())
  customerId        String
  title             String
  value             Decimal    @db.Decimal(10, 2)
  currency          String     @default("USD")
  status            LeadStatus
  stage             Int
  probability       Float?
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  description       String?
  createdById       String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([status])
  @@index([createdById])
}

// ==============================
// Project Management Models
// ==============================

model Project {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  status         ProjectStatus
  budget         Decimal?      @db.Decimal(10, 2)
  currency       String        @default("USD")
  createdById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        Task[]
  resources    ProjectResource[]
  timeEntries  TimeEntry[]
  expenses     Expense[]

  @@index([organizationId])
  @@index([createdById])
  @@index([status])
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model Task {
  id             String     @id @default(cuid())
  organizationId String
  projectId      String?
  parentTaskId   String?
  title          String
  description    String?
  status         TaskStatus
  priority       Priority
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  assignedToId   String?
  createdById    String?
  estimatedHours Float?
  actualHours    Float?
  order          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  organization          Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project               Project?             @relation(fields: [projectId], references: [id], onDelete: SetNull)
  parentTask            Task?                @relation("TaskHierarchy", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subtasks              Task[]               @relation("TaskHierarchy")
  timeEntries           TimeEntry[]
  comments              Comment[]
  attachments           Attachment[]
  customerInteraction   CustomerInteraction? @relation(fields: [customerInteractionId], references: [id])
  customerInteractionId String?

  @@index([organizationId])
  @@index([projectId])
  @@index([parentTaskId])
  @@index([assignedToId])
  @@index([status])
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model ProjectResource {
  projectId  String
  assigneeId String
  role       String?
  allocation Float? // Percentage allocation (0-100)
  startDate  DateTime?
  endDate    DateTime?
  hourlyRate Decimal?  @db.Decimal(10, 2)
  currency   String    @default("USD")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, assigneeId])
  @@index([projectId])
  @@index([assigneeId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  projectId   String?
  taskId      String?
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in minutes
  billable    Boolean   @default(true)
  invoiced    Boolean   @default(false)
  invoiceId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  // Relations
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@index([projectId])
  @@index([taskId])
  @@index([userId])
  @@index([invoiceId])
}

// ==============================
// Finance Models
// ==============================

model Invoice {
  id                 String        @id @default(cuid())
  organizationId     String
  customerId         String       
  customerEmail      String
  customerName       String?       // Customer display name
  customerAddress    String?       // Billing address
  customerPhone      String?       // Customer phone
  invoiceNumber      String
  status             InvoiceStatus
  issueDate          DateTime
  dueDate            DateTime
  paymentTerms       String        @default("Net 30") // e.g., "Net 30", "Due on receipt"
  poNumber           String?       // Purchase Order Number
  subtotal           Decimal       @db.Decimal(12, 2)
  taxAmount          Decimal       @db.Decimal(12, 2)
  discountAmount     Decimal       @db.Decimal(12, 2)
  shippingAmount     Decimal       @default(0) @db.Decimal(12, 2)
  totalAmount        Decimal       @db.Decimal(12, 2)
  paidAmount         Decimal       @default(0) @db.Decimal(12, 2)
  currency           String        @default("USD")
  notes              String?
  internalNotes      String?       // Private notes not visible to customer
  termsAndConditions String?
  footer             String?       // Footer text for invoice
  logoUrl            String?       // Company logo URL
  sentAt             DateTime?     // When invoice was sent
  viewedAt           DateTime?     // When customer viewed invoice
  lastReminder       DateTime?     // Last payment reminder sent
  createdById        String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items        InvoiceItem[]
  payments     Payment[]

  @@unique([organizationId, invoiceNumber])
  @@index([organizationId])
  @@index([customerId])
  @@index([status])
  @@index([customerEmail])
  @@index([issueDate])
  @@index([dueDate])
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String?  // Link to product/service if exists
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(12, 2)
  taxRate     Decimal  @default(0) @db.Decimal(5, 2)
  discountRate Decimal @default(0) @db.Decimal(5, 2) // Item-level discount
  subtotal    Decimal  @db.Decimal(12, 2)
  sortOrder   Int      @default(0) // For maintaining item order
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([productId])
}

model Payment {
  id             String        @id @default(cuid())
  invoiceId      String
  amount         Decimal       @db.Decimal(12, 2)
  currency       String        @default("USD")
  method         PaymentMethod
  reference      String?       // Transaction reference/ID
  paymentDate    DateTime
  notes          String?
  feeAmount      Decimal       @default(0) @db.Decimal(12, 2) // Processing fees
  status         PaymentStatus @default(COMPLETED)
  gatewayId      String?       // Payment gateway transaction ID
  refundedAmount Decimal       @default(0) @db.Decimal(12, 2)
  createdById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([paymentDate])
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

model Expense {
  id             String        @id @default(cuid())
  organizationId String
  categoryId     String?
  customCategory String?       // For ad-hoc categories
  amount         Decimal       @db.Decimal(12, 2)
  currency       String        @default("USD")
  date           DateTime
  description    String?
  receipt        String?       // URL to receipt image
  vendor         String?
  paymentMethod  PaymentMethod @default(CREDIT_CARD)
  projectId      String?       // Optional project association
  status         ExpenseStatus @default(DRAFT)
  reimbursable   Boolean       @default(false)
  reimbursed     Boolean       @default(false)
  reimbursedAt   DateTime?
  submittedAt    DateTime?
  createdById    String?
  approvedById   String?
  approvedAt     DateTime?
  rejectedAt     DateTime?
  rejectionReason String?
  notes          String?       // Internal notes
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category     ExpenseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  project      Project?        @relation(fields: [projectId], references: [id], onDelete: SetNull)
  tags         ExpenseToTag[]

  @@index([organizationId])
  @@index([createdById])
  @@index([categoryId])
  @@index([status])
  @@index([date])
  @@index([projectId])
}

enum ExpenseStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  PAID
  REIMBURSED
}

model ExpenseCategory {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  description    String?
  color          String    @default("bg-blue-100 text-blue-800")
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  expenses     Expense[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model ExpenseTag {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  color          String        @default("bg-gray-100 text-gray-800")
  createdAt      DateTime      @default(now())

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  expenses     ExpenseToTag[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model ExpenseToTag {
  expenseId String
  tagId     String

  // Relations  
  expense Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tag     ExpenseTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([expenseId, tagId])
  @@index([expenseId])
  @@index([tagId])
}

// ==============================
// Collaboration Models
// ==============================

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

model Attachment {
  id           String   @id @default(cuid())
  taskId       String
  name         String
  fileUrl      String
  fileType     String
  fileSize     Int // Size in bytes
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([uploadedById])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  allDay      Boolean  @default(false)
  location    String?
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  attendees CalendarEventAttendee[]

  @@index([organizerId])
}

model CalendarEventAttendee {
  eventId   String
  userId    String
  status    AttendeeStatus
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  // Relations
  event CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  content   String
  type      NotificationType
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())

  @@index([userId])
  @@index([read])
}

enum NotificationType {
  TASK
  COMMENT
  MENTION
  REMINDER
  SYSTEM
}

// ==============================
// Organization Invitations
// ==============================

model Invitation {
  id             String     @id @default(cuid())
  organizationId String
  email          String
  role           UserRole   @default(VIEWER)
  inviterId      String
  token          String     @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
  @@unique([organizationId, email])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

// ==============================
// HR Management Models
// ==============================

model Employee {
  id                    String         @id @default(cuid())
  organizationId        String
  firstName             String
  lastName              String
  email                 String
  phone                 String?
  position              String?
  department            String?
  hireDate              DateTime?
  terminationDate       DateTime?
  status                EmployeeStatus @default(ACTIVE)
  managerId             String?
  address               String?
  city                  String?
  state                 String?
  country               String?
  postalCode            String?
  birthDate             DateTime?
  taxId                 String?
  emergencyContactName  String?
  emergencyContactPhone String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())

  // Relations
  organization       Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  payrolls           Payroll[]
  timeOff            TimeOff[]
  performanceReviews PerformanceReview[]

  @@index([organizationId])
  @@index([email])
  @@index([managerId])
  @@index([status])
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
  PROBATION
}

model Payroll {
  id             String        @id @default(cuid())
  employeeId     String
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  payDate        DateTime
  basicSalary    Decimal       @db.Decimal(10, 2)
  overtime       Decimal       @default(0) @db.Decimal(10, 2)
  bonus          Decimal       @default(0) @db.Decimal(10, 2)
  tax            Decimal       @default(0) @db.Decimal(10, 2)
  deductions     Decimal       @default(0) @db.Decimal(10, 2)
  netAmount      Decimal       @db.Decimal(10, 2)
  currency       String        @default("USD")
  status         PayrollStatus
  notes          String?
  createdById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
}

enum PayrollStatus {
  DRAFT
  APPROVED
  PAID
  CANCELLED
}

model TimeOff {
  id           String        @id @default(cuid())
  employeeId   String
  type         TimeOffType
  startDate    DateTime
  endDate      DateTime
  duration     Float // In days
  reason       String?
  status       TimeOffStatus
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([status])
}

enum TimeOffType {
  VACATION
  SICK
  PERSONAL
  BEREAVEMENT
  MATERNITY
  PATERNITY
  UNPAID
}

enum TimeOffStatus {
  PENDING
  APPROVED
  DENIED
  CANCELLED
}

model PerformanceReview {
  id               String       @id @default(cuid())
  employeeId       String
  reviewerId       String
  reviewPeriod     String
  performanceScore Float?
  strengths        String?
  improvements     String?
  goals            String?
  comments         String?
  reviewDate       DateTime
  status           ReviewStatus
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([reviewerId])
  @@index([status])
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  ACKNOWLEDGED
  COMPLETED
}

// ==============================
// Marketing Automation Models
// ==============================

model MarketingCampaign {
  id             String         @id @default(cuid())
  organizationId String
  name           String
  description    String?
  type           CampaignType
  status         CampaignStatus
  startDate      DateTime?
  endDate        DateTime?
  budget         Decimal?       @db.Decimal(10, 2)
  currency       String         @default("USD")
  targetAudience String?
  createdById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())

  // Relations
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  emailCampaigns EmailCampaign[]
  socialPosts    SocialMediaPost[]

  @@index([organizationId])
  @@index([status])
  @@index([type])
}

enum CampaignType {
  EMAIL
  SOCIAL_MEDIA
  PPC
  CONTENT
  EVENT
  OTHER
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

model EmailCampaign {
  id          String    @id @default(cuid())
  campaignId  String
  subject     String
  content     String
  sender      String
  scheduledAt DateTime?
  sentAt      DateTime?
  opens       Int       @default(0)
  clicks      Int       @default(0)
  bounces     Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}

model SocialMediaPost {
  id          String         @id @default(cuid())
  campaignId  String
  platform    SocialPlatform
  content     String
  mediaUrl    String?
  scheduledAt DateTime?
  publishedAt DateTime?
  likes       Int            @default(0)
  shares      Int            @default(0)
  comments    Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())

  // Relations
  campaign MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([platform])
}

enum SocialPlatform {
  FACEBOOK
  TWITTER
  LINKEDIN
  INSTAGRAM
  YOUTUBE
  TIKTOK
  PINTEREST
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ==============================
// Financial Reporting Models
// ==============================

model FinancialReport {
  id             String                @id @default(cuid())
  organizationId String
  name           String
  description    String?
  type           FinancialReportType
  template       Json                  // Store report template configuration
  filters        Json?                 // Store filter configuration
  dateRange      Json                  // Store date range configuration
  status         FinancialReportStatus @default(DRAFT)
  generatedAt    DateTime?
  generatedBy    String?
  isTemplate     Boolean               @default(false)
  isScheduled    Boolean               @default(false)
  scheduleConfig Json?                 // Store scheduling configuration
  createdById    String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // Relations
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reportData     FinancialReportData[]
  exports        FinancialReportExport[]
  schedules      FinancialReportSchedule[]

  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([createdById])
}

enum FinancialReportType {
  INCOME_STATEMENT
  BALANCE_SHEET
  CASH_FLOW
  EXPENSE_REPORT
  PROFIT_LOSS
  CUSTOM
}

enum FinancialReportStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

model FinancialReportData {
  id        String   @id @default(cuid())
  reportId  String
  data      Json     // Store actual report data
  metadata  Json?    // Store metadata about calculations
  createdAt DateTime @default(now())

  // Relations
  report FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model FinancialReportExport {
  id         String                    @id @default(cuid())
  reportId   String
  format     FinancialReportExportFormat
  fileName   String
  fileUrl    String?
  fileSize   Int?                      // Size in bytes
  status     FinancialReportExportStatus @default(PENDING)
  error      String?
  createdById String
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  // Relations
  report FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([createdById])
  @@index([status])
}

enum FinancialReportExportFormat {
  PDF
  EXCEL
  CSV
  JSON
}

enum FinancialReportExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model FinancialReportSchedule {
  id             String                        @id @default(cuid())
  reportId       String
  frequency      FinancialReportScheduleFrequency
  dayOfWeek      Int?                          // 0-6 for weekly schedules
  dayOfMonth     Int?                          // 1-31 for monthly schedules
  time           String                        // HH:MM format
  timezone       String                        @default("UTC")
  isActive       Boolean                       @default(true)
  lastRunAt      DateTime?
  nextRunAt      DateTime
  recipients     Json                          // Array of email addresses
  emailSubject   String?
  emailBody      String?
  createdById    String
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt

  // Relations
  report FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([nextRunAt])
  @@index([isActive])
}

enum FinancialReportScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}


// ==============================
// Workflow Management Models
// ==============================

model Workflow {
  id             String        @id @default(cuid())
  organizationId String
  name           String
  description    String?
  version        Int           @default(1)
  status         WorkflowStatus @default(INACTIVE)
  isTemplate     Boolean       @default(false)
  category       String?       // e.g., "CRM", "HR", "Finance", "Projects"
  
  // React Flow Canvas Data
  canvasData     Json?         // Store React Flow nodes, edges, and viewport
  
  // Execution Configuration
  retryConfig    Json?         // Retry policies and limits
  timeoutConfig  Json?         // Timeout settings
  
  // Analytics
  totalExecutions Int          @default(0)
  successfulExecutions Int     @default(0)
  failedExecutions Int         @default(0)
  lastExecutedAt DateTime?
  
  // Metadata
  createdById    String
  updatedById    String?
  publishedAt    DateTime?
  publishedById  String?
  archivedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  triggers       WorkflowTrigger[]
  nodes          WorkflowNode[]
  connections    WorkflowConnection[]
  executions     WorkflowExecution[]
  analytics      WorkflowAnalytics[]

  @@index([organizationId])
  @@index([status])
  @@index([category])
  @@index([createdById])
  @@unique([organizationId, name, version])
}

enum WorkflowStatus {
  DRAFT
  INACTIVE
  ACTIVE
  PAUSED
  ARCHIVED
  ERROR
}

model WorkflowTrigger {
  id             String            @id @default(cuid())
  workflowId     String
  name           String
  description    String?
  type           WorkflowTriggerType
  module         String            // e.g., "CRM", "HR", "Finance", "System"
  
  // Trigger Configuration
  entityType     String?           // e.g., "customer", "deal", "employee", "invoice"
  eventType      String            // e.g., "created", "updated", "deleted", "status_changed"
  conditions     Json?             // Conditional logic for trigger activation
  
  // Timing Configuration
  delay          Int?              // Delay in minutes before execution
  
  // State Management
  isActive       Boolean           @default(true)
  lastTriggered  DateTime?
  triggerCount   Int               @default(0)
  
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  workflow       Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executions     WorkflowExecution[]
  variables      TriggerVariable[]

  @@index([workflowId])
  @@index([type])
  @@index([module])
  @@index([entityType])
}

enum WorkflowTriggerType {
  RECORD_CREATED
  RECORD_UPDATED  
  RECORD_DELETED
  STATUS_CHANGED
  FORM_SUBMITTED
  TIME_BASED
  MANUAL
  WEBHOOK
  API_CALL
  EMAIL_RECEIVED
  FILE_UPLOADED
}

model WorkflowNode {
  id             String           @id @default(cuid())
  workflowId     String
  nodeId         String           // React Flow node ID
  type           WorkflowNodeType
  name           String
  description    String?
  
  // React Flow Position
  position       Json             // {x: number, y: number}
  
  // Node Configuration
  config         Json?            // Node-specific configuration
  template       Json?            // Template configuration if applicable
  
  // Execution Configuration  
  executionOrder Int?             // For sequential execution
  isOptional     Boolean          @default(false)
  retryLimit     Int              @default(3)
  timeout        Int?             // Timeout in seconds
  
  // Conditional Logic
  conditions     Json?            // Conditions for node execution
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  workflow       Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executions     NodeExecution[]
  dependencies   NodeDependency[]    @relation("DependentNode")
  dependents     NodeDependency[]    @relation("PrerequisiteNode")
  emailActions   EmailAction[]       @relation("EmailActions")
  smsActions     SmsAction[]         @relation("SmsActions")
  whatsAppActions WhatsAppAction[]   @relation("WhatsAppActions")
  slackActions   SlackAction[]       @relation("SlackActions")
  calendarActions CalendarAction[]   @relation("CalendarActions")

  @@index([workflowId])
  @@index([type])
  @@index([nodeId])
  @@unique([workflowId, nodeId])
}

enum WorkflowNodeType {
  TRIGGER
  ACTION
  CONDITION
  DELAY
  PARALLEL
  LOOP
  SWITCH
  APPROVAL
  EMAIL
  SMS
  WHATSAPP
  SLACK
  CALENDAR
  DATA_TRANSFORM
  NOTIFICATION
  CUSTOM
}

model WorkflowConnection {
  id             String   @id @default(cuid())
  workflowId     String
  edgeId         String   // React Flow edge ID
  sourceNodeId   String   // React Flow source node ID
  targetNodeId   String   // React Flow target node ID
  sourceHandle   String?  // React Flow source handle
  targetHandle   String?  // React Flow target handle
  
  // Connection Configuration
  label          String?
  conditions     Json?    // Conditional logic for connection
  
  // Visual Configuration
  style          Json?    // Edge styling
  animated       Boolean  @default(false)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  workflow       Workflow     @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([sourceNodeId])
  @@index([targetNodeId])
  @@unique([workflowId, edgeId])
}

model NodeDependency {
  id                String       @id @default(cuid())
  dependentNodeId   String       // Node that depends on another
  prerequisiteNodeId String      // Node that must complete first
  dependencyType    DependencyType @default(SUCCESS)
  
  createdAt         DateTime     @default(now())

  // Relations
  dependentNode     WorkflowNode @relation("DependentNode", fields: [dependentNodeId], references: [id], onDelete: Cascade)
  prerequisiteNode  WorkflowNode @relation("PrerequisiteNode", fields: [prerequisiteNodeId], references: [id], onDelete: Cascade)

  @@unique([dependentNodeId, prerequisiteNodeId])
  @@index([dependentNodeId])
  @@index([prerequisiteNodeId])
}

enum DependencyType {
  SUCCESS       // Execute only if prerequisite succeeds
  FAILURE       // Execute only if prerequisite fails
  COMPLETION    // Execute when prerequisite completes (regardless of status)
}

// ==============================
// Action Configuration Models
// ==============================

model ActionTemplate {
  id             String              @id @default(cuid())
  organizationId String?             // Null for system templates
  name           String
  description    String?
  category       ActionTemplateCategory
  type           WorkflowNodeType
  
  // Template Configuration
  template       Json                // Template structure and variables
  defaultConfig  Json?               // Default configuration values
  schema         Json?               // JSON schema for validation
  
  // Template Metadata
  version        String              @default("1.0.0")
  isPublic       Boolean             @default(false)
  isActive       Boolean             @default(true)
  usageCount     Int                 @default(0)
  
  // Template Variables
  requiredVariables Json?            // Required variables list
  optionalVariables Json?            // Optional variables list
  
  createdById    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  organization   Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  versions       ActionTemplateVersion[]

  @@index([organizationId])
  @@index([category])
  @@index([type])
  @@index([isActive])
}

enum ActionTemplateCategory {
  COMMUNICATION
  NOTIFICATION
  DATA_PROCESSING
  INTEGRATION
  APPROVAL
  REPORTING
  AUTOMATION
  CUSTOM
}

model ActionTemplateVersion {
  id           String   @id @default(cuid())
  templateId   String
  version      String
  template     Json
  changes      String?
  isActive     Boolean  @default(false)
  createdById  String?
  createdAt    DateTime @default(now())

  // Relations
  actionTemplate ActionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([version])
  @@unique([templateId, version])
}

// ==============================
// Variable System Models
// ==============================

model VariableDefinition {
  id             String        @id @default(cuid())
  organizationId String?       // Null for system variables
  name           String
  displayName    String
  description    String?
  category       String        // e.g., "User", "CRM", "System", "Organization"
  dataType       VariableDataType
  
  // Variable Configuration
  defaultValue   String?
  validation     Json?         // Validation rules
  formatting     Json?         // Formatting options
  isRequired     Boolean       @default(false)
  isCustom       Boolean       @default(false)
  
  // Scope Configuration
  scope          VariableScope @default(ORGANIZATION)
  moduleScope    String?       // Specific module if applicable
  
  createdById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  triggerVars    TriggerVariable[]
  executionVars  ExecutionVariable[]

  @@index([organizationId])
  @@index([category])
  @@index([scope])
  @@index([moduleScope])
  @@unique([organizationId, name])
}

enum VariableDataType {
  STRING
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  EMAIL
  PHONE
  URL
  JSON
  ARRAY
}

enum VariableScope {
  GLOBAL        // Available across all workflows
  ORGANIZATION  // Available within organization
  MODULE        // Available within specific module
  WORKFLOW      // Available within specific workflow
  TRIGGER       // Available within specific trigger context
}

model TriggerVariable {
  id           String   @id @default(cuid())
  triggerId    String
  variableId   String
  mapping      Json?    // How to extract/map this variable from trigger data
  isRequired   Boolean  @default(false)
  defaultValue String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  trigger      WorkflowTrigger    @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  variable     VariableDefinition @relation(fields: [variableId], references: [id], onDelete: Cascade)

  @@index([triggerId])
  @@index([variableId])
  @@unique([triggerId, variableId])
}

// ==============================
// Execution and State Management
// ==============================

model WorkflowExecution {
  id             String              @id @default(cuid())
  workflowId     String
  triggerId      String?
  
  // Execution Metadata
  executionId    String              @unique // Unique execution identifier
  status         WorkflowExecutionStatus @default(PENDING)
  priority       ExecutionPriority   @default(NORMAL)
  
  // Trigger Context
  triggerData    Json?               // Original trigger data
  triggerContext Json?               // Additional trigger context
  
  // Execution State
  currentNodeId  String?             // Currently executing node
  progress       Float               @default(0) // 0-100 percentage
  
  // Timing
  startedAt      DateTime?
  completedAt    DateTime?
  failedAt       DateTime?
  duration       Int?                // Duration in milliseconds
  
  // Results
  result         Json?               // Final execution result
  error          String?             // Error message if failed
  errorDetails   Json?               // Detailed error information
  
  // Retry Configuration
  retryCount     Int                 @default(0)
  maxRetries     Int                 @default(3)
  retryDelay     Int                 @default(60) // Delay in seconds
  
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  workflow       Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  trigger        WorkflowTrigger?    @relation(fields: [triggerId], references: [id], onDelete: SetNull)
  nodeExecutions NodeExecution[]
  variables      ExecutionVariable[]
  logs           ExecutionLog[]

  @@index([workflowId])
  @@index([triggerId])
  @@index([status])
  @@index([startedAt])
  @@index([executionId])
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

enum ExecutionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model NodeExecution {
  id                String               @id @default(cuid())
  workflowExecutionId String
  nodeId            String
  
  // Execution Metadata
  executionOrder    Int
  status            NodeExecutionStatus  @default(PENDING)
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?                 // Duration in milliseconds
  
  // Input/Output
  input             Json?                // Input data for the node
  output            Json?                // Output data from the node
  transformedData   Json?                // Data after transformations
  
  // Error Handling
  error             String?
  errorDetails      Json?
  retryCount        Int                  @default(0)
  maxRetries        Int                  @default(3)
  
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  // Relations
  workflowExecution WorkflowExecution    @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  node              WorkflowNode         @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([workflowExecutionId])
  @@index([nodeId])
  @@index([status])
  @@index([executionOrder])
}

enum NodeExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  CANCELLED
  TIMEOUT
}

model ExecutionVariable {
  id                  String             @id @default(cuid())
  workflowExecutionId String
  variableDefinitionId String?
  
  // Variable Data
  name                String
  value               String?
  resolvedValue       String?            // Final resolved value after processing
  dataType            VariableDataType
  
  // Context
  source              String?            // Where this variable came from
  nodeId              String?            // Node that generated this variable
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  workflowExecution   WorkflowExecution  @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  variableDefinition  VariableDefinition? @relation(fields: [variableDefinitionId], references: [id], onDelete: SetNull)

  @@index([workflowExecutionId])
  @@index([variableDefinitionId])
  @@index([name])
}

model ExecutionLog {
  id                  String             @id @default(cuid())
  workflowExecutionId String
  nodeId              String?
  
  // Log Data
  level               LogLevel
  message             String
  details             Json?
  timestamp           DateTime           @default(now())
  
  // Context
  source              String?            // Component that generated the log
  category            String?            // Log category
  
  createdAt           DateTime           @default(now())

  // Relations
  workflowExecution   WorkflowExecution  @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  @@index([workflowExecutionId])
  @@index([nodeId])
  @@index([level])
  @@index([timestamp])
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}



// ==============================
// Integration and External Services
// ==============================

model IntegrationConfig {
  id             String           @id @default(cuid())
  organizationId String
  name           String
  type           IntegrationType
  
  // Configuration
  config         Json             // Service-specific configuration
  credentials    Json?            // Encrypted credentials
  endpoints      Json?            // API endpoints and URLs
  
  // State Management
  isActive       Boolean          @default(true)
  isHealthy      Boolean          @default(true)
  lastHealthCheck DateTime?
  healthDetails  Json?
  
  // Usage Statistics
  requestCount   Int              @default(0)
  errorCount     Int              @default(0)
  lastUsedAt     DateTime?
  
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@unique([organizationId, name])
}

// ==============================
// Communication & Action Models
// ==============================

model EmailAction {
  id               String   @id @default(cuid())
  nodeId           String   // Reference to WorkflowNode
  
  // Email Configuration
  integrationId    String?  // Reference to IntegrationConfig
  fromName         String?
  fromEmail        String?
  replyTo          String?
  
  // Recipients
  toEmails         Json     // Array of email addresses or variables
  ccEmails         Json?    // CC recipients
  bccEmails        Json?    // BCC recipients
  
  // Content
  subject          String
  htmlBody         String?
  textBody         String?
  templateId       String?  // Reference to email template
  
  // Attachments
  attachments      Json?    // Array of attachment configurations
  
  // Tracking
  trackOpens       Boolean  @default(false)
  trackClicks      Boolean  @default(false)
  
  // Variables
  variables        Json?    // Variable mappings for personalization
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  node             WorkflowNode @relation("EmailActions", fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([integrationId])
}

model SmsAction {
  id               String   @id @default(cuid())
  nodeId           String   // Reference to WorkflowNode
  
  // SMS Configuration
  integrationId    String?  // Reference to IntegrationConfig
  fromNumber       String?
  
  // Recipients
  toNumbers        Json     // Array of phone numbers or variables
  
  // Content
  message          String
  templateId       String?  // Reference to SMS template
  
  // Configuration
  maxLength        Int?     @default(160)
  unicode          Boolean  @default(false)
  
  // Variables
  variables        Json?    // Variable mappings for personalization
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  node             WorkflowNode @relation("SmsActions", fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([integrationId])
}

model WhatsAppAction {
  id               String   @id @default(cuid())
  nodeId           String   // Reference to WorkflowNode
  
  // WhatsApp Configuration
  integrationId    String?  // Reference to IntegrationConfig
  businessAccountId String?
  
  // Recipients
  toNumbers        Json     // Array of phone numbers or variables
  
  // Content
  messageType      WhatsAppMessageType @default(TEXT)
  textMessage      String?
  templateName     String?  // WhatsApp template name
  templateLanguage String?  // Template language code
  
  // Media (for media messages)
  mediaUrl         String?
  mediaType        String?  // image, video, audio, document
  caption          String?
  
  // Template Parameters
  templateParams   Json?    // Parameters for template messages
  
  // Variables
  variables        Json?    // Variable mappings for personalization
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  node             WorkflowNode @relation("WhatsAppActions", fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([integrationId])
}

enum WhatsAppMessageType {
  TEXT
  TEMPLATE
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
}

model SlackAction {
  id               String   @id @default(cuid())
  nodeId           String   // Reference to WorkflowNode
  
  // Slack Configuration
  integrationId    String?  // Reference to IntegrationConfig
  workspaceId      String?
  
  // Target
  channel          String?  // Channel ID or name
  userId           String?  // User ID for DM
  
  // Content
  message          String
  blocks           Json?    // Slack blocks for rich formatting
  attachments      Json?    // Slack attachments
  
  // Options
  asUser           Boolean  @default(false)
  username         String?  // Bot username
  iconEmoji        String?  // Bot icon emoji
  iconUrl          String?  // Bot icon URL
  
  // Threading
  threadTs         String?  // Thread timestamp for replies
  replyBroadcast   Boolean  @default(false)
  
  // Variables
  variables        Json?    // Variable mappings for personalization
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  node             WorkflowNode @relation("SlackActions", fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([integrationId])
}



model CalendarAction {
  id               String   @id @default(cuid())
  nodeId           String   // Reference to WorkflowNode
  
  // Calendar Configuration
  integrationId    String?  // Reference to IntegrationConfig
  calendarId       String?  // Specific calendar ID
  
  // Event Details
  title            String
  description      String?
  location         String?
  
  // Timing
  startTime        String   // ISO datetime or variable
  endTime          String   // ISO datetime or variable
  isAllDay         Boolean  @default(false)
  timezone         String   @default("UTC")
  
  // Attendees
  attendees        Json?    // Array of email addresses
  organizer        String?  // Organizer email
  
  // Reminders
  reminders        Json?    // Reminder configurations
  
  // Recurrence
  recurrence       Json?    // Recurrence rules
  
  // Variables
  variables        Json?    // Variable mappings for personalization
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  node             WorkflowNode @relation("CalendarActions", fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([nodeId])
  @@index([integrationId])
}







enum IntegrationType {
  // Email Services
  EMAIL_SMTP
  EMAIL_SENDGRID
  EMAIL_MAILGUN
  EMAIL_RESEND
  EMAIL_POSTMARK
  
  // SMS Gateways
  SMS_TWILIO
  SMS_AWS_SNS
  SMS_NEXMO
  SMS_MESSAGEBIRD
  
  // WhatsApp Business
  WHATSAPP_BUSINESS
  WHATSAPP_TWILIO
  
  // Workspace Communication
  SLACK
  
  // Calendar Integration
  GOOGLE_CALENDAR
  OUTLOOK_CALENDAR
  APPLE_CALENDAR
}

// ==============================
// Analytics and Performance
// ==============================

model WorkflowAnalytics {
  id                    String   @id @default(cuid())
  workflowId            String
  
  // Time Period
  periodStart           DateTime
  periodEnd             DateTime
  granularity           String   @default("daily") // daily, weekly, monthly
  
  // Execution Metrics
  totalExecutions       Int      @default(0)
  successfulExecutions  Int      @default(0)
  failedExecutions      Int      @default(0)
  averageDuration       Float?   // Average duration in milliseconds
  
  // Performance Metrics
  minDuration           Int?     // Minimum duration in milliseconds
  maxDuration           Int?     // Maximum duration in milliseconds
  p95Duration           Int?     // 95th percentile duration
  
  // Error Analysis
  commonErrors          Json?    // Most common error types and counts
  errorRate             Float?   // Error rate percentage
  
  // Resource Usage
  avgCpuUsage           Float?
  avgMemoryUsage        Float?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  workflow              Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([periodStart])
  @@index([granularity])
  @@unique([workflowId, periodStart, granularity])
}
